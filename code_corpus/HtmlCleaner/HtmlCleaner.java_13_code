    private void calculateRootNode(final CleanTimeValues cleanTimeValues) {
        cleanTimeValues.rootNode = cleanTimeValues.htmlNode;

        if (properties.isOmitHtmlEnvelope()) {
            final List bodyChildren = cleanTimeValues.bodyNode.getChildren();
            if (bodyChildren != null) {
                for (Object child : bodyChildren) {
                    // if found child that is tag itself, then return it
                    if (child instanceof TagNode) {
                        cleanTimeValues.rootNode = (TagNode) child;
                        break;
                    }
                }
            }
        }
    }

    public TagNode clean(final File file) throws IOException {
        return clean(file, DEFAULT_CHARSET);
    }

    public TagNode clean(final File file, final String charset) throws IOException {
        final FileInputStream in = new FileInputStream(file);
        final Reader reader = new InputStreamReader(in, charset);
        return clean(reader);
    }

    public TagNode clean(final InputStream in) throws IOException {
        return clean(in, DEFAULT_CHARSET);
    }

    public TagNode clean(final InputStream in, final String charset) throws IOException {
        return clean(new InputStreamReader(in, charset));
    }

    public TagNode clean(final Reader reader) throws IOException {
        return clean(reader, new CleanTimeValues());
    }

