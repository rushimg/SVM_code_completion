    public static String evaluateTemplate(final String template, final Map variables) {
        if (template == null) {
            return template;
        }

        final StringBuilder result = new StringBuilder();

        int startIndex = template.indexOf(VAR_START);
        int endIndex = -1;

        while (startIndex >= 0 && startIndex < template.length()) {
            result.append(template.substring(endIndex + 1, startIndex));
            endIndex = template.indexOf(VAR_END, startIndex);

            if (endIndex > startIndex) {
                final String varName = template.substring(startIndex + VAR_START.length(), endIndex);
                final Object resultObj = variables != null ? variables.get(varName.toLowerCase()) : "";
                result.append(resultObj == null ? "" : resultObj.toString());
            }

            startIndex = template.indexOf(VAR_START, Math.max(endIndex + VAR_END.length(), startIndex + 1));
        }

        result.append(template.substring(endIndex + 1));

        return result.toString();
    }

    public static String[] tokenize(final String s, final String delimiters) {
        if (s == null) {
            return new String[] {};
        }

        final StringTokenizer tokenizer = new StringTokenizer(s, delimiters);
        final String result[] = new String[tokenizer.countTokens()];
        int index = 0;
        while (tokenizer.hasMoreTokens()) {
            result[index++] = tokenizer.nextToken();
        }

        return result;
    }

    public static void updateTagTransformations(final CleanerTransformations transformations, final String key,
            final String value) {
        final int index = key.indexOf('.');

        // new tag transformation case (tagname[=destname[,preserveatts]])
        if (index <= 0) {
            String destTag = null;
            boolean preserveSourceAtts = true;
            if (value != null) {
                final String[] tokens = tokenize(value, ",;");
                if (tokens.length > 0) {
                    destTag = tokens[0];
                }
                if (tokens.length > 1) {
                    preserveSourceAtts = "true".equalsIgnoreCase(tokens[1]) || "yes".equalsIgnoreCase(tokens[1])
                            || "1".equals(tokens[1]);
                }
            }
            final TagTransformation newTagTrans = new TagTransformation(key, destTag, preserveSourceAtts);
            transformations.addTransformation(newTagTrans);
        } else { // attribute transformation description
            final String[] parts = tokenize(key, ".");
            final String tagName = parts[0];
            final TagTransformation trans = transformations.getTransformation(tagName);
            if (trans != null) {
                trans.addAttributeTransformation(parts[1], value);
            }
        }
    }

