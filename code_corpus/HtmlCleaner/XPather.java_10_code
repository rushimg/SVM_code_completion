    private Collection getElementsByName(final Collection source, final int from, final int to,
            final boolean isRecursive, final boolean isFilterContext) throws XPatherException {
        String name = tokenArray[from].trim();

        if (isAtt(name)) {
            name = name.substring(1);
            final Collection result = new ArrayList();
            Collection nodes;
            if (isRecursive) {
                nodes = new LinkedHashSet();
                final Iterator iterator = source.iterator();
                while (iterator.hasNext()) {
                    final Object next = iterator.next();
                    if (next instanceof TagNode) {
                        final TagNode node = (TagNode) next;
                        nodes.addAll(node.getAllElementsList(true));
                    }
                }
            } else {
                nodes = source;
            }

            final Iterator iterator = nodes.iterator();
            while (iterator.hasNext()) {
                final Object next = iterator.next();
                if (next instanceof TagNode) {
                    final TagNode node = (TagNode) next;
                        result.addAll(evaluateAgainst(node.getAttributes().values(), from + 1, to, false, 1, 1,
                                isFilterContext, null));
                    } else {
                        final String attValue = node.getAttributeByName(name);
                        if (attValue != null) {
                            result.addAll(evaluateAgainst(singleton(attValue), from + 1, to, false, 1, 1,
                                    isFilterContext, null));
                        }
                    }
                } else {
                    throwStandardException();
                }
            }
            return result;
        } else {
            final Collection result = new LinkedHashSet();
            final Iterator iterator = source.iterator();
            int index = 0;
            while (iterator.hasNext()) {
                final Object next = iterator.next();
                if (next instanceof TagNode) {
                    final TagNode node = (TagNode) next;
                    index++;
                    final boolean isSelf = ".".equals(name);
                    final boolean isParent = "..".equals(name);

                    final Collection subnodes;
                    if (isSelf) {
                        subnodes = singleton(node);
                    } else if (isParent) {
                        final TagNode parent = node.getParent();
                        subnodes = parent != null ? singleton(parent) : new ArrayList();
                    } else {
                        subnodes = isAll ? node.getChildTagList() : node.getElementListByName(name, false);
                    }

                    final LinkedHashSet nodeSet = new LinkedHashSet(subnodes);
                    final Collection refinedSubnodes = evaluateAgainst(nodeSet, from + 1, to, false, index, nodeSet
                            .size(), isFilterContext, null);

                    if (isRecursive) {
                        final List childTags = node.getChildTagList();
                        if (isSelf || isParent || isAll) {
                            result.addAll(refinedSubnodes);
                        }
                        final Iterator childIterator = childTags.iterator();
                        while (childIterator.hasNext()) {
                            final TagNode childTag = (TagNode) childIterator.next();
                            final Collection childrenByName = getElementsByName(singleton(childTag), from, to,
                                    isRecursive, isFilterContext);
                            if (!isSelf && !isParent && !isAll && refinedSubnodes.contains(childTag)) {
                                result.add(childTag);
                            }
                            result.addAll(childrenByName);
                        }
                    } else {
                        result.addAll(refinedSubnodes);
                    }
                } else {
                    throwStandardException();
                }
            }
            return result;
        }
    }

