    private Collection evaluateFunction(final Collection source, final int from, final int to, final int position,
            final int last, final boolean isFilterContext) throws XPatherException {
        final String name = tokenArray[from].trim();
        final ArrayList result = new ArrayList();

        final int size = source.size();
        final Iterator iterator = source.iterator();
        int index = 0;
        while (iterator.hasNext()) {
            final Object curr = iterator.next();
            index++;
            if ("last".equals(name)) {
                result.add(Integer.valueOf(isFilterContext ? last : size));
            } else if ("position".equals(name)) {
                result.add(Integer.valueOf(isFilterContext ? position : index));
            } else if ("text".equals(name)) {
                if (curr instanceof TagNode) {
                    result.add(((TagNode) curr).getText());
                } else if (curr instanceof String) {
                    result.add(curr.toString());
                }
            } else if ("count".equals(name)) {
                final Collection argumentEvaluated = evaluateAgainst(source, from + 2, to - 1, false, position, 0,
                        isFilterContext, null);
                result.add(Integer.valueOf(argumentEvaluated.size()));
            } else if ("data".equals(name)) {
                final Collection argumentEvaluated = evaluateAgainst(source, from + 2, to - 1, false, position, 0,
                        isFilterContext, null);
                final Iterator it = argumentEvaluated.iterator();
                while (it.hasNext()) {
                    final Object elem = it.next();
                    if (elem instanceof TagNode) {
                        result.add(((TagNode) elem).getText());
                    } else if (elem instanceof String) {
                        result.add(elem.toString());
                    }
                }
            } else {
                throw new XPatherException("Unknown function " + name + "!");
            }
        }

        return result;
    }

