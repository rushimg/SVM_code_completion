    private int findClosingIndex(final int from, final int to) {
        if (from < to) {
            final String currToken = tokenArray[from];

            if ("\"".equals(currToken)) {
                for (int i = from + 1; i <= to; i++) {
                    if ("\"".equals(tokenArray[i])) {
                        return i;
                    }
                }
            } else if ("'".equals(currToken)) {
                for (int i = from + 1; i <= to; i++) {
                    if ("'".equals(tokenArray[i])) {
                        return i;
                    }
                }
            } else if ("(".equals(currToken) || "[".equals(currToken) || "/".equals(currToken)) {
                boolean isQuoteClosed = true;
                boolean isAposClosed = true;
                int brackets = "(".equals(currToken) ? 1 : 0;
                int angleBrackets = "[".equals(currToken) ? 1 : 0;
                int slashes = "/".equals(currToken) ? 1 : 0;
                for (int i = from + 1; i <= to; i++) {
                    if ("\"".equals(tokenArray[i])) {
                        isQuoteClosed = !isQuoteClosed;
                    } else if ("'".equals(tokenArray[i])) {
                        isAposClosed = !isAposClosed;
                    } else if ("(".equals(tokenArray[i]) && isQuoteClosed && isAposClosed) {
                        brackets++;
                    } else if (")".equals(tokenArray[i]) && isQuoteClosed && isAposClosed) {
                        brackets--;
                    } else if ("[".equals(tokenArray[i]) && isQuoteClosed && isAposClosed) {
                        angleBrackets++;
                    } else if ("]".equals(tokenArray[i]) && isQuoteClosed && isAposClosed) {
                        angleBrackets--;
                    } else if ("/".equals(tokenArray[i]) && isQuoteClosed && isAposClosed && brackets == 0
                            && angleBrackets == 0) {
                        slashes--;
                    }

                    if (isQuoteClosed && isAposClosed && brackets == 0 && angleBrackets == 0 && slashes == 0) {
                        return i;
                    }
                }
            }

        }

        return -1;
    }

    private String flatten(final int from, final int to) {
        if (from <= to) {
            final StringBuffer result = new StringBuffer();
            for (int i = from; i <= to; i++) {
                result.append(tokenArray[i]);
            }

            return result.toString();
        }

        return "";
    }

