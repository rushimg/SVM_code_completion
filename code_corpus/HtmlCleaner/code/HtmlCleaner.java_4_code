    private class OpenTags {
        private List<TagPos> list = new ArrayList<TagPos>();
        private TagPos last = null;
        private Set<String> set = new HashSet<String>();

        private void addTag(String tagName, int position) {
            last = new TagPos(position, tagName);
            list.add(last);
            set.add(tagName);
        }

        private TagPos findFirstTagPos() {
            return list.isEmpty() ? null : list.get(0);
        }

        private TagPos findTag(String tagName) {
            if (tagName != null) {
                final ListIterator<TagPos> it = list.listIterator(list.size());
                String fatalTag = null;
                final TagInfo fatalInfo = tagInfoProvider.getTagInfo(tagName);
                if (fatalInfo != null) {
                    fatalTag = fatalInfo.getFatalTag();
                }

                while (it.hasPrevious()) {
                    final TagPos currTagPos = it.previous();
                    if (tagName.equals(currTagPos.name)) {
                        return currTagPos;
                    } else if (fatalTag != null && fatalTag.equals(currTagPos.name)) {
                        // do not search past a fatal tag for this tag
                        return null;
                    }
                }
            }

            return null;
        }

        private TagPos findTagToPlaceRubbish() {
            TagPos result = null, prev = null;

            if (!isEmpty()) {
                final ListIterator<TagPos> it = list.listIterator(list.size());
                while (it.hasPrevious()) {
                    result = it.previous();
                    if (result.info == null || result.info.allowsAnything()) {
                        if (prev != null) {
                            return prev;
                        }
                    }
                    prev = result;
                }
            }

            return result;
        }

        private TagPos getLastTagPos() {
            return last;
        }

        private boolean isEmpty() {
            return list.isEmpty();
        }

        private void removeTag(final String tagName) {
            final ListIterator<TagPos> it = list.listIterator(list.size());
            while (it.hasPrevious()) {
                final TagPos currTagPos = it.previous();
                if (tagName.equals(currTagPos.name)) {
                    it.remove();
                    break;
                }
            }

            last = list.isEmpty() ? null : list.get(list.size() - 1);
        }

