    public HtmlTokenizer(final Reader reader, final CleanerProperties props,
            final CleanerTransformations transformations, final ITagInfoProvider tagInfoProvider) throws IOException {
        this.reader = new BufferedReader(reader);
        this.props = props;
        this.isOmitUnknownTags = props.isOmitUnknownTags();
        this.isTreatUnknownTagsAsContent = props.isTreatUnknownTagsAsContent();
        this.isOmitDeprecatedTags = props.isOmitDeprecatedTags();
        this.isTreatDeprecatedTagsAsContent = props.isTreatDeprecatedTagsAsContent();
        this.isNamespacesAware = props.isNamespacesAware();
        this.isOmitComments = props.isOmitComments();
        this.isAllowMultiWordAttributes = props.isAllowMultiWordAttributes();
        this.isAllowHtmlInsideAttributes = props.isAllowHtmlInsideAttributes();
        this.transformations = transformations;
        this.tagInfoProvider = tagInfoProvider;
    }

    private boolean addSavedAsContent() {
        if (savedLen > 0) {
            addToken(new ContentNode(saved, savedLen));
            savedLen = 0;
            return true;
        }

        return false;
    }

    private void addToken(final BaseToken token) {
        tokenList.add(token);
        makeTree(tokenList);
    }

