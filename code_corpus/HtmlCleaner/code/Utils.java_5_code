    public static String rtrim(final String s) {
        if (s == null) {
            return null;
        }

        final int len = s.length();
        int index = len;

        while (index > 0 && Character.isWhitespace(s.charAt(index - 1))) {
            index--;
        }

        return (index <= 0) ? "" : s.substring(0, index);
    }

    public static String getCharsetFromContentTypeString(final String contentType) {
        if (contentType != null) {
            final Matcher matcher = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE).matcher(contentType);
            if (matcher.find()) {
                final String charset = matcher.group(1);
                if (Charset.isSupported(charset)) {
                    return charset;
                }
            }
        }

        return null;
    }

    public static String getCharsetFromContent(final URL url) throws IOException {
        final InputStream stream = url.openStream();
        final byte chunk[] = new byte[2048];
        final int bytesRead = stream.read(chunk);
        if (bytesRead > 0) {
            final String startContent = new String(chunk);
            final Matcher matcher = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE).matcher(startContent);
            if (matcher.find()) {
                final String charset = matcher.group(1);
                if (Charset.isSupported(charset)) {
                    return charset;
                }
            }
        }

        return null;
    }

    public static boolean isHexadecimalDigit(final char ch) {
        return Character.isDigit(ch) || ch == 'A' || ch == 'a' || ch == 'B' || ch == 'b' || ch == 'C' || ch == 'c'
                || ch == 'D' || ch == 'd' || ch == 'E' || ch == 'e' || ch == 'F' || ch == 'f';
    }

    public static boolean isValidXmlChar(final char ch) {
        return ((ch >= 0x20) && (ch <= 0xD7FF)) || (ch == 0x9) || (ch == 0xA) || (ch == 0xD)
                || ((ch >= 0xE000) && (ch <= 0xFFFD)) || ((ch >= 0x10000) && (ch <= 0x10FFFF));
    }

    public static boolean isReservedXmlChar(final char ch) {
        return (ch < RESERVED_XML_CHARS_SIZE && RESERVED_XML_CHARS[ch] != null);
    }

    public static boolean isValidInt(final String s, final int radix) {
        try {
            Integer.parseInt(s, radix);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

