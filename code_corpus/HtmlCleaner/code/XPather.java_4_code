    public XPather(final String expression) {
        final StringTokenizer tokenizer = new StringTokenizer(expression, "/()[]\"'=<>", true);
        final int tokenCount = tokenizer.countTokens();
        tokenArray = new String[tokenCount];

        int index = 0;

        // this is not real XPath compiler, rather simple way to recognize basic
        // XPaths expressions
        // and interpret them against some TagNode instance.
        while (tokenizer.hasMoreTokens()) {
            tokenArray[index++] = tokenizer.nextToken();
        }
    }

    private Collection evaluateAgainst(final Collection object, int from, final int to, final boolean isRecursive,
            final int position, final int last, final boolean isFilterContext, final Collection filterSource)
            throws XPatherException {
        if (from >= 0 && to < tokenArray.length && from <= to) {
            if (tokenArray[from].trim().length() == 0) {
                return evaluateAgainst(object, from + 1, to, isRecursive, position, last, isFilterContext, filterSource);
            } else if (isToken("(", from)) {
                final int closingBracket = findClosingIndex(from, to);
                if (closingBracket > 0) {
                    final Collection value = evaluateAgainst(object, from + 1, closingBracket - 1, false, position,
                            last, isFilterContext, filterSource);
                    return evaluateAgainst(value, closingBracket + 1, to, false, position, last, isFilterContext,
                            filterSource);
                } else {
                    throwStandardException();
                }
            } else if (isToken("[", from)) {
                final int closingBracket = findClosingIndex(from, to);
                if (closingBracket > 0) {
                    final Collection value = filterByCondition(object, from + 1, closingBracket - 1);
                    return evaluateAgainst(value, closingBracket + 1, to, false, position, last, isFilterContext,
                            filterSource);
                } else {
                    throwStandardException();
                }
            } else if (isToken("\"", from) || isToken("'", from)) {
                // string constant
                final int closingQuote = findClosingIndex(from, to);
                if (closingQuote > from) {
                    final Collection value = singleton(flatten(from + 1, closingQuote - 1));
                    return evaluateAgainst(value, closingQuote + 1, to, false, position, last, isFilterContext,
                            filterSource);
                } else {
                    throwStandardException();
                }
            } else if ((isToken("=", from) || isToken("<", from) || isToken(">", from)) && isFilterContext) {
                // operator inside filter
                final boolean logicValue;
                if (isToken("=", from + 1) && (isToken("<", from) || isToken(">", from))) {
                    final Collection secondObject = evaluateAgainst(filterSource, from + 2, to, false, position, last,
                            isFilterContext, filterSource);
                    logicValue = evaluateLogic(object, secondObject, tokenArray[from] + tokenArray[from + 1]);
                } else {
                    final Collection secondObject = evaluateAgainst(filterSource, from + 1, to, false, position, last,
                            isFilterContext, filterSource);
                    logicValue = evaluateLogic(object, secondObject, tokenArray[from]);
                }
                return singleton(Boolean.valueOf(logicValue));
            } else if (isToken("/", from)) { // children of the node
                final boolean goRecursive = isToken("/", from + 1);
                if (goRecursive) {
                    from++;
                }
                if (from < to) {
                    int toIndex = findClosingIndex(from, to) - 1;
                    if (toIndex <= from) {
                        toIndex = to;
                    }
                    final Collection value = evaluateAgainst(object, from + 1, toIndex, goRecursive, 1, last,
                            isFilterContext, filterSource);
                    return evaluateAgainst(value, toIndex + 1, to, false, 1, last, isFilterContext, filterSource);
                } else {
                    throwStandardException();
                }
            } else if (isFunctionCall(from, to)) {
                final int closingBracketIndex = findClosingIndex(from + 1, to);
                final Collection funcValue = evaluateFunction(object, from, to, position, last, isFilterContext);
                return evaluateAgainst(funcValue, closingBracketIndex + 1, to, false, 1, last, isFilterContext,
                        filterSource);
            } else if (isValidInteger(tokenArray[from])) {
                final Collection value = singleton(Integer.valueOf(tokenArray[from]));
                return evaluateAgainst(value, from + 1, to, false, position, last, isFilterContext, filterSource);
            } else if (isValidDouble(tokenArray[from])) {
                final Collection value = singleton(new Double(tokenArray[from]));
                return evaluateAgainst(value, from + 1, to, false, position, last, isFilterContext, filterSource);
            } else {
                return getElementsByName(object, from, to, isRecursive, isFilterContext);
            }
        } else {
            return object;
        }

        throw new XPatherException();
    }

