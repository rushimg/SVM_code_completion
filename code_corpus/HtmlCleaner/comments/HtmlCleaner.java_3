/**
 * Main HtmlCleaner class.
 * 
 * <p>
 * It represents public interface to the user. It's task is to call tokenizer
 * with specified source HTML, traverse list of produced token list and create
 * internal object model. It also offers a set of methods to write resulting XML
 * to string, file or any output stream.
 * </p>
 * <p>
 * Typical usage is the following:
 * </p>
 * 
 * <xmp> // create an instance of HtmlCleaner HtmlCleaner cleaner = new
 * HtmlCleaner();
 * 
 * // take default cleaner properties CleanerProperties props =
 * cleaner.getProperties();
 * 
 * // customize cleaner's behaviour with property setters props.setXXX(...);
 * 
 * // Clean HTML taken from simple string, file, URL, input stream, // input
 * source or reader. Result is root node of created // tree-like structure.
 * Single cleaner instance may be safely used // multiple times. TagNode node =
 * cleaner.clean(...);
 * 
 * // optionally find parts of the DOM or modify some nodes TagNode[] myNodes =
 * node.getElementsByXXX(...); // and/or Object[] myNodes =
 * node.evaluateXPath(xPathExpression); // and/or aNode.removeFromTree(); //
 * and/or aNode.addAttribute(attName, attValue); // and/or
 * aNode.removeAttribute(attName, attValue); // and/or
 * cleaner.setInnerHtml(aNode, htmlContent); // and/or do some other tree
 * manipulation/traversal
 * 
 * // serialize a node to a file, output stream, DOM, JDom... new
 * XXXSerializer(props).writeXmlXXX(aNode, ...); myJDom = new
 * JDomSerializer(props, true).createJDom(aNode); myDom = new
 * DomSerializer(props, true).createDOM(aNode); </xmp>
 */
