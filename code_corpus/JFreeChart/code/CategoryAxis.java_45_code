    public List refreshTicks(Graphics2D g2,
                             AxisState state,
                             Rectangle2D dataArea,
                             RectangleEdge edge) {

        List ticks = new java.util.ArrayList();

        // sanity check for data area...
        if (dataArea.getHeight() <= 0.0 || dataArea.getWidth() < 0.0) {
            return ticks;
        }

        CategoryPlot plot = (CategoryPlot) getPlot();
        List categories = plot.getCategoriesForAxis(this);
        double max = 0.0;

        if (categories != null) {
            CategoryLabelPosition position
                    = this.categoryLabelPositions.getLabelPosition(edge);
            float r = this.maximumCategoryLabelWidthRatio;
            if (r <= 0.0) {
                r = position.getWidthRatio();
            }

            float l = 0.0f;
            if (position.getWidthType() == CategoryLabelWidthType.CATEGORY) {
                l = (float) calculateCategorySize(categories.size(), dataArea,
                        edge);
            }
            else {
                if (RectangleEdge.isLeftOrRight(edge)) {
                    l = (float) dataArea.getWidth();
                }
                else {
                    l = (float) dataArea.getHeight();
                }
            }
            int categoryIndex = 0;
            Iterator iterator = categories.iterator();
            while (iterator.hasNext()) {
                Comparable category = (Comparable) iterator.next();
                if (getTickLabelImage(category) != null) {
                	Image image = getTickLabelImage(category);
                	max = Math.max(image.getWidth(null), image.getHeight(null));
                	Tick tick = new CategoryImageTick(category, image,
                			position.getRotationAnchor(), position.getAngle());
                	ticks.add(tick);
                } else {
	                g2.setFont(getTickLabelFont(category));
	                if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {
	                    max = Math.max(max, calculateTextBlockHeight(label,
	                            position, g2));
	                }
	                else if (edge == RectangleEdge.LEFT
	                        || edge == RectangleEdge.RIGHT) {
	                    max = Math.max(max, calculateTextBlockWidth(label,
	                            position, g2));
	                }
	                Tick tick = new CategoryTextTick(category, label,
	                        position.getLabelAnchor(),
	                        position.getRotationAnchor(), position.getAngle());
	                ticks.add(tick);
                }

                categoryIndex = categoryIndex + 1;
            }
        }
        state.setMax(max);
        return ticks;

    }

