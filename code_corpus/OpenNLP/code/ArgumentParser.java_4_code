  public static <T> String createUsage(Class<T>... argProxyInterfaces) {
    checkProxyInterfaces(argProxyInterfaces);

    Set<String> duplicateFilter = new HashSet<String>();

    StringBuilder usage = new StringBuilder();
    StringBuilder details = new StringBuilder();
    for (Class<T> argProxyInterface : argProxyInterfaces) {
      if (null != argProxyInterface) {
        for (Method method : argProxyInterface.getMethods()) {

          ParameterDescription desc = method.getAnnotation(ParameterDescription.class);

          OptionalParameter optional = method.getAnnotation(OptionalParameter.class);

          if (desc != null) {
            String paramName = methodNameToParameter(method.getName());

            if (duplicateFilter.contains(paramName)) {
              continue;
            }
            else {
              duplicateFilter.add(paramName);
            }

            if (optional != null)
              usage.append('[');

            usage.append(paramName).append(' ').append(desc.valueName());
            details.append('\t').append(paramName).append(' ').append(desc.valueName()).append('\n');
            if(desc.description() != null && desc.description().length() > 0) {
              details.append("\t\t").append(desc.description()).append('\n');
            }

            if (optional != null)
              usage.append(']');

            usage.append(' ');
          }
        }
      }
    }

    if (usage.length() > 0)
      usage.setLength(usage.length() - 1);

    if (details.length() > 0) {
      details.setLength(details.length() - 1);
      usage.append("\n\nArguments description:\n").append(details.toString());
    }

    return usage.toString();
  }

