  @SuppressWarnings("unchecked")
  public static <T> T parse(String args[], Class<T> argProxyInterface) {

    checkProxyInterfaces(argProxyInterface);

    if (!validateArguments(args, argProxyInterface))
      throw new IllegalArgumentException("Passed args must be valid!");

    Map<String, Object> arguments = new HashMap<String, Object>();

    for (Method method : argProxyInterface.getMethods()) {

      String parameterName = methodNameToParameter(method.getName());
      String valueString = CmdLineUtil.getParameter(parameterName, args);

      if (valueString == null) {
        OptionalParameter optionalParam = method.getAnnotation(OptionalParameter.class);

        if (optionalParam.defaultValue().length() > 0)
          valueString = optionalParam.defaultValue();
        else
          valueString = null;
      }

      Class<?> returnType = method.getReturnType();

      Object value;

      if (valueString != null) {
        ArgumentFactory factory = argumentFactories.get(returnType);

        if (factory == null)
          throw new IllegalStateException("factory for '" + returnType + "' must not be null");

        value = factory.parseArgument(method, parameterName, valueString);
      }
      else
        value = null;

      arguments.put(method.getName(), value);
    }

    return (T) java.lang.reflect.Proxy.newProxyInstance(
        argProxyInterface.getClassLoader(),
        new Class[]{argProxyInterface},
        new ArgumentProxy(arguments));
  }

