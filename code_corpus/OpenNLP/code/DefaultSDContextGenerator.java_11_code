    String next;

    int lastIndex = sb.length() - 1;
    { // compute space previous and space next features.
      if (position > 0 && StringUtil.isWhitespace(sb.charAt(position - 1)))
        collectFeats.add("sp");
      if (position < lastIndex && StringUtil.isWhitespace(sb.charAt(position + 1)))
        collectFeats.add("sn");
      collectFeats.add("eos=" + escapeChar(sb.charAt(position)));
    }
    int prefixStart = previousSpaceIndex(sb, position);

    int c = position;
    { ///assign prefix, stop if you run into a period though otherwise stop at space
      while (--c > prefixStart) {
        for (int eci = 0, ecl = eosCharacters.length; eci < ecl; eci++) {
          if (sb.charAt(c) == eosCharacters[eci]) {
            prefixStart = c;
            c++; // this gets us out of while loop.
            break;
          }
        }
      }
      prefix = new StringBuffer(sb.subSequence(prefixStart, position)).toString().trim();
    }
    int prevStart = previousSpaceIndex(sb, prefixStart);
    previous = new StringBuffer(sb.subSequence(prevStart, prefixStart)).toString().trim();

    int suffixEnd = nextSpaceIndex(sb, position, lastIndex);
    {
      c = position;
      while (++c < suffixEnd) {
        for (int eci = 0, ecl = eosCharacters.length; eci < ecl; eci++) {
          if (sb.charAt(c) == eosCharacters[eci]) {
            suffixEnd = c;
            c--; // this gets us out of while loop.
            break;
          }
        }
      }
    }
    int nextEnd = nextSpaceIndex(sb, suffixEnd + 1, lastIndex + 1);
    if (position == lastIndex) {
      suffix = "";
      next = "";
    }
    else {
      suffix = new StringBuilder(sb.subSequence(position + 1, suffixEnd)).toString().trim();
      next = new StringBuilder(sb.subSequence(suffixEnd + 1, nextEnd)).toString().trim();
    }

    collectFeatures(prefix,suffix,previous,next, sb.charAt(position));

    String[] context = new String[collectFeats.size()];
    context = collectFeats.toArray(context);
    collectFeats.clear();
    return context;
  }

