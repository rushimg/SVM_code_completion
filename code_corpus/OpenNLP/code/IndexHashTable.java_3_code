  public IndexHashTable(T mapping[], double loadfactor) {
    if (loadfactor <= 0 || loadfactor > 1) {
      throw new IllegalArgumentException("loadfactor must be larger than 0 "
          + "and equal to or smaller than 1 but is " + loadfactor + "!");
    }

    int arraySize = (int) (mapping.length / loadfactor) + 1;

    keys = new Object[arraySize];
    values = new int[arraySize];

    size = mapping.length;

    for (int i = 0; i < mapping.length; i++) {
      int startIndex = indexForHash(mapping[i].hashCode(), keys.length);

      int index = searchKey(startIndex, null, true);

      if (index == -1)
        throw new IllegalArgumentException(
            "Array must contain only unique keys!");

      keys[index] = mapping[i];
      values[index] = i;
    }
  }

  private static int indexForHash(int h, int length) {
    return (h & 0x7fffffff) % length;
  }

  private int searchKey(int startIndex, Object key, boolean insert) {

    for (int index = startIndex; true; index = (index + 1) % keys.length) {

      // The keys array contains at least one null element, which guarantees
      // termination of the loop
      if (keys[index] == null) {
        if (insert)
          return index;
        else
          return -1;
      }

      if (keys[index].equals(key)) {
        if (!insert)
          return index;
        else
          return -1;
      }
    }
  }

