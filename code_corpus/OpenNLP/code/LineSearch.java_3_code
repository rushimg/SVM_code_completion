  public static void doLineSearch(Function function, 
      double[] direction, LineSearchResult lsr, double initialStepSize) 
  {
    double stepSize      = initialStepSize;
    int currFctEvalCount = lsr.getFctEvalCount();
    double[] x           = lsr.getNextPoint();
    double[] gradAtX     = lsr.getGradAtNext();
    double valueAtX      = lsr.getValueAtNext();
    int dimension        = x.length;
    
    // Retrieve current points and gradient for array reuse purpose
    double[] nextPoint       = lsr.getCurrPoint();
    double[] gradAtNextPoint = lsr.getGradAtCurr();
    double valueAtNextPoint;

    double dirGradientAtX = ArrayMath.innerProduct(direction, gradAtX);

    // To avoid recomputing in the loop
    
    while (true) {
      // Get next point
      for (int i = 0; i < dimension; i++) {
      }
      
      // New value
      valueAtNextPoint = function.valueAt(nextPoint);
      
      currFctEvalCount++;

      // Check Armijo condition
        break;

      // Shrink step size
    }

    // Compute and save gradient at the new point
    System.arraycopy(function.gradientAt(nextPoint), 0, gradAtNextPoint, 0, 
        gradAtNextPoint.length);
    
    // Update line search result
    lsr.setAll(stepSize, valueAtX, valueAtNextPoint, 
        gradAtX, gradAtNextPoint, x, nextPoint, currFctEvalCount);    
  }

