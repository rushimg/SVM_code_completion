  @Deprecated
  public static TokenNameFinderModel train(String languageCode, String type, ObjectStream<NameSample> samples,
          TrainingParameters trainParams, AdaptiveFeatureGenerator generator, final Map<String, Object> resources)
          throws IOException {

    if (languageCode == null) {
      throw new IllegalArgumentException("languageCode must not be null!");
    }

    String beamSizeString = trainParams.getSettings().get(BeamSearch.BEAM_SIZE_PARAMETER);

    int beamSize = NameFinderME.DEFAULT_BEAM_SIZE;
    if (beamSizeString != null) {
      beamSize = Integer.parseInt(beamSizeString);
    }

    Map<String, String> manifestInfoEntries = new HashMap<String, String>();

    AdaptiveFeatureGenerator featureGenerator;

    if (generator != null) {
      featureGenerator = generator;
    } else {
      featureGenerator = createFeatureGenerator();
    }

    MaxentModel nameFinderModel = null;

    SequenceClassificationModel<String> seqModel = null;

    TrainerType trainerType = TrainerFactory.getTrainerType(trainParams.getSettings());

    if (TrainerType.EVENT_MODEL_TRAINER.equals(trainerType)) {
      ObjectStream<Event> eventStream = new NameFinderEventStream(samples, type,
              new DefaultNameContextGenerator(featureGenerator), new BioCodec());

      EventTrainer trainer = TrainerFactory.getEventTrainer(trainParams.getSettings(), manifestInfoEntries);
      nameFinderModel = trainer.train(eventStream);
    } else if (TrainerType.EVENT_MODEL_SEQUENCE_TRAINER.equals(trainerType)) {
      NameSampleSequenceStream ss = new NameSampleSequenceStream(samples, featureGenerator);

      EventModelSequenceTrainer trainer = TrainerFactory.getEventModelSequenceTrainer(
              trainParams.getSettings(), manifestInfoEntries);
      nameFinderModel = trainer.train(ss);
    } else if (TrainerType.SEQUENCE_TRAINER.equals(trainerType)) {
      SequenceTrainer trainer = TrainerFactory.getSequenceModelTrainer(
              trainParams.getSettings(), manifestInfoEntries);

      NameSampleSequenceStream ss = new NameSampleSequenceStream(samples, featureGenerator, false);
      seqModel = trainer.train(ss);
    } else {
      throw new IllegalStateException("Unexpected trainer type!");
    }

     // TODO: Pass the sequence codec down to the model! We will just store the class
    // name in the model, and then always use the extension loader to create it!
    // The cmd line interface, will replace shortcuts with actual class names.
    // depending on which one is not null!
    if (seqModel != null) {
      return new TokenNameFinderModel(languageCode, seqModel, null,
              resources, manifestInfoEntries, new BioCodec());
    } else {
      return new TokenNameFinderModel(languageCode, nameFinderModel, beamSize, null,
              resources, manifestInfoEntries, new BioCodec());
    }
  }

