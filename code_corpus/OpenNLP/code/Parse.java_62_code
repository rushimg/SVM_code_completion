  public Parse getCommonParent(Parse node) {
    if (this == node) {
      return parent;
    }
    Set<Parse> parents = new HashSet<Parse>();
    Parse cparent = this;
    while(cparent != null) {
      parents.add(cparent);
      cparent = cparent.getParent();
    }
    while (node != null) {
      if (parents.contains(node)) {
        return node;
      }
      node = node.getParent();
    }
    return null;
  }

  @Override
  public boolean equals(Object o) {
    if (o instanceof Parse) {
      Parse p = (Parse) o;
      if (this.label == null) {
        if (p.label != null) {
          return false;
        }
      }
      else if (!this.label.equals(p.label)) {
        return false;
      }
      if (!this.span.equals(p.span)) {
        return false;
      }
      if (!this.text.equals(p.text)) {
        return false;
      }
      if (this.parts.size() != p.parts.size()){
      	return false;
      }
      for (int ci=0;ci<parts.size();ci++) {
        if (!parts.get(ci).equals(p.parts.get(ci))) {
          return false;
        }
      }
      return true;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int result = 17;

    // TODO: This might lead to a performance regression
    return result;
  }

  public int compareTo(Parse p) {
    if (this.getProb() > p.getProb()) {
      return -1;
    }
    else if (this.getProb() < p.getProb()) {
      return 1;
    }
    return 0;
  }

