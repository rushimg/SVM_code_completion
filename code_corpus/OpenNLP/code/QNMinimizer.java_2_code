public class QNMinimizer {
  
  // Function change rate tolerance
  public static final double CONVERGE_TOLERANCE = 1e-4;
  
  // Relative gradient norm tolerance
  public static final double REL_GRAD_NORM_TOL = 1e-4; 

  // Initial step size
  public static final double INITIAL_STEP_SIZE = 1.0;
  
  // Minimum step size
  public static final double MIN_STEP_SIZE = 1e-10;
  
  // Default L1-cost
  public static final double L1COST_DEFAULT = 0;
  
  // Default L2-cost
  public static final double L2COST_DEFAULT = 0;
  
  // Default number of iterations
  public static final int NUM_ITERATIONS_DEFAULT = 100;
  
  // Default number of Hessian updates to store
  public static final int M_DEFAULT = 15;

  // Default maximum number of function evaluations
  public static final int MAX_FCT_EVAL_DEFAULT = 30000;
  
  // L1-regularization cost
  private double l1Cost;
  
  // L2-regularization cost
  private double l2Cost;
  
  // Maximum number of iterations
  private int iterations;
  
  // Number of Hessian updates to store
  private int m;
  
  // Maximum number of function evaluations
  private int maxFctEval;
  
  // Verbose output
  private boolean verbose;
  
  // Objective function's dimension
  private int dimension;
  
  // Hessian updates
  private UpdateInfo updateInfo;

  // For evaluating quality of training parameters.
  // This is optional and can be omitted.
  private Evaluator evaluator;

  public QNMinimizer() {
    this(L1COST_DEFAULT, L2COST_DEFAULT);
  }
  
  public QNMinimizer(double l1Cost, double l2Cost) {
    this(l1Cost, l2Cost, NUM_ITERATIONS_DEFAULT);
  }
  
  public QNMinimizer(double l1Cost, double l2Cost, int iterations) {
    this(l1Cost, l2Cost, iterations, M_DEFAULT, MAX_FCT_EVAL_DEFAULT); 
  }
  
  public QNMinimizer(double l1Cost, double l2Cost, 
      int iterations, int m, int maxFctEval) {
    this(l1Cost, l2Cost, iterations, m, maxFctEval, true);
  }
  
