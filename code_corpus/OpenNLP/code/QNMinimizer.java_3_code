  public QNMinimizer(double l1Cost, double l2Cost, int iterations,
      int m, int maxFctEval, boolean verbose) 
  {
    // Check arguments
    if (l1Cost < 0 || l2Cost < 0) 
      throw new IllegalArgumentException(
          "L1-cost and L2-cost must not be less than zero");
      
    if (iterations <= 0)
      throw new IllegalArgumentException(
          "Number of iterations must be larger than zero");
    
    if (m <= 0)
      throw new IllegalArgumentException(
          "Number of Hessian updates must be larger than zero");
    
    if (maxFctEval <= 0)
      throw new IllegalArgumentException(
          "Maximum number of function evaluations must be larger than zero");
    
    this.l1Cost     = l1Cost;
    this.l2Cost     = l2Cost;
    this.iterations = iterations;
    this.m          = m;
    this.maxFctEval = maxFctEval;
    this.verbose    = verbose;
  }

  public Evaluator getEvaluator() {
    return evaluator;
  }
  public void setEvaluator(Evaluator evaluator) {
    this.evaluator = evaluator;
  }

