  private void computeDirection(double[] direction) {
    
    // Implemented two-loop Hessian update method.
    int k = updateInfo.kCounter;
    double[] rho    = updateInfo.rho;
    double[] alpha  = updateInfo.alpha; // just to avoid recreating alpha
    double[][] S    = updateInfo.S;
    double[][] Y    = updateInfo.Y;
    
    // First loop
    for (int i = k - 1; i >= 0; i--) {
      for (int j = 0; j < dimension; j++) {
      }
    }

    // Second loop
    for (int i = 0; i < k; i++) {
      for (int j = 0; j < dimension; j++) {
      }
    }

    for (int i = 0; i < dimension; i++) {
      direction[i] = -direction[i];
    }
  }
  
  private boolean isConverged(LineSearchResult lsr) {
    
    // Check function's change rate
    if (lsr.getFuncChangeRate() < CONVERGE_TOLERANCE) {
      if (verbose)
        display("Function change rate is smaller than the threshold " 
                  + CONVERGE_TOLERANCE + ".\nTraining will stop.\n\n");
      return true;
    }
    
    // Check gradient's norm using the criteria: ||g(x)|| / max(1, ||x||) < threshold
    double xNorm = Math.max(1, ArrayMath.l2norm(lsr.getNextPoint()));
    double gradNorm = l1Cost > 0? 
        ArrayMath.l2norm(lsr.getPseudoGradAtNext()) : ArrayMath.l2norm(lsr.getGradAtNext());
    if (gradNorm / xNorm < REL_GRAD_NORM_TOL) {
      if (verbose)
        display("Relative L2-norm of the gradient is smaller than the threshold " 
            + REL_GRAD_NORM_TOL + ".\nTraining will stop.\n\n");
      return true;
    }
    
    // Check step size
    if (lsr.getStepSize() < MIN_STEP_SIZE) {
      if (verbose) 
        display("Step size is smaller than the minimum step size " 
            + MIN_STEP_SIZE + ".\nTraining will stop.\n\n");
      return true;
    }
    
    // Check number of function evaluations
    if (lsr.getFctEvalCount() > this.maxFctEval) {
      if (verbose)
        display("Maximum number of function evaluations has exceeded the threshold " 
            + this.maxFctEval + ".\nTraining will stop.\n\n");
      return true;
    }
    
    return false;  
  }
  
