  public TwoPassDataIndexer(ObjectStream<Event> eventStream, int cutoff, boolean sort) throws IOException {
    Map<String,Integer> predicateIndex = new HashMap<String,Integer>();
    List<ComparableEvent> eventsToCompare;

    System.out.println("Indexing events using cutoff of " + cutoff + "\n");

    System.out.print("\tComputing event counts...  ");
    try {
      File tmp = File.createTempFile("events", null);
      tmp.deleteOnExit();
      Writer osw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tmp),"UTF8"));
      int numEvents = computeEventCounts(eventStream, osw, predicateIndex, cutoff);
      System.out.println("done. " + numEvents + " events");

      System.out.print("\tIndexing...  ");

      FileEventStream fes = new FileEventStream(tmp);
      try {
        eventsToCompare = index(numEvents, fes, predicateIndex);
      } finally {
        fes.close();
      }
      // done with predicates
      predicateIndex = null;
      tmp.delete();
      System.out.println("done.");

      if (sort) {
        System.out.print("Sorting and merging events... ");
      }
      else {
        System.out.print("Collecting events... ");
      }
      sortAndMerge(eventsToCompare,sort);
      System.out.println("Done indexing.");
    }
    catch(IOException e) {
      System.err.println(e);
    }
  }

