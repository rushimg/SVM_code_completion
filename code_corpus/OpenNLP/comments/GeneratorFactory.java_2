/**
 * Creates a set of feature generators based on a provided XML descriptor.
 *
 * Example of an XML descriptor:
 *<p>
 * &lt;generators&gt;
 *   &lt;charngram min = "2" max = "5"/&gt;
 *   &lt;definition/&gt;
 *   &lt;cache&gt;
 *     &lt;window prevLength = "3" nextLength = "3"&gt;
 *       &lt;generators&gt;
 *         &lt;prevmap/&gt;
 *         &lt;sentence/&gt;
 *         &lt;tokenclass/&gt;
 *         &lt;tokenpattern/&gt;
 *       &lt;/generators&gt;
 *     &lt;/window&gt;
 *   &lt;/cache&gt;
 * &lt;/generators&gt;
 * </p>
 *
 * Each XML element is mapped to a {@link GeneratorFactory.XmlFeatureGeneratorFactory} which
 * is responsible to process the element and create the specified
 * {@link AdaptiveFeatureGenerator}. Elements can contain other
 * elements in this case it is the responsibility of the mapped factory to process
 * the child elements correctly. In some factories this leads to recursive
 * calls the
 * {@link GeneratorFactory.XmlFeatureGeneratorFactory#create(Element, FeatureGeneratorResourceProvider)}
 * method.
 *
 * In the example above the generators element is mapped to the
 * {@link GeneratorFactory.AggregatedFeatureGeneratorFactory} which then
 * creates all the aggregated {@link AdaptiveFeatureGenerator}s to
 * accomplish this it evaluates the mapping with the same mechanism
 * and gives the child element to the corresponding factories. All
 * created generators are added to a new instance of the
 * {@link AggregatedFeatureGenerator} which is then returned.
 */
