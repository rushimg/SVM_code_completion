  public boolean countResults(List<IN> doc,
                              Counter<String> entityTP,
                              Counter<String> entityFP,
                              Counter<String> entityFN) {
    String bg = (flags.evaluateBackground ? null : flags.backgroundSymbol);
    if (flags.entitySubclassification.equalsIgnoreCase("iob2")) {
      bg = flags.backgroundSymbol;
      return countResultsIOB2(doc, entityTP, entityFP, entityFN, bg);
    } else if (flags.iobTags) {
      bg = flags.backgroundSymbol;
      return countResultsIOB(doc, entityTP, entityFP, entityFN, bg);
    } else {
      return countResults(doc, entityTP, entityFP, entityFN, bg);
    }
  }

  public static boolean countResultsIOB2(List<? extends CoreMap> doc,
                                         Counter<String> entityTP,
                                         Counter<String> entityFP,
                                         Counter<String> entityFN,
                                         String background) {
    boolean entityCorrect = true;
    // the annotations
    String previousGold = background;
    String previousGuess = background;
    // the part after the I- or B- in the annotation
    String previousGoldEntity = "";
    String previousGuessEntity = "";

    for (CoreMap word : doc) {
      String gold = word.get(CoreAnnotations.GoldAnswerAnnotation.class);
      String guess = word.get(CoreAnnotations.AnswerAnnotation.class);
      String goldEntity = (!gold.equals(background)) ? gold.substring(2) : "";
      String guessEntity = (!guess.equals(background)) ? guess.substring(2) : "";

      //System.out.println(gold + " (" + goldEntity + ") ; " + guess + " (" + guessEntity + ")");

      boolean newGold = (!gold.equals(background) &&
                         (!goldEntity.equals(previousGoldEntity)) || gold.startsWith("B-"));
      boolean newGuess = (!guess.equals(background) &&
                          (!guessEntity.equals(previousGuessEntity)) || guess.startsWith("B-"));
      boolean goldEnded = (!previousGold.equals(background) &&
                           (gold.startsWith("B-") || !goldEntity.equals(previousGoldEntity)));
      boolean guessEnded = (!previousGuess.equals(background) &&
                            (guess.startsWith("B-") || !guessEntity.equals(previousGuessEntity)));

      //System.out.println("  " + newGold + " " + newGuess + " " + goldEnded + " " + guessEnded);

      if (goldEnded && !guessEnded) {
        entityFN.incrementCount(previousGoldEntity, 1.0);
        entityCorrect = gold.equals(background) && guess.equals(background);
      }
      if (goldEnded && guessEnded) {
        if (entityCorrect) {
          entityTP.incrementCount(previousGoldEntity, 1.0);
        } else {
          entityFN.incrementCount(previousGoldEntity, 1.0);
          entityFP.incrementCount(previousGuessEntity, 1.0);
        }
        entityCorrect = gold.equals(guess);
      }
      if (!goldEnded && guessEnded) {
        entityCorrect = false;
        entityFP.incrementCount(previousGuessEntity, 1.0);
      }
      // nothing to do if neither gold nor guess have ended

      if (newGold && !newGuess) {
        entityCorrect = false;
      }
      if (newGold && newGuess) {
        entityCorrect = guessEntity.equals(goldEntity);
      }
      if (!newGold && newGuess) {
        entityCorrect = false;
      }

      previousGold = gold;
      previousGuess = guess;
      previousGoldEntity = goldEntity;
      previousGuessEntity = guessEntity;
    }

    // At the end, we need to check the last entity
    if (!previousGold.equals(background)) {
      if (entityCorrect) {
        entityTP.incrementCount(previousGoldEntity, 1.0);
      } else {
        entityFN.incrementCount(previousGoldEntity, 1.0);
      }
    }
    if (!previousGuess.equals(background)) {
      if (!entityCorrect) {
        entityFP.incrementCount(previousGuessEntity, 1.0);
      }
    }

    return true;
  }

  public static boolean countResultsIOB(List<? extends CoreMap> doc,
                                        Counter<String> entityTP,
                                        Counter<String> entityFP,
                                        Counter<String> entityFN,
                                        String background) {
    // first, check that all answers exist and are either O, B-, or I-
    for (CoreMap line : doc) {
      String gold = line.get(CoreAnnotations.GoldAnswerAnnotation.class);
      String guess = line.get(CoreAnnotations.AnswerAnnotation.class);

      if (gold == null) {
        System.err.println("Blank gold answer");
        return false;
      }
      if (guess == null) {
        System.err.println("Blank guess");
        return false;
      }
      if (!gold.equals(background) && !gold.startsWith("B-") &&
          !gold.startsWith("I-")) {
        System.err.println("Unexpected gold answer " + gold);
        return false;
      }
      if (!guess.equals(background) && !guess.startsWith("B-") &&
          !guess.startsWith("I-")) {
        System.err.println("Unexpected guess " + guess);
        return false;
      }
      // todo: verify that gold entities are in a good pattern
    }

    // We count entities in three categories.  When we have an entity
    // in the gold, it is a true positive if the start of the entity
    // is correctly guessed, all of the I- tags are correctly guessed,
    // and the next guess tag after the last gold I- tag is not the
    // same I- tag.  Otherwise, it is a false negative.  We then apply
    // the same logic to the guesses, counting false positives for
    // anything that did not correctly match the gold.
    int index = 0;
    while (index < doc.size()) {
      index = tallyOneEntityIOB(doc, index,
                                CoreAnnotations.GoldAnswerAnnotation.class,
                                CoreAnnotations.AnswerAnnotation.class,
                                entityTP, entityFN, background);
    }
    index = 0;
    while (index < doc.size()) {
      index = tallyOneEntityIOB(doc, index,
                                CoreAnnotations.AnswerAnnotation.class,
                                CoreAnnotations.GoldAnswerAnnotation.class,
                                null, entityFP, background);
    }

    return true;
  }

  public static int tallyOneEntityIOB(List<? extends CoreMap> doc,
                                      int index,
                                      Class<? extends CoreAnnotation<String>> source,
                                      Class<? extends CoreAnnotation<String>> target,
                                      Counter<String> positive,
                                      Counter<String> negative,
                                      String background) {
    CoreMap line = doc.get(index);
    String gold = line.get(source);
    String guess = line.get(target);

    // uninteresting
    if (gold.equals(background)) {
      return index + 1;
    }
    String entity = gold.substring(2);
    boolean correct = gold.equals(guess);
    ++index;
    while (index < doc.size()) {
      line = doc.get(index);
      gold = line.get(source);
      guess = line.get(target);

      if (!gold.equals("I-" + entity)) {
        if (guess.equals("I-" + entity)) {
          correct = false;
        }
        break;
      }
      if (!gold.equals(guess)) {
        correct = false;
      }
      ++index;
    }
    if (correct) {
      if (positive != null) {
        positive.incrementCount(entity, 1.0);
      }
    } else {
      negative.incrementCount(entity, 1.0);
    }
    return index;
  }

