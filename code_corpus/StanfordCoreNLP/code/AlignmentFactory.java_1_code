public class AlignmentFactory {

  public static final byte SHIFT_LONG = 1;
  public static final byte SHIFT_SHORT = 2;
  public static final byte SHIFT_BOTH = 4;

  private char[] longForm;
  private char[] lcLongForm;
  private  char[] shortForm;
  private  char[] lcShortForm;
  private  int [][]alignMatrix;
  private byte [][]backMatrix;
  private Set<Alignment> alignments;

  public AlignmentFactory(String longForm, String shortForm) {
    this(longForm.toCharArray(), shortForm.toCharArray());
  }

  public static char[] toLower(char []in) {
    char[] out = new char[in.length];
    for(int i = 0; i < in.length; ++i) {
      out[i] = Character.toLowerCase(in[i]);
    }
    return out;
  }

  public AlignmentFactory(char[] longForm, char[] shortForm) {
    this.longForm = longForm;
    this.lcLongForm = toLower(longForm);
    this.shortForm = shortForm;
    this.lcShortForm = toLower(shortForm);

    alignMatrix = new int[lcLongForm.length][lcShortForm.length];
    backMatrix = new byte[lcLongForm.length][lcShortForm.length];
    for( int l = 0; l < lcLongForm.length; ++l) {
      for( int s = 0; s < lcShortForm.length; ++s) {
        int match = (lcLongForm[l] == lcShortForm[s]) ? 1 : 0;
        int froml = (l == 0) ? 0 : alignMatrix[l-1][s];
        int froms = (s == 0) ? 0 : alignMatrix[l][s-1];
        int frommatch =
                ((l==0 || s==0) ? 0 : alignMatrix[l-1][s-1]) + match;
        int max = Math.max(froml, Math.max(froms, frommatch));
        byte backp = 0;
        if( froml == max  ) backp |= SHIFT_LONG;
        if( froms == max  ) backp |= SHIFT_SHORT;
        if( match == 1 && frommatch == max ) backp |= SHIFT_BOTH;
        backMatrix[l][s] = backp;
        alignMatrix[l][s] = max;
      }
    }

    alignments = Generics.newHashSet();
    int[] pointers = new int[lcShortForm.length];
    Arrays.fill(pointers, -1);

    if( lcLongForm.length > 0 && lcShortForm.length > 0 ) {
      addCount = 0;
      //initListMatrix();
      findAlignments(pointers, lcLongForm.length-1, lcShortForm.length-1);
      //listMatrix = null;

    }
  }

  public Iterator<Alignment> getAlignments() {
    return alignments.iterator();
  }

  public ArrayList<Alignment> getAlignmentsList() {
    return new ArrayList<Alignment>(alignments);
  }

  public static String dumpIntArray(int []a) {
    StringBuilder buf = new StringBuilder();
    buf.append('[');
    for (int anA : a) {
      buf.append(anA).append(' ');
    }
    buf.append(']');
    return buf.toString();
  }

  int addCount;

