  public boolean register(String name, AnnotatorFactory factory) {
    boolean newAnnotator = false;
    if (this.factories.containsKey(name)) {
      AnnotatorFactory oldFactory = this.factories.get(name);
      String oldSig = oldFactory.signature();
      String newSig = factory.signature();
      if(! oldSig.equals(newSig)) {
        // the new annotator uses different properties so we need to update!
        // TODO: this printout should be logged instead of going to stderr. we need to standardize logging
        // System.err.println("Replacing old annotator \"" + name + "\" with signature ["
        //         + oldSig + "] with new annotator with signature [" + newSig + "]");
        this.factories.put(name, factory);
        newAnnotator = true;

        // delete the existing annotator; we'll create one with the new props on demand
        // removing the annotator like this will not affect any
        // existing pipelines which use the old annotator, but if
        // those are all gone, then the old annotator will be garbage
        // collected and memory will be freed up
        annotators.remove(name);
      }
      // nothing to do if an annotator with same name and signature already exists
    } else {
      this.factories.put(name, factory);
    }
    return newAnnotator;
  }

