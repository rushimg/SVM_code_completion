  private void heapifyDown(HeapEntry<E> entry) {
    // int size = size();

    HeapEntry<E> minEntry; // = null;

    do {
      minEntry = entry;

      HeapEntry<E> leftEntry = leftChild(entry);
      if (leftEntry != null) {
        if (compare(minEntry, leftEntry) > 0) {
          minEntry = leftEntry;
        }
      }

      HeapEntry<E> rightEntry = rightChild(entry);
      if (rightEntry != null) {
        if (compare(minEntry, rightEntry) > 0) {
          minEntry = rightEntry;
        }
      }

      if (minEntry != entry) {
        // Swap min and current
        swap(minEntry, entry);
        // at start of next loop, we set currentIndex to largestIndex
        // this indexation now holds current, so it is unchanged
      }
    } while (minEntry != entry);
    // System.err.println("Done with heapify down");
    // verify();
  }


