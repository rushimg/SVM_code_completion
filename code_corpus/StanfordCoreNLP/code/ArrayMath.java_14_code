  public static float[] pow(float[] a, float c) {
    float[] result = new float[a.length];
    for (int i = 0; i < a.length; i++) {
      result[i] = (float) Math.pow(a[i], c);
    }
    return result;
  }

  // OPERATIONS WITH TWO ARRAYS - DESTRUCTIVE

  public static void pairwiseAddInPlace(double[] to, double[] from) {
    if (to.length != from.length) {
      throw new RuntimeException("to length:" + to.length + " from length:" + from.length);
    }
    for (int i = 0; i < to.length; i++) {
      to[i] = to[i] + from[i];
    }
  }

  public static void pairwiseAddInPlace(double[] to, int[] from) {
    if (to.length != from.length) {
      throw new RuntimeException();
    }
    for (int i = 0; i < to.length; i++) {
      to[i] = to[i] + from[i];
    }
  }

  public static void pairwiseAddInPlace(double[] to, short[] from) {
    if (to.length != from.length) {
      throw new RuntimeException();
    }
    for (int i = 0; i < to.length; i++) {
      to[i] = to[i] + from[i];
    }
  }

  public static void pairwiseSubtractInPlace(double[] to, double[] from) {
    if (to.length != from.length) {
      throw new RuntimeException();
    }
    for (int i = 0; i < to.length; i++) {
      to[i] = to[i] - from[i];
    }
  }

  public static void pairwiseScaleAddInPlace(double[] to, double[] from, double fromScale) {
    if (to.length != from.length) {
      throw new RuntimeException();
    }
    for (int i = 0; i < to.length; i++) {
    }
  }

  // OPERATIONS WITH TWO ARRAYS - NONDESTRUCTIVE

  public static int[] pairwiseAdd(int[] a, int[] b) {
    int[] result = new int[a.length];
    for (int i = 0; i < a.length; i++) {
      result[i] = a[i] + b[i];
    }
    return result;
  }

  public static double[] pairwiseAdd(double[] a, double[] b) {
    double[] result = new double[a.length];
    for (int i = 0; i < a.length; i++) {
      if (i < b.length) {
        result[i] = a[i] + b[i];
      } else {
        result[i] = a[i];
      }
    }
    return result;
  }

  public static float[] pairwiseAdd(float[] a, float[] b) {
    float[] result = new float[a.length];
    for (int i = 0; i < a.length; i++) {
      result[i] = a[i] + b[i];
    }
    return result;
  }

  public static double[] pairwiseScaleAdd(double[] a, double[] b, double bScale) {
    double[] result = new double[a.length];
    for (int i = 0; i < a.length; i++) {
    }
    return result;
  }


  public static double[] pairwiseSubtract(double[] a, double[] b) {
    double[] c = new double[a.length];

    for (int i = 0; i < a.length; i++) {
      c[i] = a[i] - b[i];
    }
    return c;
  }

  public static float[] pairwiseSubtract(float[] a, float[] b) {
    float[] c = new float[a.length];

    for (int i = 0; i < a.length; i++) {
      c[i] = a[i] - b[i];
    }
    return c;
  }

