  public static void main(String[] args) {
    Random random = new Random();
    int length = 100;
    double[] A = new double[length];
    double[] B = new double[length];
    double aAvg = 70.0;
    double bAvg = 70.5;
    for (int i = 0; i < length; i++) {
      A[i] = aAvg + random.nextGaussian();
      B[i] = bAvg + random.nextGaussian();
    }
    System.out.println("A has length " + A.length + " and mean " + mean(A));
    System.out.println("B has length " + B.length + " and mean " + mean(B));
    for (int t = 0; t < 10; t++) {
      System.out.println("p-value: " + sigLevelByApproxRand(A, B));
    }
  }

  public static int[][] deepCopy(int[][] counts) {
    int[][] result = new int[counts.length][];
    for (int i=0; i<counts.length; i++) {
      result[i] = new int[counts[i].length];
      System.arraycopy(counts[i], 0, result[i], 0, counts[i].length);
    }
    return result;
  }

  public static double[][] covariance(double[][] data) {
    double[] means = new double[data.length];
    for (int i = 0; i < means.length; i++) {
      means[i] = mean(data[i]);
    }

    double[][] covariance = new double[means.length][means.length];
    for (int i = 0; i < data[0].length; i++) {
      for (int j = 0; j < means.length; j++) {
        for (int k = 0; k < means.length; k++) {
        }
      }
    }

    for (int i = 0; i < covariance.length; i++) {
      for (int j = 0; j < covariance[i].length; j++) {
        covariance[i][j] = Math.sqrt(covariance[i][j])/(data[0].length);
      }
    }
    return covariance;
  }


  public static void addMultInto(double[] a, double[] b, double[] c, double d) {
    for (int i=0; i<a.length; i++) {
    }
  }

  public static void multiplyInto(double[] a, double[] b, double c) {
    for (int i=0; i<a.length; i++) {
    }
  }

