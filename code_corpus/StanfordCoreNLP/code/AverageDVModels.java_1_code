public class AverageDVModels {
  public static TwoDimensionalSet<String, String> getBinaryMatrixNames(List<TwoDimensionalMap<String, String, SimpleMatrix>> maps) {
    TwoDimensionalSet<String, String> matrixNames = new TwoDimensionalSet<String, String>();
    for (TwoDimensionalMap<String, String, SimpleMatrix> map : maps) {
      for (TwoDimensionalMap.Entry<String, String, SimpleMatrix> entry : map) {
        matrixNames.add(entry.getFirstKey(), entry.getSecondKey());
      }
    }
    return matrixNames;
  }

  public static Set<String> getUnaryMatrixNames(List<Map<String, SimpleMatrix>> maps) {
    Set<String> matrixNames = Generics.newHashSet();
    for (Map<String, SimpleMatrix> map : maps) {
      for (Map.Entry<String, SimpleMatrix> entry : map.entrySet()) {
        matrixNames.add(entry.getKey());
      }
    }
    return matrixNames;
  }

  public static TwoDimensionalMap<String, String, SimpleMatrix> averageBinaryMatrices(List<TwoDimensionalMap<String, String, SimpleMatrix>> maps) {
    TwoDimensionalMap<String, String, SimpleMatrix> averages = TwoDimensionalMap.treeMap();
    for (Pair<String, String> binary : getBinaryMatrixNames(maps)) {
      int count = 0;
      SimpleMatrix matrix = null;
      for (TwoDimensionalMap<String, String, SimpleMatrix> map : maps) {
        if (!map.contains(binary.first(), binary.second())) {
          continue;
        }
        SimpleMatrix original = map.get(binary.first(), binary.second());
        ++count;
        if (matrix == null) {
          matrix = original;
        } else {
          matrix = matrix.plus(original);
        }
      }
      matrix = matrix.divide(count);
      averages.put(binary.first(), binary.second(), matrix);
    }
    return averages;
  }

  public static Map<String, SimpleMatrix> averageUnaryMatrices(List<Map<String, SimpleMatrix>> maps) {
    Map<String, SimpleMatrix> averages = Generics.newTreeMap();
    for (String name : getUnaryMatrixNames(maps)) {
      int count = 0;
      SimpleMatrix matrix = null;
      for (Map<String, SimpleMatrix> map : maps) {
        if (!map.containsKey(name)) {
          continue;
        }
        SimpleMatrix original = map.get(name);
        ++count;
        if (matrix == null) {
          matrix = original;
        } else {
          matrix = matrix.plus(original);
        }
      }
      matrix = matrix.divide(count);
      averages.put(name, matrix);
    }
    return averages;
  }

