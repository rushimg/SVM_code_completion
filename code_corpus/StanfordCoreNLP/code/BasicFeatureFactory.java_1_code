  public void addEdgeFeatures(List<String> features, State state, String nodeName, String neighborName, Tree node, Tree neighbor) {
    if (node == null) {
      return;
    }

    int left = ShiftReduceUtils.leftIndex(node);
    int right = ShiftReduceUtils.rightIndex(node);

    // Trees of size one are already featurized
    if (right == left) {
      features.add(nodeName + "SZ1");
      return;
    }

    addUnaryQueueFeatures(features, getCoreLabel(state.sentence.get(left)), nodeName + "EL-");
    addUnaryQueueFeatures(features, getCoreLabel(state.sentence.get(right)), nodeName + "ER-");

    if (neighbor != null) {
      addBinaryFeatures(features, nodeName, getCoreLabel(state.sentence.get(right)), FeatureComponent.HEADWORD, FeatureComponent.HEADTAG, neighborName, getCoreLabel(neighbor), FeatureComponent.HEADWORD, FeatureComponent.HEADTAG);
    }

    if (right - left == 1) {
      features.add(nodeName + "SZ2");
      return;
    }

    if (right - left == 2) {
      features.add(nodeName + "SZ3");
      addUnaryQueueFeatures(features, getCoreLabel(state.sentence.get(left + 1)), nodeName + "EM-");
      return;
    }

    features.add(nodeName + "SZB");
    addUnaryQueueFeatures(features, getCoreLabel(state.sentence.get(left + 1)), nodeName + "El-");
    addUnaryQueueFeatures(features, getCoreLabel(state.sentence.get(right - 1)), nodeName + "Er-");
  }

