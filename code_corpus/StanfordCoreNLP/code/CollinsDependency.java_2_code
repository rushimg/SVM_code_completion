	public CollinsDependency(CoreLabel modifier, CoreLabel head, CollinsRelation rel) {

		if(modifier.index() == 0)
			throw new RuntimeException("No index annotation for " + modifier.toString());

		this.modifier = modifier;
		this.head = head;
		relation = rel;
	}

	public CollinsRelation getRelation() { return relation; }

	public DependencyFactory dependencyFactory() { return null; }

	public CoreLabel dependent() { return modifier; }

	public CoreLabel governor() { return head; }

	public boolean equalsIgnoreName(Object o) { return this.equals(o); }

	public String name() { return "CollinsBilexicalDependency"; }

	public String toString(String format) { return toString(); }


	private static CoreLabel makeStartLabel(String label) {
		CoreLabel root = new CoreLabel();
		root.set(CoreAnnotations.ValueAnnotation.class, label);
		root.set(CoreAnnotations.IndexAnnotation.class, 0);
		return root;
	}


	public static Set<CollinsDependency> extractFromTree(Tree t, String startSymbol, HeadFinder hf) {
		return extractFromTree(t,startSymbol,hf,false);
	}

	public static Set<CollinsDependency> extractNormalizedFromTree(Tree t, String startSymbol, HeadFinder hf) {
		return extractFromTree(t,startSymbol,hf,true);
	}

