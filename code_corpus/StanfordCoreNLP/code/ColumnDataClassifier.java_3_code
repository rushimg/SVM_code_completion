  public Datum<String,String> makeDatumFromStrings(String[] strings) {
    if (globalFlags.usesRealValues) {
      return makeRVFDatumFromStrings(strings);
    }

    if (globalFlags.featureFormat) {
      Collection<String> theFeatures = new ArrayList<String>();
      for (int i = 0; i < strings.length; i++) {
        if (i != globalFlags.goldAnswerColumn)
            if (globalFlags.significantColumnId) {
              theFeatures.add(String.format("%d:%s", i, strings[i]));
            } else {
              theFeatures.add(strings[i]);
            }
      }
      return new BasicDatum<String,String>(theFeatures, strings[globalFlags.goldAnswerColumn]);
    } else {
      // System.err.println("Read in " + strings);
      return makeDatum(strings);
    }
  }


  private RVFDatum<String,String> makeRVFDatumFromStrings(String[] strings) {
    if (globalFlags.featureFormat) {
      ClassicCounter<String> theFeatures = new ClassicCounter<String>();
      for (int i = 0; i < strings.length; i++) {
        if (i != globalFlags.goldAnswerColumn) {
          if (flags[i] != null && (flags[i].isRealValued || flags[i].logTransform || flags[i].logitTransform || flags[i].sqrtTransform)) {
            addFeatureValue(strings[i], flags[i], theFeatures);
          } else {
            theFeatures.setCount(strings[i], 1.0);
          }
        }
      }
      return new RVFDatum<String,String>(theFeatures, strings[globalFlags.goldAnswerColumn]);
    } else {
      // System.err.println("Read in " + strings);
      return makeRVFDatum(strings);
    }
  }


