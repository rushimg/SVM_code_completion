  public static class AuthorAnnotation implements CoreAnnotation<String> {
    public Class<String> getType() {
      return String.class;
    }
  }

  // Numeric annotations

  // Per token annotation indicating whether the token represents a NUMBER or ORDINAL
  // (twenty first => NUMBER ORDINAL)
  public static class NumericTypeAnnotation implements CoreAnnotation<String> {
    public Class<String> getType() {
      return String.class;
    }
  }

  // Per token annotation indicating the numeric value of the token
  // (twenty first => 20 1)
  public static class NumericValueAnnotation implements CoreAnnotation<Number> {
    public Class<Number> getType() {
      return Number.class;
    }
  }

  // Per token annotation indicating the numeric object associated with an annotation
  public static class NumericObjectAnnotation implements CoreAnnotation<Object> {
    public Class<Object> getType() {
      return Object.class;
    }
  }

  // Annotation indicating whether the numeric phrase the token is part of
  // represents a NUMBER or ORDINAL (twenty first => ORDINAL ORDINAL)
  public static class NumericCompositeValueAnnotation implements CoreAnnotation<Number> {
    public Class<Number> getType() {
      return Number.class;
    }
  }

  // Annotation indicating the numeric value of the phrase the token is part of
  // (twenty first => 21 21 )
  public static class NumericCompositeTypeAnnotation implements CoreAnnotation<String> {
    public Class<String> getType() {
      return String.class;
    }
  }

  // Annotation indicating the numeric object associated with an annotation
  public static class NumericCompositeObjectAnnotation implements CoreAnnotation<Object> {
    public Class<Object> getType() {
      return Object.class;
    }
  }

  public static class NumerizedTokensAnnotation implements CoreAnnotation<List<CoreMap>> {
    public Class<List<CoreMap>> getType() {
      return ErasureUtils.<Class<List<CoreMap>>> uncheckedCast(List.class);
    }
  }

