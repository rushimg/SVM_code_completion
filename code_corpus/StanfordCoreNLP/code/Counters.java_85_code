  public static <E> int hIndex(Counter<E> citationCounts) {
    Counter<Integer> countCounts = new ClassicCounter<Integer>();
    for (double value : citationCounts.values()) {
      for (int i = 0; i <= value; ++i) {
        countCounts.incrementCount(i);
      }
    }
    List<Integer> citationCountValues = CollectionUtils.sorted(countCounts.keySet());
    Collections.reverse(citationCountValues);
    for (int citationCount : citationCountValues) {
      double occurrences = countCounts.getCount(citationCount);
      if (occurrences >= citationCount) {
        return citationCount;
      }
    }
    return 0;
  }

  @SuppressWarnings("unchecked")
  public static <E, C extends Counter<E>> C perturbCounts(C c, Random random, double p) {
    C result = (C) c.getFactory().create();
    for (E key : c.keySet()) {
      double count = c.getCount(key);
      double noise = -Math.log(1.0 - random.nextDouble()); // inverse of CDF for
                                                           // exponential
                                                           // distribution
      // System.err.println("noise=" + noise);
      result.setCount(key, perturbedCount);
    }
    return result;
  }

