  public Collection<Identifier> transitiveClosure(List<String> startingClassNames) {
    Set<Identifier> closure = Generics.newHashSet();

    // The depQueue is the queue of items in the closure whose dependencies
    // have yet to be scanned.
    LinkedList<Identifier> depQueue = new LinkedList<Identifier>();

    // add all the starting classes to the closure and the depQueue
    addStartingClasses(depQueue, closure, startingClassNames);

    // Now work through the dependency queue, adding dependencies until
    // there are none left.
    while (!depQueue.isEmpty()) {
      Identifier id = depQueue.removeFirst();

      for (Identifier outgoingDependency : id.outgoingDependencies) {
        if (outgoingDependency.isClass && !closure.contains(outgoingDependency)) {
          if (VERBOSE) System.err.println("Added " + outgoingDependency + " due to " + id);
          depQueue.addLast(outgoingDependency);
          closure.add(outgoingDependency);
        }
      }
    }

    return closure;
  }

  //
  // These regular expressions are used to parse the raw output
  // of DependencyExtractor.
  //

