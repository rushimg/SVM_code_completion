public abstract class EntityCachingAbstractSequencePriorBIO <IN extends CoreMap> implements SequenceModel, SequenceListener {

  protected int[] sequence;
  protected int backgroundSymbol;
  protected int numClasses;
  protected int[] possibleValues;
  protected Index<String> classIndex;
  protected Index<String> tagIndex;
  private List<String> wordDoc;

  public EntityCachingAbstractSequencePriorBIO(String backgroundSymbol, Index<String> classIndex, Index<String> tagIndex, List<IN> doc) {
    this.classIndex = classIndex;
    this.tagIndex = tagIndex;
    this.backgroundSymbol = classIndex.indexOf(backgroundSymbol);
    this.numClasses = classIndex.size();
    this.possibleValues = new int[numClasses];
    for (int i=0; i<numClasses; i++) {
      possibleValues[i] = i;
    }
    this.wordDoc = new ArrayList<String>(doc.size());
    for (IN w: doc) {
      wordDoc.add(w.get(CoreAnnotations.TextAnnotation.class));
    }
  }

  private boolean VERBOSE = false;

  EntityBIO[] entities;

  public int leftWindow() {
    return Integer.MAX_VALUE; // not Markovian!
  }

  public int rightWindow() {
    return Integer.MAX_VALUE; // not Markovian!
  }

  public int[] getPossibleValues(int position) {
    return possibleValues;
  }

  public double scoreOf(int[] sequence, int pos) {
    return scoresOf(sequence, pos)[sequence[pos]];
  }

