  public int[] otherOccurrences(EntityBIO entity){
    List<Integer> other = new ArrayList<Integer>();
    for (int i = 0; i < wordDoc.size(); i++) {
      if (i == entity.startPosition) { continue; }
      if (matches(entity, i)) {
        other.add(Integer.valueOf(i));
      }
    }
    return toArray(other);
  }

  public static int[] toArray(List<Integer> list) {
    int[] arr = new int[list.size()];
    for (int i = 0; i < arr.length; i++) {
      arr[i] = list.get(i);
    }
    return arr;
  }

  public boolean matches(EntityBIO entity, int position) {
  	String word = wordDoc.get(position);
    if (word.equalsIgnoreCase(entity.words.get(0))) {
      for (int j = 1; j < entity.words.size(); j++) {
        if (position + j >= wordDoc.size()) {
          return false;
        }
        String nextWord = wordDoc.get(position+j);
        if (!nextWord.equalsIgnoreCase(entity.words.get(j))) {
          return false;
        }
      }
      return true;
    }
    return false;
  }

  public void updateSequenceElement(int[] sequence, int position, int oldVal) {
    this.sequence = sequence;

    if (sequence[position] == oldVal)
      return;

    if (VERBOSE) System.err.println("changing position "+position+" from " +classIndex.get(oldVal)+" to "+classIndex.get(sequence[position]));

    if (sequence[position] == backgroundSymbol) { // new tag is O
      String oldRawTag = classIndex.get(oldVal);
      String[] oldParts = oldRawTag.split("-");
      if (oldParts[0].equals("B")) { // old tag was a B, current entity definitely affected, also check next one
        EntityBIO entity = entities[position];
        if (entity == null)
          throw new RuntimeException("oldTag starts with B, entity at position should not be null");
        // remove entities for all words affected by this entity
        for (int i=0; i < entity.words.size(); i++) {
          entities[position+i] = null;
        }
      } else { // old tag was a I, check previous one
        if (entities[position] != null) { // this was part of an entity, shortened
          if (VERBOSE) System.err.println("splitting off prev entity");
          EntityBIO oldEntity = entities[position];
          int oldLen = oldEntity.words.size();
          int offset = position - oldEntity.startPosition;
          List<String> newWords = new ArrayList<String>();
          for (int i=0; i<offset; i++) {
            newWords.add(oldEntity.words.get(i));
          }
          oldEntity.words = newWords;
          oldEntity.otherOccurrences = otherOccurrences(oldEntity);
          // need to clean any remaining entity
          for (int i=0 ; i < oldLen - offset; i++) {
            entities[position+i] = null;
          }
          if (VERBOSE && position > 0) 
            System.err.println("position:" + position +", entities[position-1] = " + entities[position-1].toString(tagIndex));
        } // otherwise, non-entity part I-xxx -> O, no enitty affected
      }
    } else {
      String rawTag = classIndex.get(sequence[position]);
      String[] parts = rawTag.split("-");
      if (parts[0].equals("B")) { // new tag is B
        if (oldVal == backgroundSymbol) { // start a new entity, may merge with the next word
          EntityBIO entity = extractEntity(sequence, position, parts[1]);
          addEntityToEntitiesArray(entity);
        } else {
          String oldRawTag = classIndex.get(oldVal);
          String[] oldParts = oldRawTag.split("-");
          if (oldParts[0].equals("B")) { // was a different B-xxx
            EntityBIO oldEntity = entities[position];
            if (oldEntity.words.size() > 1) { // remove all old entity, add new singleton
              for (int i=0; i< oldEntity.words.size(); i++)
                entities[position+i] = null;
              EntityBIO entity = extractEntity(sequence, position, parts[1]);
              addEntityToEntitiesArray(entity);
            } else { // extract entity
              EntityBIO entity = extractEntity(sequence, position, parts[1]);
              addEntityToEntitiesArray(entity);
            }
          } else { // was I
            EntityBIO oldEntity = entities[position];
            if (oldEntity != null) {// break old entity
              int oldLen = oldEntity.words.size();
              int offset = position - oldEntity.startPosition;
              List<String> newWords = new ArrayList<String>();
              for (int i=0; i<offset; i++) {
                newWords.add(oldEntity.words.get(i));
              }
              oldEntity.words = newWords;
              oldEntity.otherOccurrences = otherOccurrences(oldEntity);
              // need to clean any remaining entity
              for (int i=0 ; i < oldLen - offset; i++) {
                entities[position+i] = null;
              }
            }
            EntityBIO entity = extractEntity(sequence, position, parts[1]);
            addEntityToEntitiesArray(entity);
          }
        }
      } else { // new tag is I
        if (oldVal == backgroundSymbol) { // check if previous entity extends into this one
          if (position > 0) {
            if (entities[position-1] != null) {
              String oldTag = tagIndex.get(entities[position-1].type);
              EntityBIO entity = extractEntity(sequence, position-1-entities[position-1].words.size()+1, oldTag);
              addEntityToEntitiesArray(entity);
            }
          }
        } else {
          String oldRawTag = classIndex.get(oldVal);
          String[] oldParts = oldRawTag.split("-");
          if (oldParts[0].equals("B")) { // was a B, clean the B entity first, then check if previous is an entity
            EntityBIO oldEntity = entities[position];
            for (int i=0; i<oldEntity.words.size(); i++)
              entities[position+i] = null;

            if (position > 0) {
              if (entities[position-1] != null) {
                String oldTag = tagIndex.get(entities[position-1].type);
                if (VERBOSE)
                  System.err.println("position:" + position +", entities[position-1] = " + entities[position-1].toString(tagIndex));
                EntityBIO entity = extractEntity(sequence, position-1-entities[position-1].words.size()+1, oldTag);
                addEntityToEntitiesArray(entity);
              }
            }
          } else { // was a differnt I-xxx, 
            if (entities[position] != null) { // shorten the previous one, remove any additional parts
              EntityBIO oldEntity = entities[position];
              int oldLen = oldEntity.words.size();
              int offset = position - oldEntity.startPosition;
              List<String> newWords = new ArrayList<String>();
              for (int i=0; i<offset; i++) {
                newWords.add(oldEntity.words.get(i));
              }
              oldEntity.words = newWords;
              oldEntity.otherOccurrences = otherOccurrences(oldEntity);
              // need to clean any remaining entity
              for (int i=0 ; i < oldLen - offset; i++) {
                entities[position+i] = null;
              }
            } else { // re-calc entity of the previous entity if exist
              if (position > 0) {
                if (entities[position-1] != null) {
                  String oldTag = tagIndex.get(entities[position-1].type);
                  EntityBIO entity = extractEntity(sequence, position-1-entities[position-1].words.size()+1, oldTag);
                  addEntityToEntitiesArray(entity);
                }
              }
            }
          }
        }
      }
    }
  }

  @Override
  public String toString() {
    StringBuffer sb = new StringBuffer();
    for (int i = 0; i < entities.length; i++) {
      sb.append(i);
      sb.append("\t");
      String word = wordDoc.get(i);
      sb.append(word);
      sb.append("\t");
      sb.append(classIndex.get(sequence[i]));
      if (entities[i] != null) {
        sb.append("\t");
        sb.append(entities[i].toString(tagIndex));
      }
      sb.append("\n");
    }
    return sb.toString();
  }

  public String toString(int pos) {
    StringBuffer sb = new StringBuffer();
    for (int i = Math.max(0, pos - 3); i < Math.min(entities.length, pos + 3); i++) {
      sb.append(i);
      sb.append("\t");
      String word = wordDoc.get(i);
      sb.append(word);
      sb.append("\t");
      sb.append(classIndex.get(sequence[i]));
      if (entities[i] != null) {
        sb.append("\t");
        sb.append(entities[i].toString(tagIndex));
      }
      sb.append("\n");
    }
    return sb.toString();
  }
}

class EntityBIO {
  public int startPosition;
  public List<String> words;
  public int type;

