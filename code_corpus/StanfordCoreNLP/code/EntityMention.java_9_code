    	Integer start = token.get(CoreAnnotations.CharacterOffsetBeginAnnotation.class);
    	Integer end = token.get(CoreAnnotations.CharacterOffsetEndAnnotation.class);

    	if (start != null && end != null) {
    	  if (lastEnd != -1 && !start.equals(lastEnd)) {
    	    sb.append(StringUtils.repeat(" ", start - lastEnd));
    	    lastEnd = end;
    	  }
    	} else {
    	  if (lastEnd != -1) sb.append(" ");
    	  lastEnd = 0;
    	}
      if(i > headTokenSpan.start()) sb.append(" ");

      sb.append(token.word());

    }

    return sb.toString();
  }

  
  @Override
  public String toString() {
    return "EntityMention [type=" + type 
    + (subType != null ? ", subType=" + subType : "")
    + (mentionType != null ? ", mentionType=" + mentionType : "")
    + (objectId != null ? ", objectId=" + objectId : "") 
    + (headTokenSpan != null ? ", hstart=" + headTokenSpan.start() + ", hend=" + headTokenSpan.end() : "")
    + (extentTokenSpan != null ? ", estart=" + extentTokenSpan.start() + ", eend=" + extentTokenSpan.end() : "")
    + (syntacticHeadTokenPosition >= 0 ? ", headPosition=" + syntacticHeadTokenPosition : "")
    + (headTokenSpan != null ? ", value=\"" + getValue() + "\"" : "") 
    + (normalizedName != null ? ", normalizedName=\"" + normalizedName + "\"" : "")
    + ", corefID=" + corefID
    + (typeProbabilities != null ? ", probs=" + probsToString() : "")
    + "]";
  }

  @Override
  public int hashCode() {
    int result = mentionType != null ? mentionType.hashCode() : 0;
    return result;
  }

  static class CompByHead implements Comparator<EntityMention> {
    public int compare(EntityMention o1, EntityMention o2) {
      if(o1.getHeadTokenStart() < o2.getHeadTokenStart()){
        return -1;
      } else if(o1.getHeadTokenStart() > o2.getHeadTokenStart()){
        return 1;
      } else if(o1.getHeadTokenEnd() < o2.getHeadTokenEnd()) {
        return -1;
      } else if(o1.getHeadTokenEnd() > o2.getHeadTokenEnd()) {
        return 1;
      } else {
        return 0;
      }
    }
  }

  public static void sortByHeadSpan(List<EntityMention> mentions) {
    Collections.sort(mentions, new CompByHead());
  }

  private static int MENTION_COUNTER = 0;

