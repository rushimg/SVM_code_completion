  public static final String TYPE_CLASS = "CLASS";
  public static final String TYPE_TOKENS = "TOKENS";
  public static final String TYPE_BOOLEAN = "BOOLEAN";

  public static final String VAR_SELF = "_";

  public static final Value<Boolean> TRUE = new PrimitiveValue<Boolean>(Expressions.TYPE_BOOLEAN, true);
  public static final Value<Boolean> FALSE = new PrimitiveValue<Boolean>(Expressions.TYPE_BOOLEAN, false);
  public static final Value NIL = new PrimitiveValue("NIL", null);

  public static Boolean convertValueToBoolean(Value v, boolean keepNull) {
    Boolean res = null;
    if (v != null) {
      Object obj = v.get();
      if (obj != null) {
        if (obj instanceof Boolean) {
          res = ((Boolean) obj).booleanValue();
        } else if (obj instanceof Integer) {
          res = (((Integer) obj).intValue() != 0);
        } else {
          res = true;
        }
        return res;
      }
    }
    return (keepNull)? res:false;
  }

  public static Value<Boolean> convertValueToBooleanValue(Value v, boolean keepNull) {
    if (v != null) {
      Object obj = v.get();
      if (obj instanceof Boolean) {
        return (Value<Boolean>) v;
      } else {
        return new PrimitiveValue<Boolean>(Expressions.TYPE_BOOLEAN, convertValueToBoolean(v, keepNull));
      }
    } else {
      return keepNull? null:FALSE;
    }
  }

  public static <C> C asObject(Env env, Object v) {
    if (v instanceof Expression) {
      return (C) ((Expression) v).evaluate(env).get();
    } else {
      return (C) v;
    }
  }

  public static Expression asExpression(Env env, Object v) {
    if (v instanceof Expression) {
      return (Expression) v;
    } else {
      return createValue(null, v);
    }
  }

  public static Value asValue(Env env, Object v) {
    if (v instanceof Value) {
      return (Value) v;
    } else {
      return createValue(null, v);
    }
  }

  public static <T> Value createValue(String typename, T value, String... tags) {
    if (value instanceof Value) {
      return (Value) value;
    } else {
      if (typename == null && value != null) {
        // TODO: Check for simpler typename provided by value
        typename = value.getClass().getName();
      }
      return new PrimitiveValue<T>(typename, value, tags);
    }
  }

