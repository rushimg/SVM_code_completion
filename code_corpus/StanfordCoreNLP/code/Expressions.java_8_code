  public static class VarAssignmentExpression extends Expressions.TypedExpression {
    String varName;
    Expression valueExpr;
    boolean bindAsValue = false;

    public VarAssignmentExpression(String varName, Expression valueExpr, boolean bindAsValue) {
      super("VAR_ASSIGNMENT");
      this.varName = varName;
      this.valueExpr = valueExpr;
      this.bindAsValue = bindAsValue;
    }
    public Value evaluate(Env env, Object... args) {
      Value value = valueExpr.evaluate(env, args);
      if (args != null) {
        if (args.length == 1 && args[0] instanceof CoreMap) {
          CoreMap cm = (CoreMap) args[0];
          Class annotationKey = EnvLookup.lookupAnnotationKey(env, varName);
          if (annotationKey != null) {
            cm.set(annotationKey, (value != null)? value.get():null);
            return value;
          }
        }
      }
      if (bindAsValue) {
        env.bind(varName, value);
      } else {
        env.bind(varName, (value != null)? value.get():null);
        if (TYPE_REGEX == value.getType()) {
          try {
            Object vobj = value.get();
            if (vobj instanceof String) {
              env.bindStringRegex(varName, (String) vobj);
            } else if (vobj instanceof Pattern) {
              env.bindStringRegex(varName, ((Pattern) vobj).pattern());
            }
          } catch (Exception ex) {}
        }
      }
      return value;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) return true;
      if (!(o instanceof VarAssignmentExpression)) return false;
      if (!super.equals(o)) return false;

      VarAssignmentExpression that = (VarAssignmentExpression) o;

      if (bindAsValue != that.bindAsValue) return false;
      if (valueExpr != null ? !valueExpr.equals(that.valueExpr) : that.valueExpr != null) return false;
      if (varName != null ? !varName.equals(that.varName) : that.varName != null) return false;

      return true;
    }

    @Override
    public int hashCode() {
      int result = super.hashCode();
      return result;
    }
  }

