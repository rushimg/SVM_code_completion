    int startIndex = indicesFront(given);
    int numCellsToSum = SloppyMath.intPow(numClasses, windowSize - given.length);
    double z = ArrayMath.logSum(table, startIndex, startIndex + numCellsToSum);
    int i = indexOf(given, of);
    System.err.printf("startIndex is %d, numCellsToSum is %d, i is %d (of is %d)%n", startIndex, numCellsToSum, i, of);
    int startIndex = indicesFront(given);
    double z = ArrayMath.logSum(table, startIndex, startIndex + numClasses);
    int i = startIndex + of;
    // System.err.printf("startIndex is %d, numCellsToSum is %d, i is %d (of is %d)%n", startIndex, numClasses, i, of);

    return table[i] - z;
  }

//  public double conditionalLogProbGivenPreviousForPartial(int[] given, int of) {
//    if (given.length != windowSize - 1) {
//      System.err.println("error computing conditional log prob");
//      System.exit(0);
//    }
//    // int[] label = indicesFront(given);
//    // double[] masses = new double[label.length];
//    // for (int i = 0; i < masses.length; i++) {
//    // masses[i] = table[label[i]];
//    // }
//    // double z = ArrayMath.logSum(masses);
//
//    int i = indexOf(given, of);
//    // if (SloppyMath.isDangerous(z) || SloppyMath.isDangerous(table[i])) {
//    // System.err.println("z="+z);
//    // System.err.println("t="+table[i]);
//    // }
//
//    return table[i];
//  }

