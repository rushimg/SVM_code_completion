  public boolean parse(List<? extends HasWord> words) {
    nGoodTrees.clear();

    if (pparser.hasParse()) {
      List<ScoredObject<Tree>> pcfgBest = pparser.getKBestParses(numParsesToConsider);
      Beam<ScoredObject<Tree>> goodParses = new Beam<ScoredObject<Tree>>(numToFind);

      for (ScoredObject<Tree> candidate : pcfgBest) {
        if (Thread.interrupted()) {
          throw new RuntimeInterruptedException();
        }
        double depScore = depScoreTree(candidate.object());
        ScoredObject<Tree> x = new ScoredObject<Tree>(candidate.object(), candidate.score() + depScore);
        goodParses.add(x);
      }
      nGoodTrees = goodParses.asSortedList();
    }
    return ! nGoodTrees.isEmpty();
  }

