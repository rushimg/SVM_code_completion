public class FeatureKey {

  // this object is used as a hash key and such instances should be treated as read-only
  // TODO: refactor code so that FeatureKeys are immutable? Or is the object reuse in a tight loop worth it?
  int num;
  String val;
  String tag;

  public FeatureKey() {
  }


  protected FeatureKey(int num, String val, String tag) {
    this.num = num;
    this.val = val;
    this.tag = tag;
  }


  @Override
  public String toString() {
    return Integer.toString(num) + ' ' + val + ' ' + tag;
  }

  protected void save(DataOutputStream f) throws IOException {
    f.writeInt(num);
    f.writeUTF(val);
    f.writeUTF(tag);
  }

  protected void read(DataInputStream inf) throws IOException {
    num = inf.readInt();
    // mg2008: slight speedup:
    val = inf.readUTF();
    // intern the tag strings as they are read, since there are few of them. This saves tons of memory.
    tag = inf.readUTF();
    hashCode = 0;
  }

