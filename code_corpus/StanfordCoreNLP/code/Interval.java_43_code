  public boolean isEndBeforeBegin(Interval<E> other)
  {
    if (other == null) return false;
    int comp21 = this.second.compareTo(other.first());
    return (comp21 < 0);
  }

  // Returns true if end before or eq (start of other)
  public boolean isEndBeforeEqBegin(Interval<E> other)
  {
    if (other == null) return false;
    int comp21 = this.second.compareTo(other.first());
    return (comp21 <= 0);
  }

  // Returns true if end before or eq (start of other)
  public boolean isEndEqBegin(Interval<E> other)
  {
    if (other == null) return false;
    int comp21 = this.second.compareTo(other.first());
    return (comp21 == 0);
  }

  // Returns true if start after (end of other)
  public boolean isBeginAfterEnd(Interval<E> other)
  {
    if (other == null) return false;
    int comp12 = this.first.compareTo(other.second());
    return (comp12 > 0);
  }

  // Returns true if start eq(end of other)
  public boolean isBeginAfterEqEnd(Interval<E> other)
  {
    if (other == null) return false;
    int comp12 = this.first.compareTo(other.second());
    return (comp12 >= 0);
  }

  // Returns true if start eq(end of other)
  public boolean isBeginEqEnd(Interval<E> other)
  {
    if (other == null) return false;
    int comp12 = this.first.compareTo(other.second());
    return (comp12 >= 0);
  }

  // Returns true if start is the same
  public boolean isBeginSame(Interval<E> other)
  {
    if (other == null) return false;
    int comp11 = this.first.compareTo(other.first());
    return (comp11 == 0);
  }

  // Returns true if end is the same
  public boolean isEndSame(Interval<E> other)
  {
    if (other == null) return false;
    int comp22 = this.second.compareTo(other.second());
    return (comp22 == 0);

