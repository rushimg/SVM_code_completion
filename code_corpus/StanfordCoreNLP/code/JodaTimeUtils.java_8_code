  public static String timexDateValue(ReadableDateTime begin, ReadableDateTime end, ConversionOptions opts){
    //--Special Cases
    if( begin.getYear() < -100000){
      return "PAST_REF";
    } else if(end.getYear() > 100000){
      return "FUTURE_REF";
    } else if(begin.equals(end)){
      return timexTimeValue(begin);
    }
    StringBuilder value = new StringBuilder();
    boolean shouldBeDone = false;
    //--Differences
    //--Years
    if(noFurtherFields(year(), begin, end)){
      int diff = end.getYear()-begin.getYear();
      if(diff == 100 && (opts.forceDate || begin.getYear() % 100 == 0)){
        //(case: century)
        value.append(( begin.getYear() / 100)).append("XX");
      } else if(diff == 10 && (opts.forceDate || begin.getYear() % 10 == 0)){
        //(case: decade)
        value.append(( begin.getYear() / 10));
      } else if(diff == 1 || opts.forceDate){
        //(case: year)
        value.append(begin.getYear());
      } else {
        //(case: duration)
        return timexDurationValue(begin,end);
      }
      return value.toString();
    } else if(monthDiff < 12 || opts.forceDate) {
      //(case: year and more)
      value.append(begin.getYear());
    } else {
      //(case: treat as duration)
      return timexDurationValue(begin, end);
    }
    //--Week/Month/Quarters
    value.append("-");
    if(noFurtherFields(monthOfYear(), begin, end) || noFurtherFields(weekOfWeekyear(), begin, end)){
      boolean monthTerminal = noFurtherFields(monthOfYear(), begin, end);
      boolean weekTerminal = noFurtherFields(weekOfWeekyear(), begin, end);
      //(Month/Quarter)
      if(monthTerminal && monthDiff == 6 && (begin.getMonthOfYear()-1) % 6 == 0){
        //(case: half of year)
        value.append("H").append(( begin.getMonthOfYear()-1) / 6 + 1);
       }else  if(monthTerminal && monthDiff == 3 && (begin.getMonthOfYear()-1) % 3 == 0){
        //(case: quarter of year)
        value.append("Q").append(( begin.getMonthOfYear()-1) / 3 + 1);
      } else if(monthTerminal && monthDiff == 3 && begin.getMonthOfYear() % 3 == 0){
        //(case: season)
        switch( begin.getMonthOfYear() ){
          case 12:
            value.append("WI");
            break;
          case 3:
            value.append("SP");
            break;
          case 6:
            value.append("SU");
            break;
          case 9:
            value.append("FA");
            break;
          default:
            throw new IllegalStateException("Season start month is unknown");
        }
      } else if(weekTerminal && weekDiff == 1) {
        //(case: a week)
        value.append("W").append(zeroPad(begin.getWeekOfWeekyear(), 2));
      } else if(monthTerminal && monthDiff == 1 && weekDiff != 1 || opts.forceDate) {
        //(case: a month)
        value.append( zeroPad(begin.getMonthOfYear(),2) );
      } else {
        //(case: treat as duration)
        return timexDurationValue(begin, end);
      }
      return value.toString();
    } else if(noFurtherFields(dayOfWeek(), begin, end) && dayDiff == 2 && begin.getDayOfWeek() == 6){
      //(case: a weekend)
      value.append("W").append(zeroPad(begin.getWeekOfWeekyear(),2)).append("-WE");
      return value.toString();
    } else if(dayDiff < maximumValue(dayOfMonth(),begin) || opts.forceDate) {
      //(case: month and more)
      value.append(zeroPad(begin.getMonthOfYear(),2));
    } else {
      //(case: treat as duration)
      return timexDurationValue(begin, end);
    }
    //--Weekday/Day
    value.append("-");
    if(noFurtherFields(dayOfMonth(), begin, end)){
      if(dayDiff == 1 || opts.forceDate){
        //(case: a day)
        value.append(zeroPad(begin.getDayOfMonth(),2));
      } else {
        //(case: treat as duration)
        return timexDurationValue(begin, end);
      }
      return value.toString();
    } else if(hrDiff < 24 || opts.forceDate){
      //(case: day and more)
      value.append(zeroPad(begin.getDayOfMonth(),2));
    } else {
      //(case: treat as duration)
      return timexDurationValue(begin, end);
    }
    //--Hour/TimeOfDay
    value.append("T");
    if(noFurtherFields(hourOfDay(),begin,end)){
      //((case: half day)
      if(hrDiff == 12 && begin.getHourOfDay() == 0){
        value.append("H1");
      } else if(hrDiff == 12 && begin.getHourOfDay() == 12){
        value.append("H2");
      //(case: time of day)
      }else if(hrDiff == 4 && begin.getHourOfDay() == 8){
        value.append("MO");
      }else if(hrDiff == 4 && begin.getHourOfDay() == 12){
        value.append("AF");
      }else if(hrDiff == 4 && begin.getHourOfDay() == 16){
        value.append("EV");
      }else if(hrDiff == 4 && begin.getHourOfDay() == 20){
        value.append("NI");
      } else if(hrDiff == 1 || opts.forceDate){
        //(case: an hour)
        value.append(zeroPad(begin.getHourOfDay()+1,2));
      } else {
        //(case: treat as duration)
        return timexDurationValue(begin,end);
      }
      return value.toString();
    } else if(minDiff <= 60 || opts.forceDate){
      //(case: hour and more)
      value.append(zeroPad(begin.getHourOfDay(),2));
    } else {
      //(case: treat as duration)
      return timexDurationValue(begin, end);
    }
    //--Minute/Second
    value.append(":");
    value.append(zeroPad(begin.getMinuteOfHour(),2));
    return value.toString();
  }

  private static boolean consistentWithForced(String cand, String[] forcedList){
    //--Check If Forced
    for(String forced : forcedList){
      if(forced.equals(cand)){ return true; }
    }
    //--Get Ordering
    String[] ordering = {"L","C","E","Y","Q","M","W","D","H","m","S"};
    int candIndex = -1;
    for(int i=0; i<ordering.length; i++){
      if(ordering[i].equals(cand)){
        candIndex = i;
        break;
      }
    }
    assert candIndex >= 0;
    //--Check If Lower Priority Forced
    for(int candI=candIndex+1; candI < ordering.length; candI++){
      for(String forced : forcedList){
        if(ordering[candI].equals(forced)){
          return false;
        }
      }
    }
    //--OK
    return true;
  }

