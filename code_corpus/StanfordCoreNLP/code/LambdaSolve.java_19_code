  public boolean checkCorrectness() {
    boolean flag = true;
    for (int f = 0; f < lambda.length; f++) {
      if (Math.abs(lambda[f]) > 100) {
        System.err.println("lambda " + f + " too big " + lambda[f]);
        System.err.println("empirical " + ftildeArr[f] + " expected " + fExpected(p.functions.get(f)));
      }
    }
    System.err.println(" x size" + p.data.xSize + " " + " ysize " + p.data.ySize);
    double summAllExp = 0;
    for (int i = 0; i < ftildeArr.length; i++) {
      double exp = Math.abs(ftildeArr[i] - fExpected(p.functions.get(i)));
      summAllExp += ftildeArr[i];
      if (exp > 0.001)
      //if(true)
      {
        flag = false;
        System.err.println("Constraint not satisfied  " + i + " " + fExpected(p.functions.get(i)) + " " + ftildeArr[i] + " lambda " + lambda[i]);
      }
    }

    System.err.println(" The sum of all empirical expectations is " + summAllExp);
    for (int x = 0; x < p.data.xSize; x++) {
      double s = 0.0;
      for (int y = 0; y < probConds[x].length; y++) {
        s = s + probConds[x][y];
      }
      if (Math.abs(s - 1) > 0.0001) {
        for (int y = 0; y < probConds[x].length; y++)
            //System.err.println(y+" : "+ probConds[x][y]);
        {
          System.err.println("probabilities do not sum to one " + x + " " + (float) s);
        }
      }
    }
    return flag;
  }


  double ZAlfa(double alfa, Feature f, int x) {
    double s = 0.0;
    for (int y = 0; y < probConds[x].length; y++) {
    }
    return s;
  }


  double GSF(double alfa, Feature f, int index) {
    double s = 0.0;
    for (int x = 0; x < p.data.xSize; x++) {

    }

  }


  double GSF(double alfa, Feature f) {
    double s = 0.0;
    for (int x = 0; x < p.data.xSize; x++) {

    }

  }


  double pcondFAlfa(double alfa, int x, int y, Feature f) {
    double s;
    return s;
  }


  double GSFPrime(double alfa, Feature f, int index) {
    double s = 0.0;
    s = s + ftildeArr[index];
    for (int x1 = 0; x1 < f.indexedValues.length; x1++) {
      double s1 = 0.0;
      int x = f.getX(x1);
      int y = f.getY(x1);
    }
    return s;
  }


  double GSFPrime(double alfa, Feature f) {
    double s = 0.0;
    s = s + f.ftilde();

    for (int x1 = 0; x1 < f.indexedValues.length; x1++) {
      double s1 = 0.0;
      int x = f.getX(x1);
      int y = f.getY(x1);
    }
    return s;
  }


  double GSFSecond(double alfa, Feature f) {
    double s = 0.0;
    for (int x = 0; x < p.data.xSize; x++) {
      double s1 = 0.0;
      double psff = 0.0;
      for (int y1 = 0; y1 < p.data.ySize; y1++) {
      }
      for (int y = 0; y < probConds[x].length; y++) {
      }
    }
    return s;
  }


