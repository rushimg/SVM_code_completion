  LambdaSolveTagger(double[] lambda) {
    this.lambda = lambda;
    super.setBinary();
  }

  void initCondsZlambdaEtc() {
    // init pcond
    for (int x = 0; x < p.data.xSize; x++) {
      for (int y = 0; y < p.data.ySize; y++) {
        probConds[x][y] = 1.0 / p.data.ySize;
      }
    }
    System.err.println(" pcond initialized ");
    // init zlambda
    for (int x = 0; x < p.data.xSize; x++) {
      zlambda[x] = p.data.ySize;
    }
    System.err.println(" zlambda initialized ");
    // init ftildeArr
    for (int i = 0; i < p.fSize; i++) {
      ftildeArr[i] = p.functions.get(i).ftilde();
      if (ftildeArr[i] == 0) {
        System.err.println(" Empirical expectation 0 for feature " + i);
      }
    }
    System.err.println(" ftildeArr initialized ");
  }


