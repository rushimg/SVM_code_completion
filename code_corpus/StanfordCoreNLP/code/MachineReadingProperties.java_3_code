
  @Option(name="serializedRelationExtractorPath",gloss="where to store/load the serialized relation extraction model")
  protected static String serializedRelationExtractorPath = null;
  
  @Option(name="serializedRelationExtractionResults",gloss="where to store the serialized sentences containing the results of relation extraction")
  protected static String serializedRelationExtractionResults = null;
  
  @Option(name="relationFeatureFactoryClass",gloss="FeatureFactory class to use for generating features from relations for relation extraction")
  static public Class<RelationFeatureFactory> relationFeatureFactoryClass = edu.stanford.nlp.ie.machinereading.RelationFeatureFactory.class;

  @Option(name="relationMentionFactoryClass",gloss="relation mention factory class to use.")
  static public Class<RelationMentionFactory> relationMentionFactoryClass =  edu.stanford.nlp.ie.machinereading.structure.RelationMentionFactory.class;

  @Option(name="relationFeatures",gloss="comma-separated list of feature types to generate for relation extraction.")
  static public String relationFeatures = "all";
  
  @Option(name="relationResultsPrinters",gloss="comma-separated list of ResultsPrinter subclasses to use for printing the results of relation extraction")
  static public String relationResultsPrinters = "edu.stanford.nlp.ie.machinereading.RelationExtractorResultsPrinter";
  
  @Option(name="trainRelationsUsingPredictedEntities",gloss="if true, the relation extraction model trains using predicted rather than gold entity mentions")
  static public boolean trainRelationsUsingPredictedEntities = false;
  
  @Option(name="testRelationsUsingPredictedEntities",gloss="if true, the relation extraction model is evaluated using predicted rather than gold entity mentions.")
  static public boolean testRelationsUsingPredictedEntities = false;

  @Option(name="createUnrelatedRelations",gloss="If true, it creates automatically negative examples by generating all combinations between EntityMentions in a sentence")
  static public boolean createUnrelatedRelations = true;
  
  @Option(name="doNotLexicalizeFirstArg",gloss="If true, it does not create any lexicalized features from the first argument (needed for KBP)")
  static public boolean doNotLexicalizeFirstArg = false;
  
  // TODO: temporary NFL deadline based hack. remove it.
  @Option(name="useRelationExtractionModelMerging",gloss="If true, the relation extractor will use ExtractorMerger for annotation (not training)")
  static public boolean useRelationExtractionModelMerging = false;

  @Option(name="relationsToSkipDuringTraining",gloss="comma-separated list relation types to skip during training")
  static public String relationsToSkipDuringTraining ="";
  
  @Option(name="relationExtractionPostProcessorClass",gloss="additional (probably domain-dependent) annotator to postprocess relations")
  static public Class<Extractor> relationExtractionPostProcessorClass;
  
