  private static Map<String, String> decodeMap(String encoded){
    if (encoded.length() == 0) return new HashMap<String, String>();
    char[] chars = encoded.trim().toCharArray();

    //--Parse the String
    //(state)
    char quoteCloseChar = (char) 0;
    Map<String, String> map = new HashMap<String, String>();
    String key = "";
    String value = "";
    boolean onKey = true;
    StringBuilder current = new StringBuilder();
    //(start/stop overhead)
    int start = 0; int end = chars.length;
    if(chars[0] == '('){ start += 1; end -= 1; if(chars[end] != ')') throw new IllegalArgumentException("Unclosed paren in encoded map: " + encoded); }
    if(chars[0] == '['){ start += 1; end -= 1; if(chars[end] != ']') throw new IllegalArgumentException("Unclosed bracket in encoded map: " + encoded); }
    if(chars[0] == '{'){ start += 1; end -= 1; if(chars[end] != '}') throw new IllegalArgumentException("Unclosed bracket in encoded map: " + encoded); }
    //(finite state automata)
    for(int i=start; i<end; i++){
      if (chars[i] == '\r') {
        // Ignore funny windows carriage return
        continue;
      } else if(chars[i] == '\\'){
        //(case: escaped character)
        if(i == chars.length - 1) throw new IllegalArgumentException("Last character of encoded pair is escape character: " + encoded);
        current.append(chars[i+1]);
        i += 1;
      } else if(quoteCloseChar != 0){
        //(case: in quotes)
        if(chars[i] == quoteCloseChar){
          quoteCloseChar = (char) 0;
        }else{
          current.append(chars[i]);
        }
      }else{
        //(case: normal)
        if(chars[i] == '"'){
          quoteCloseChar = '"';
        } else if(chars[i] == '\''){
          quoteCloseChar = '\'';
        } else if (chars[i] == '\n' && current.length() == 0) {
          current.append("");  // do nothing
        } else if(chars[i] == ',' || chars[i] == ';' || chars[i] == '\t' || chars[i] == '\n'){
          // case: end a value
          if (onKey) { throw new IllegalArgumentException("Encountered key without value"); }
          if (current.length() > 0) {
            value = current.toString().trim();
          }
          current = new StringBuilder();
          onKey = true;
          map.put(key, value);  // <- add value
        } else if((chars[i] == '-' || chars[i] == '=') && (i < chars.length - 1 && chars[i + 1] == '>')) {
          // case: end a key
          if (!onKey) { throw new IllegalArgumentException("Encountered a value without a key"); }
          if (current.length() > 0) {
            key = current.toString().trim();
          }
          current = new StringBuilder();
          onKey = false;
          i += 1; // skip '>' character
        } else {
          current.append(chars[i]);
        }
      }
    }

    //--Return
    if(current.toString().trim().length() > 0 && !onKey) {
      map.put(key.trim(), current.toString().trim());
    }
    return map;
  }

