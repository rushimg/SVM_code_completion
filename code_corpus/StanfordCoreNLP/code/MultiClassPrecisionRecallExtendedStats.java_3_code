  public double score(List<L> guesses, List<L> trueLabels) {
    clearCounts();
    addGuesses(guesses, trueLabels);
    finalizeCounts();
    return getFMeasure();
  }

  public double score()
  {
    finalizeCounts();
    return getFMeasure();    
  }

  public void clearCounts()
  {
    if (foundCorrect != null) {
      foundCorrect.clear();
    } else {
      foundCorrect = new IntCounter<L>();
    }
    if (foundGuessed != null) {
      foundGuessed.clear();
    } else {
      foundGuessed = new IntCounter<L>();
    }
    if (correctGuesses != null) {
      correctGuesses.clear();
    } else {
      correctGuesses = new IntCounter<L>();
    }
    if (tpCount != null) {
      Arrays.fill(tpCount, 0);
    }
    if (fnCount != null) {
      Arrays.fill(fnCount, 0);
    }
    if (fpCount != null) {
      Arrays.fill(fpCount, 0);
    }
    tokensCount = 0;
    tokensCorrect = 0;
  }

  protected void finalizeCounts()
  {
    negIndex = labelIndex.indexOf(negLabel);
    int numClasses = labelIndex.size();
    if (tpCount == null || tpCount.length != numClasses) {
      tpCount = new int[numClasses];
    }
    if (fpCount == null || fpCount.length != numClasses) {
      fpCount = new int[numClasses];
    }
    if (fnCount == null || fnCount.length != numClasses) {
      fnCount = new int[numClasses];
    }
    for (int i = 0; i < numClasses; i++) {
      L label = labelIndex.get(i);
      tpCount[i] = correctGuesses.getIntCount(label);
      fnCount[i] = foundCorrect.getIntCount(label) - tpCount[i];
      fpCount[i] = foundGuessed.getIntCount(label) - tpCount[i];
    }
  }

  protected void markBoundary()
  {
  }

  protected void addGuess(L guess, L label)
  {
    addGuess(guess, label, true);
  }
  
  protected void addGuess(L guess, L label, boolean addUnknownLabels)
  {
    if (label == null) {
        noLabel++;
        return;
    }
    if (addUnknownLabels) {
      if (labelIndex == null) {
        labelIndex = new HashIndex<L>();
      }
      labelIndex.add(guess);
      labelIndex.add(label);
    }
    if (guess.equals(label)) {
      correctGuesses.incrementCount(label);
      tokensCorrect++;
    }

    if (!guess.equals(negLabel)) {
      foundGuessed.incrementCount(guess);
    }

    if (!label.equals(negLabel)) {
      foundCorrect.incrementCount(label);
    }
    tokensCount++;
  }

  public void addGuesses(List<L> guesses, List<L> trueLabels)
  {
    for (int i=0; i < guesses.size(); ++i)
    {
      L guess = guesses.get(i);
      L label = trueLabels.get(i);
      addGuess(guess, label);
    }
  }

