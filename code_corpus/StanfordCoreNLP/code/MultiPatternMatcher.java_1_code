public class MultiPatternMatcher<T> {
  Collection<SequencePattern<T>> patterns;
  SequencePatternTrigger<T> patternTrigger;

  public MultiPatternMatcher(SequencePatternTrigger<T> patternTrigger,
                             Collection<? extends SequencePattern<T>> patterns)
  {
    this.patterns = new ArrayList<SequencePattern<T>>();
    this.patterns.addAll(patterns);
    this.patternTrigger = patternTrigger;
  }

  public MultiPatternMatcher(SequencePatternTrigger<T> patternTrigger,
                             SequencePattern<T>... patterns)
  {
    this(patterns);
    this.patternTrigger = patternTrigger;
  }

  public MultiPatternMatcher(Collection<SequencePattern<T>> patterns)
  {
    this.patterns = patterns;
  }

  public MultiPatternMatcher(SequencePattern<T>... patterns)
  {
    this.patterns = new ArrayList<SequencePattern<T>>(patterns.length);
    for (SequencePattern<T> p:patterns) {
      this.patterns.add(p);
    }
  }

