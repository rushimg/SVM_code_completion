  public void loadClassifier(File file) {
    try {
      if (file != null) {
        classifier = CRFClassifier.getClassifier(file);
      } else {
        // default classifier in jar
        classifier = CRFClassifier.getDefaultClassifier();
      }
    } catch (Throwable e) {
      // we catch Throwable, since we'd also like to be able to get an
      // OutOfMemoryError
      String message;
      if (file != null) {
        message = "Error loading CRF: " + file.getAbsolutePath();
      } else {
        message = "Error loading default CRF";
      }
      System.err.println(message);
      String title = "CRF Load Error";
      String msg = e.toString();
      if (msg != null) {
        message += "\n" + msg;
      }
      displayError(title, message);
      return;
    }
    removeTags();
    buildTagPanel();
    // buildExtractButton();
    extractButton.setEnabled(true);
    extract.setEnabled(true);
  }

  public void openFile(File file) {
    openURL(file.toURI().toString());
    loadedFile = file;
    saveUntagged.setEnabled(true);
  }

  public void openURL(String url) {
    try {
      editorPane.setPage(url);
    } catch (Exception e) {
      System.err.println("Error loading |" + url + "|");
      e.printStackTrace();
      displayError("Error Loading URL " + url, "Message: " + e.toString());
      return;
    }
    loadedFile = null;
    String text = editorPane.getText();
    taggedContents = null;
    if (!editorPane.getContentType().equals("text/html")) {
      editorPane.setContentType("text/rtf");
      Document doc = editorPane.getDocument();
      try {
        doc.insertString(0, text, defaultAttrSet);
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
      editorPane.revalidate();
      editorPane.repaint();
      editorPane.setEditable(true);
      htmlContents = null;
    } else {
      editorPane.setEditable(false);
      htmlContents = editorPane.getText();
    }

    saveUntagged.setEnabled(false);
    saveTaggedAs.setEnabled(false);
  }

  private void removeTags() {
    if (editorPane.getContentType().equals("text/html")) {
      if (htmlContents != null) {
        editorPane.setText(htmlContents);
      }
      editorPane.revalidate();
      editorPane.repaint();
    } else {
      DefaultStyledDocument doc = (DefaultStyledDocument)editorPane.getDocument();
      SimpleAttributeSet attr = new SimpleAttributeSet();
      StyleConstants.setForeground(attr, Color.BLACK);
      StyleConstants.setBackground(attr, Color.WHITE);
      doc.setCharacterAttributes(0, doc.getLength(), attr, false);
    }
    saveTaggedAs.setEnabled(false);
  }


  private void extract() {
    System.err.println("content type: "+editorPane.getContentType());
    if (!editorPane.getContentType().equals("text/html")) {

      DefaultStyledDocument doc = (DefaultStyledDocument)editorPane.getDocument();
      String text = null;
      try {
        text = doc.getText(0, doc.getLength());
      } catch (Exception e) {
        e.printStackTrace();
      }
      String labeledText = classifier.classifyWithInlineXML(text);
      taggedContents = labeledText;

      Set<String> tags = classifier.labels();
      String background = classifier.backgroundSymbol();
      StringBuilder tagPattern = new StringBuilder();
      for (String tag : tags) {
        if (background.equals(tag)) { continue; }
        if (tagPattern.length() > 0) { tagPattern.append('|'); }
        tagPattern.append(tag);
      }

      Pattern startPattern = Pattern.compile("<(" + tagPattern + ")>");
      Pattern endPattern = Pattern.compile("</(" + tagPattern + ")>");

      String finalText = labeledText;

      Matcher m = startPattern.matcher(finalText);
      while (m.find()) {
        int start = m.start();
        finalText = m.replaceFirst("");
        m = endPattern.matcher(finalText);
        if (m.find()) {
          int end = m.start();
          String tag = m.group(1);
          finalText = m.replaceFirst("");
          AttributeSet attSet = getAttributeSet(tag);
          try {
            String entity = finalText.substring(start, end);
            doc.setCharacterAttributes(start, entity.length(), attSet, false);
          } catch (Exception ex) {
            ex.printStackTrace();
            System.exit(-1);
          }
          System.err.println(tag+": "+ finalText.substring(start, end));
        } else {
          System.err.println("Couldn't find end pattern!");
        }
        m = startPattern.matcher(finalText);
      }
      editorPane.revalidate();
      editorPane.repaint();
    } else {
      String untaggedContents = editorPane.getText();
      if (untaggedContents == null) { untaggedContents = ""; }
      taggedContents = classifier.classifyWithInlineXML(untaggedContents);

      Set<String> tags = classifier.labels();
      String background = classifier.backgroundSymbol();
      StringBuilder tagPattern = new StringBuilder();
      for (String tag : tags) {
        if (background.equals(tag)) { continue; }
        if (tagPattern.length() > 0) { tagPattern.append('|'); }
        tagPattern.append(tag);
      }

      Pattern startPattern = Pattern.compile("<(" + tagPattern + ")>");
      Pattern endPattern = Pattern.compile("</(" + tagPattern + ")>");

      String finalText = taggedContents;

      Matcher m = startPattern.matcher(finalText);
      while (m.find()) {
        String tag = m.group(1);
        String color = colorToHTML(tagToColorMap.get(tag));
        String newTag = "<span style=\"background-color: "+color+"; color: white\">";
        finalText = m.replaceFirst(newTag);
        int start = m.start()+newTag.length();
        Matcher m1 = endPattern.matcher(finalText);
        m1.find(m.end());
        String entity = finalText.substring(start, m1.start());
        System.err.println(tag+": "+ entity);
        finalText = m1.replaceFirst("</span>");
        m = startPattern.matcher(finalText);
      }
      // System.out.println(finalText);
      editorPane.setText(finalText);
      editorPane.revalidate();
      editorPane.repaint();

      // System.err.println(finalText);
    }
    saveTaggedAs.setEnabled(true);
  }

  private AttributeSet getAttributeSet(String tag) {
    MutableAttributeSet attr = new SimpleAttributeSet();
    Color color = tagToColorMap.get(tag);
    StyleConstants.setBackground(attr, color);
    StyleConstants.setForeground(attr, Color.WHITE);
    return attr;
  }

  public void clearDocument() {
    editorPane.setContentType("text/rtf");
    Document doc = new DefaultStyledDocument();
    editorPane.setDocument(doc);
    //    defaultAttrSet = ((StyledEditorKit)editorPane.getEditorKit()).getInputAttributes();
    //    StyleConstants.setFontFamily(defaultAttrSet, "Lucinda Sans Unicode");
    System.err.println("attr: "+defaultAttrSet);

    try {
      doc.insertString(0, " ", defaultAttrSet);
    } catch (Exception ex) {
      throw new RuntimeException(ex);
    }

    editorPane.setEditable(true);
    editorPane.revalidate();
    editorPane.repaint();

    saveUntagged.setEnabled(false);
    saveTaggedAs.setEnabled(false);

    taggedContents = null;
    htmlContents = null;
    loadedFile = null;

  }

  public void cutDocument() {
    editorPane.cut();
    saveTaggedAs.setEnabled(false);
  }

  public void copyDocument() {
    editorPane.copy();
  }

  public void pasteDocument() {
    editorPane.paste();
    saveTaggedAs.setEnabled(false);
  }



  static void exit() {
    // ask if they're sure?
    System.exit(-1);
  }

  private static final String initText = "In bringing his distinct vision to the Western genre, writer-director Jim Jarmusch has created a quasi-mystical avant-garde drama that remains a deeply spiritual viewing experience. After losing his parents and fianc\u00E9e, a Cleveland accountant named William Blake (a remarkable Johnny Depp) spends all his money and takes a train to the frontier town of Machine in order to work at a factory. Upon arriving in Machine, he is denied his expected job and finds himself a fugitive after murdering a man in self-defense. Wounded and helpless, Blake is befriended by Nobody (Gary Farmer), a wandering Native American who considers him to be a ghostly manifestation of the famous poet. Nobody aids Blake in his flight from three bumbling bounty hunters, preparing him for his final journey--a return to the world of the spirits.";
  //  private String initText = "In";

  private void buildContentPanel() {

    editorPane = new JEditorPane ();
    editorPane.setContentType("text/rtf");
    editorPane.addKeyListener(new InputListener());

    //    defaultAttrSet = ((StyledEditorKit)editorPane.getEditorKit()).getInputAttributes();
    StyleConstants.setFontFamily(defaultAttrSet, "Lucida Sans");

    Document doc = new DefaultStyledDocument();
    editorPane.setDocument(doc);
    try {
      doc.insertString(0, initText, defaultAttrSet);
    } catch (Exception ex) {
      throw new RuntimeException(ex);
    }

    JScrollPane scrollPane = new JScrollPane(editorPane);
    frame.getContentPane().add(scrollPane, BorderLayout.CENTER);

    editorPane.setEditable(true);
  }


  public static String colorToHTML(Color color) {
    String r = Integer.toHexString(color.getRed());
    if (r.length() == 0) { r = "00"; }
    else if (r.length() == 1) { r = "0" + r; }
    else if (r.length() > 2) { throw new IllegalArgumentException("invalid hex color for red"+r); }

    String g = Integer.toHexString(color.getGreen());
    if (g.length() == 0) { g = "00"; }
    else if (g.length() == 1) { g = "0" + g; }
    else if (g.length() > 2) { throw new IllegalArgumentException("invalid hex color for green"+g); }

    String b = Integer.toHexString(color.getBlue());
    if (b.length() == 0) { b = "00"; }
    else if (b.length() == 1) { b = "0" + b; }
    else if (b.length() > 2) { throw new IllegalArgumentException("invalid hex color for blue"+b); }

    return "#"+r+g+b;
  }

  static class ColorIcon implements Icon {
    Color color;

    public ColorIcon(Color c) {
      color = c;
    }

    @Override
    public void paintIcon(Component c, Graphics g, int x, int y) {
      g.setColor(color);
      g.fillRect(x, y, getIconWidth(), getIconHeight());
    }

    @Override
    public int getIconWidth() {
      return 10;
    }

    @Override
    public int getIconHeight() {
      return 10;
    }
  }

  private void buildExtractButton() {
    if (extractButton == null) {
      JPanel buttonPanel = new JPanel();
      extractButton = new JButton("Run NER");
      buttonPanel.add(extractButton);
      frame.getContentPane().add(buttonPanel, BorderLayout.SOUTH);
      extractButton.addActionListener(actor);
    }
  }

  private void buildTagPanel() {

    if (tagPanel == null) {
      tagPanel = new JToolBar(SwingConstants.VERTICAL);
      tagPanel.setFloatable(false);
      frame.getContentPane().add(tagPanel, BorderLayout.EAST);
    } else {
      tagPanel.removeAll();
    }

    if (classifier != null) {

      makeTagMaps();

      Set<String> tags = classifier.labels();
      String backgroundSymbol = classifier.backgroundSymbol();

      for (String tag : tags) {
        if (backgroundSymbol.equals(tag)) { continue; }
        Color color = tagToColorMap.get(tag);
        JButton b = new JButton(tag, new ColorIcon(color));
        tagPanel.add(b);
      }
    }
    tagPanel.revalidate();
    tagPanel.repaint();
  }

  private void makeTagMaps() {
    Set<String> tags = classifier.labels();
    String backgroundSymbol = classifier.backgroundSymbol();
    tagToColorMap = makeTagToColorMap(tags, backgroundSymbol);
  }

  public static Map<String, Color> makeTagToColorMap(Set<String> tags,
                                                     String backgroundSymbol) {
    int numColors = tags.size() - 1;
    Color[] colors = getNColors(numColors);
    Map<String, Color> result = Generics.newHashMap();

    int i = 0;
    for (String tag : tags) {
      if (backgroundSymbol.equals(tag)) { continue; }
      if (result.get(tag) != null) { continue; }
      result.put(tag, colors[i++]);
    }
    return result;
  }


  private static Color[] basicColors = new Color[]{new Color(204, 102, 0),
                                                   new Color(102, 0, 102),
                                                   new Color(204, 0, 102),
                                                   new Color(153, 0, 0),
                                                   new Color(153, 0, 204),
                                                   new Color(255, 102, 0),
                                                   new Color(255, 102, 153),
                                                   new Color(204, 152, 255),
                                                   new Color(102, 102, 255),
                                                   new Color(153, 102, 0),
                                                   new Color(51, 102, 51),
                                                   new Color(0, 102, 255)};

//   private static Color[] basicColors = new Color[]{new Color(153, 102, 153),
//                                                    new Color(102, 153, 153),
//                                                    new Color(153, 153, 102),
//                                                    new Color(102, 102, 102),
//                                                    new Color(102, 153, 102),
//                                                    new Color(153, 102, 102),
//                                                    new Color(204, 153, 51),
//                                                    new Color(204, 51, 102),
//                                                    new Color(255, 204, 0),
//                                                    new Color(153, 0, 255),
//                                                    new Color(204, 204, 204),
//                                                    new Color(0, 255, 153)};

//   private static Color[] basicColors = new Color[]{Color.BLUE,
//                                     Color.GREEN,
//                                     Color.RED,
//                                     Color.ORANGE,
//                                     Color.LIGHT_GRAY,
//                                     Color.CYAN,
//                                     Color.MAGENTA,
//                                     Color.YELLOW,
//                                     Color.RED,
//                                     Color.GRAY,
//                                     Color.PINK,
//                                     Color.DARK_GRAY};


  public static Color[] getNColors(int n) {
    Color[] colors = new Color[n];
    if (n <= basicColors.length) {
      System.arraycopy(basicColors, 0, colors, 0, n);
    } else {
      int s = 255 / (int)Math.ceil(Math.pow(n, (1.0 / 3.0)));
      int index = 0;
      OUTER: for (int i = 0; i < 256; i += s) {
        for (int j = 0; j < 256; j += s) {
          for (int k = 0; k < 256; k += s) {
            colors[index++] = new Color(i,j,k);
            if (index == n) { break OUTER; }
          }
        }
      }
    }
    return colors;
  }

  public static boolean isMacOSX() {
    return System.getProperty("os.name").toLowerCase().startsWith("mac os x");
  }

