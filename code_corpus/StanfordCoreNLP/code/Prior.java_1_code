public class Prior {
  // Map<String, int> maps field names to indexes in the matrix
  private Map fieldIndices;
  private String[] indexFields;

  // n-dimensional boolean matrix. There will be 2^n entries in the matrix.
  private double[] matrix;

  public Prior(BufferedReader reader) throws IOException {
    String line;
    line = reader.readLine();
    if (line == null) {
      throw new IOException();
    }
    indexFields = line.split("\\s+");
    fieldIndices = new HashMap();
    for (int i = 0; i < indexFields.length; ++i) {
      fieldIndices.put(indexFields[i], Integer.valueOf(i));
    }
    if (indexFields.length < 1 || indexFields.length > 31) {
      throw new IOException("Invalid number of fields, should be >=1 and <= 31");
    }
    int matrixSize = 1 << indexFields.length;
    matrix = new double[matrixSize];
    int matrixIdx = 0;
    while (matrixIdx < matrix.length && (line = reader.readLine()) != null) {
      String[] tokens = line.split("\\s+");
      for (int t = 0; matrixIdx < matrix.length && t < tokens.length; ++t) {
        matrix[matrixIdx++] = Double.parseDouble(tokens[t]);
      }
    }
  }

