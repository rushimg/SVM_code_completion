  public List<SemanticGraphEdge> edgeListSorted() {
    ArrayList<SemanticGraphEdge> edgeList =
      new ArrayList<SemanticGraphEdge>();
    for (SemanticGraphEdge edge : edgeIterable()) {
      edgeList.add(edge);
    }
    Collections.sort(edgeList, SemanticGraphEdge.orderByTargetComparator());
    return edgeList;
  }

  public Iterable<SemanticGraphEdge> edgeIterable() {
    return graph.edgeIterable();
  }

  public Iterator<SemanticGraphEdge> outgoingEdgeIterator(IndexedWord v) {
    return graph.outgoingEdgeIterator(v);
  }

  public Iterable<SemanticGraphEdge> outgoingEdgeIterable(IndexedWord v) {
    return graph.outgoingEdgeIterable(v);
  }

  public Iterator<SemanticGraphEdge> incomingEdgeIterator(IndexedWord v) {
    return graph.incomingEdgeIterator(v);
  }

  public Iterable<SemanticGraphEdge> incomingEdgeIterable(IndexedWord v) {
    return graph.incomingEdgeIterable(v);
  }

  public List<SemanticGraphEdge> outgoingEdgeList(IndexedWord v) {
    List<SemanticGraphEdge> edges = new ArrayList<SemanticGraphEdge>();
    for (SemanticGraphEdge edge : outgoingEdgeIterable(v)) {
      edges.add(edge);
    }
    return edges;
  }

  public List<SemanticGraphEdge> incomingEdgeList(IndexedWord v) {
    List<SemanticGraphEdge> edges = new ArrayList<SemanticGraphEdge>();
    for (SemanticGraphEdge edge : incomingEdgeIterable(v)) {
      edges.add(edge);
    }
    return edges;
  }

  public boolean isEmpty() {
    return graph.isEmpty();
  }

