  public void prettyPrint() {
    prettyPrint(System.out);
  }

  @Override
  public boolean equals(Object o) {
    if (!(o instanceof SemgrexPattern)) return false;
    return o.toString().equals(this.toString());
  }

  @Override
  public int hashCode() {
    // if (this == null) return 0;
    return this.toString().hashCode();
  }

  static final String PATTERN = "-pattern";
  static final String TREE_FILE = "-treeFile";
  static final String MODE = "-mode";
  static final String DEFAULT_MODE = "BASIC";
  static final String EXTRAS = "-extras";
    
  public static void help() {
    System.err.println("Possible arguments for SemgrexPattern:");
    System.err.println(PATTERN + ": what pattern to use for matching");
    System.err.println(TREE_FILE + ": a file of trees to process");
    System.err.println(MODE + ": what mode for dependencies.  basic, collapsed, or ccprocessed.  To get 'noncollapsed', use basic with extras");
    System.err.println(EXTRAS + ": whether or not to use extras");
    System.err.println();
    System.err.println(PATTERN + " is required");
  }

