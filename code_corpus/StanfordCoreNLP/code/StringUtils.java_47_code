  public static Map<String, Object> parseCommandLineArguments(String[] args, boolean parseNumbers) {
    Map<String, Object> result = Generics.newHashMap();
    for (int i = 0; i < args.length; i++) {
      String key = args[i];
      if (key.charAt(0) == '-') {
        if (i + 1 < args.length) {
          String value = args[i + 1];
          if (value.charAt(0) != '-') {
            if (parseNumbers) {
              Object numericValue = value;
              try {
                numericValue = Double.parseDouble(value);
              } catch (NumberFormatException e2) {
                // ignore
              }
              result.put(key, numericValue);
            } else {
              result.put(key, value);
            }
            i++;
          } else {
            result.put(key, null);
          }
        } else {
          result.put(key, null);
        }
      }
    }
    return result;
  }

  public static String stripNonAlphaNumerics(String orig) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < orig.length(); i++) {
      char c = orig.charAt(i);
      if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {
        sb.append(c);
      }
    }
    return sb.toString();
  }

  public static String stripSGML(String orig) {
      Matcher sgmlMatcher = sgmlPattern.matcher(orig);
      return sgmlMatcher.replaceAll("");
  }

  public static void printStringOneCharPerLine(String s) {
    for (int i = 0; i < s.length(); i++) {
      int c = s.charAt(i);
      System.out.println(c + " \'" + (char) c + "\' ");
    }
  }

  public static String escapeString(String s, char[] charsToEscape, char escapeChar) {
    StringBuilder result = new StringBuilder();
    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);
      if (c == escapeChar) {
        result.append(escapeChar);
      } else {
        for (char charToEscape : charsToEscape) {
          if (c == charToEscape) {
            result.append(escapeChar);
            break;
          }
        }
      }
      result.append(c);
    }
    return result.toString();
  }

