  public static Properties argsToPropertiesWithResolve(String[] args) {
    LinkedHashMap<String, String> result = new LinkedHashMap<String, String>();
    Map<String, String> existingArgs = new LinkedHashMap<String, String>();

    for (int i = 0; i < args.length; i++) {
      String key = args[i];
      if (key.length() > 0 && key.charAt(0) == '-') { // found a flag
        if (key.length() > 1 && key.charAt(1) == '-')
          key = key.substring(2); // strip off 2 hyphens
        else
          key = key.substring(1); // strip off the hyphen

        int max = 1;
        int min = 0;
        List<String> flagArgs = new ArrayList<String>();
        // cdm oct 2007: add length check to allow for empty string argument!
        for (int j = 0; j < max && i + 1 < args.length && (j < min || args[i + 1].length() == 0 || args[i + 1].charAt(0) != '-'); i++, j++) {
          flagArgs.add(args[i + 1]);
        }

        if (flagArgs.isEmpty()) {
          existingArgs.put(key, "true");
        } else {

          if (key.equalsIgnoreCase(PROP) || key.equalsIgnoreCase(PROPS) || key.equalsIgnoreCase(PROPERTIES) || key.equalsIgnoreCase(ARGUMENTS) || key.equalsIgnoreCase(ARGS)) {
            for(String flagArg: flagArgs)
              result.putAll(propFileToLinkedHashMap(flagArg, existingArgs));

            existingArgs.clear();
          } else
            existingArgs.put(key, join(flagArgs, " "));
        }
      }
    }
    result.putAll(existingArgs);

    for (Entry<String, String> o : result.entrySet()) {
      String val = resolveVars(o.getValue(), result);
      result.put(o.getKey(), val);
    }
    Properties props = new Properties();
    props.putAll(result);
    return props;
  }

