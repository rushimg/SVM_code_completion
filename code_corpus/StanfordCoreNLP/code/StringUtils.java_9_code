  public static boolean matches(String str, String regex) {
    return Pattern.compile(regex).matcher(str).matches();
  }


  public static Set<String> stringToSet(String str, String delimiter)
  {
    Set<String> ret = null;
    if (str != null) {
      String[] fields = str.split(delimiter);
      ret = Generics.newHashSet(fields.length);
      for (String field:fields) {
        field = field.trim();
        ret.add(field);
      }
    }
    return ret;
  }


  public static String joinWords(Iterable<? extends HasWord> l, String glue) {
    StringBuilder sb = new StringBuilder();
    boolean first = true;
    for (HasWord o : l) {
      if ( ! first) {
        sb.append(glue);
      } else {
        first = false;
      }
      sb.append(o.word());
    }
    return sb.toString();
  }


  public static <E> String join(List<? extends E> l, String glue, Function<E,String> toStringFunc, int start, int end) {
    StringBuilder sb = new StringBuilder();
    boolean first = true;
    start = Math.max(start, 0);
    end = Math.min(end, l.size());
    for (int i = start; i < end; i++) {
      if ( ! first) {
        sb.append(glue);
      } else {
        first = false;
      }
      sb.append(toStringFunc.apply(l.get(i)));
    }
    return sb.toString();
  }

  public static String joinWords(List<? extends HasWord> l, String glue, int start, int end) {
    return join(l, glue, new Function<HasWord, String>() {
      public String apply(HasWord in) {
        return in.word();
      }
    }, start, end);
  }

  public static final Function<Object,String> DEFAULT_TOSTRING = new Function<Object, String>() {
    @Override
    public String apply(Object in) {
      return in.toString();
    }
  };

  public static String joinFields(List<? extends CoreMap> l, final Class field, final String defaultFieldValue,
                                  String glue, int start, int end, final Function<Object,String> toStringFunc) {
    return join(l, glue, new Function<CoreMap, String>() {
      public String apply(CoreMap in) {
        Object val = in.get(field);
        return (val != null)? toStringFunc.apply(val):defaultFieldValue;
      }
    }, start, end);
  }

  public static String joinFields(List<? extends CoreMap> l, final Class field, final String defaultFieldValue,
                                  String glue, int start, int end) {
    return joinFields(l, field, defaultFieldValue, glue, start, end, DEFAULT_TOSTRING);
  }

  public static String joinFields(List<? extends CoreMap> l, final Class field, final Function<Object,String> toStringFunc) {
    return joinFields(l, field, "-", " ", 0, l.size(), toStringFunc);
  }

  public static String joinFields(List<? extends CoreMap> l, final Class field) {
    return joinFields(l, field, "-", " ", 0, l.size());
  }

  public static String joinMultipleFields(List<? extends CoreMap> l, final Class[] fields, final String defaultFieldValue,
                                          final String fieldGlue, String glue, int start, int end, final Function<Object,String> toStringFunc) {
    return join(l, glue, new Function<CoreMap, String>() {
      public String apply(CoreMap in) {
        StringBuilder sb = new StringBuilder();
        for (Class field: fields) {
          if (sb.length() > 0) {
            sb.append(fieldGlue);
          }
          Object val = in.get(field);
          String str = (val != null)? toStringFunc.apply(val):defaultFieldValue;
          sb.append(str);
        }
        return sb.toString();
      }
    }, start, end);
  }

  public static String joinMultipleFields(List<? extends CoreMap> l, final Class[] fields, final Function<Object,String> toStringFunc) {
    return joinMultipleFields(l, fields, "-", "/", " ", 0, l.size(), toStringFunc);
  }

  public static String joinMultipleFields(List<? extends CoreMap> l, final Class[] fields, final String defaultFieldValue,
                                          final String fieldGlue, String glue, int start, int end) {
    return joinMultipleFields(l, fields, defaultFieldValue, fieldGlue, glue, start, end, DEFAULT_TOSTRING);
  }

  public static String joinMultipleFields(List<? extends CoreMap> l, final Class[] fields) {
    return joinMultipleFields(l, fields, "-", "/", " ", 0, l.size());
  }

