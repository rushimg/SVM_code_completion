  private void getFeaturesNew() {
    // todo: Change to rethrow a RuntimeIOException.
    // todo: can fnumArr overflow?
    try {
      System.err.println("TaggerExperiments.getFeaturesNew: initializing fnumArr.");
      fnumArr = new byte[xSize][ySize]; // what is the maximum number of active features
      File hFile = File.createTempFile("temp",".x", new File("./"));
      RandomAccessFile hF = new RandomAccessFile(hFile, "rw");
      System.err.println("  length of sTemplates keys: " + sTemplates.size());
      System.err.println("getFeaturesNew adding features ...");
      int current = 0;
      int numFeats = 0;
      final boolean VERBOSE = false;
      for (FeatureKey fK : sTemplates) {
        int numF = fK.num;
        int[] xValues;
        Pair<Integer, String> wT = new Pair<Integer, String>(numF, fK.val);
        xValues = tFeature.getXValues(wT);
        if (xValues == null) {
          System.err.println("  xValues is null: " + fK.toString()); //  + " " + i
          continue;
        }
        int numEvidence = 0;
        int y = maxentTagger.tags.getIndex(fK.tag);
        for (int xValue : xValues) {

          if (maxentTagger.occurringTagsOnly) {
            //check whether the current word in x has occurred with y
            String word = ExtractorFrames.cWord.extract(tHistories.getHistory(xValue));
            if (maxentTagger.dict.getCount(word, fK.tag) == 0) {
              continue;
            }
          }
          if (maxentTagger.possibleTagsOnly) {
            String word = ExtractorFrames.cWord.extract(tHistories.getHistory(xValue));
            String[] tags = maxentTagger.dict.getTags(word);
            Set<String> s = Generics.newHashSet(Arrays.asList(maxentTagger.tags.deterministicallyExpandTags(tags)));
            if(DEBUG)
              System.err.printf("possible tags for %s: %s\n", word, Arrays.toString(s.toArray()));
            if(!s.contains(fK.tag))
              continue;
          }
          numEvidence += this.px[xValue];
        }

        if (populated(numF, numEvidence)) {
          int[] positions = tFeature.getPositions(fK);
          if (maxentTagger.occurringTagsOnly || maxentTagger.possibleTagsOnly) { // TODO
            positions = null;
          }

          if (positions == null) {
            // write this in the file and create a TaggerFeature for it
            //int numElem
            int numElements = 0;

            for (int x : xValues) {
              if (maxentTagger.occurringTagsOnly) {
                //check whether the current word in x has occurred with y
                String word = ExtractorFrames.cWord.extract(tHistories.getHistory(x));
                if (maxentTagger.dict.getCount(word, fK.tag) == 0) {
                  continue;
                }
              }
              if(maxentTagger.possibleTagsOnly) {
                String word = ExtractorFrames.cWord.extract(tHistories.getHistory(x));
                String[] tags = maxentTagger.dict.getTags(word);
                Set<String> s = Generics.newHashSet(Arrays.asList(maxentTagger.tags.deterministicallyExpandTags(tags)));
                if(!s.contains(fK.tag))
                  continue;
              }
              numElements++;

              hF.writeInt(x);
              fnumArr[x][y]++;
            }
            TaggerFeature tF = new TaggerFeature(current, current + numElements - 1, fK,
                                                 maxentTagger.getTagIndex(fK.tag), this);
            tFeature.addPositions(current, current + numElements - 1, fK);
            current = current + numElements;
            feats.add(tF);
            if (VERBOSE) {
              System.err.println("  added feature with key " + fK.toString() + " has support " + numElements);
            }
          } else {

            for(int x : xValues) {
              fnumArr[x][y]++;
            }
            // this is the second time to write these values
            TaggerFeature tF = new TaggerFeature(positions[0], positions[1], fK,
                                                 maxentTagger.getTagIndex(fK.tag), this);
            feats.add(tF);
            if (VERBOSE) {
              System.err.println("  added feature with key " + fK.toString() + " has support " + xValues.length);
            }
          }

          // TODO: rearrange some of this code, such as not needing to
          // look up the tag # in the index
          if (maxentTagger.fAssociations.size() <= fK.num) {
            for (int i = maxentTagger.fAssociations.size(); i <= fK.num; ++i) {
              maxentTagger.fAssociations.add(Generics.<String, int[]>newHashMap());
            }
          }
          Map<String, int[]> fValueAssociations = maxentTagger.fAssociations.get(fK.num);
          int[] fTagAssociations = fValueAssociations.get(fK.val);
          if (fTagAssociations == null) {
            fTagAssociations = new int[ySize];
            for (int i = 0; i < ySize; ++i) {
              fTagAssociations[i] = -1;
            }
            fValueAssociations.put(fK.val, fTagAssociations);
          }
          fTagAssociations[maxentTagger.tags.getIndex(fK.tag)] = numFeats;

          numFeats++;
        }

      } // foreach FeatureKey fK
      // read out the file and put everything in an array of ints stored in Feats
      tFeature.release();
      feats.xIndexed = new int[current];
      hF.seek(0);
      int current1 = 0;
      while (current1 < current) {
        feats.xIndexed[current1] = hF.readInt();
        current1++;
      }
      System.err.println("  total feats: " + sTemplates.size() + ", populated: " + numFeats);
      hF.close();
      hFile.delete();

      // what is the maximum number of active features per pair
      int max = 0;
      int maxGt = 0;
      int numZeros = 0;
      for (int x = 0; x < xSize; x++) {
        int numGt = 0;
        for (int y = 0; y < ySize; y++) {
          if (fnumArr[x][y] > 0) {
            numGt++;
            if (max < fnumArr[x][y]) {
              max = fnumArr[x][y];
            }
          } else {
            // if 00
            numZeros++;
          }
        }
        if (maxGt < numGt) {
          maxGt = numGt;
        }
      } // for x

      System.err.println("  Max features per x,y pair: " + max);
      System.err.println("  Max non-zero y values for an x: " + maxGt);
      System.err.println("  Number of non-zero feature x,y pairs: " +
      System.err.println("  Number of zero feature x,y pairs: " + numZeros);
      System.err.println("end getFeaturesNew.");
    } catch (Exception e) {
      e.printStackTrace();
    }
  }


  private void hashHistories() {
    int fAll = maxentTagger.extractors.size() + maxentTagger.extractorsRare.size();
    int fGeneral = maxentTagger.extractors.size();
    System.err.println("Hashing histories ...");
    for (int x = 0; x < xSize; x++) {
      History h = tHistories.getHistory(x);
      if (x > 0 && x % 10000 == 0) {
        System.err.printf("%d ",x);
        if (x % 100000 == 0) { System.err.println(); }
      }
      int fSize = (maxentTagger.isRare(ExtractorFrames.cWord.extract(h)) ? fAll : fGeneral);
      for (int i = 0; i < fSize; i++) {
        tFeature.addPrev(i, h);
      }
    } // for x
    // now for the populated ones
    System.err.println();
    System.err.println("Hashed " + xSize + " histories.");
    System.err.println("Hashing populated histories ...");
    for (int x = 0; x < xSize; x++) {
      History h = tHistories.getHistory(x);
      if (x > 0 && x % 10000 == 0) {
        System.err.print(x + " ");
        if (x % 100000 == 0) { System.err.println(); }
      }
      int fSize = (maxentTagger.isRare(ExtractorFrames.cWord.extract(h)) ? fAll : fGeneral);
      for (int i = 0; i < fSize; i++) {
        tFeature.add(i, h, x); // write this to check whether to add
      }
    } // for x
    System.err.println();
    System.err.println("Hashed populated histories.");
  }


  protected boolean populated(int fNo, int size) {
    return isPopulated(fNo, size, maxentTagger);
  }

  protected static boolean isPopulated(int fNo, int size, MaxentTagger maxentTagger) {
    // Feature number 0 is hard-coded as the current word feature, which has a special threshold
    if (fNo == 0) {
      return (size > maxentTagger.curWordMinFeatureThresh);
    } else if (fNo < maxentTagger.extractors.size()) {
      return (size > maxentTagger.minFeatureThresh);
    } else {
      return (size > maxentTagger.rareWordMinFeatureThresh);
    }
  }

  private void initTemplatesNew() {
    maxentTagger.dict.setAmbClasses(maxentTagger.ambClasses, maxentTagger.veryCommonWordThresh, maxentTagger.tags);
  }


  // Add a new feature key in a hashtable of feature templates
  private void addTemplatesNew(History h, String tag) {
    // Feature templates general

    for (int i = 0; i < numFeatsGeneral; i++) {
      String s = maxentTagger.extractors.extract(i, h);
      if (s.equals(zeroSt)) {
        continue;
      } //do not add the feature
      //iterate over tags in dictionary
      if (maxentTagger.alltags) {
        int numTags = maxentTagger.numTags();
        for (int j = 0; j < numTags; j++) {

          String tag1 = maxentTagger.getTag(j);

          FeatureKey key = new FeatureKey(i, s, tag1);

          if (!maxentTagger.extractors.get(i).precondition(tag1)) {
            continue;
          }

          add(key);
        }
      } else {
        //only this tag
        FeatureKey key = new FeatureKey(i, s, tag);

        if (!maxentTagger.extractors.get(i).precondition(tag)) {
          continue;
        }

        add(key);
      }
    }
  }


  private void addRareTemplatesNew(History h, String tag) {
    // Feature templates rare

    if (!(maxentTagger.isRare(ExtractorFrames.cWord.extract(h)))) {
      return;
    }
    int start = numFeatsGeneral;
    for (int i = start; i < numFeatsAll; i++) {
      String s = maxentTagger.extractorsRare.extract(i - start, h);

      if (s.equals(zeroSt)) {
        continue;
      } //do not add the feature
      if (maxentTagger.alltags) {
        int numTags = maxentTagger.numTags();
        for (int j = 0; j < numTags; j++) {

          String tag1 = maxentTagger.getTag(j);

          FeatureKey key = new FeatureKey(i, s, tag1);

          if (!maxentTagger.extractorsRare.get(i - start).precondition(tag1)) {
            continue;
          }

          add(key);
        }
      } else {
        //only this tag
        FeatureKey key = new FeatureKey(i, s, tag);

        if (!maxentTagger.extractorsRare.get(i - start).precondition(tag)) {
          continue;
        }

        add(key);
      }
    }
  }

  HistoryTable getHistoryTable() {
    return tHistories;
  }


