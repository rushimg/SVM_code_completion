  private static String toString(Collection<TypedDependency> dependencies, boolean extraSep, boolean includeTags) {
    String labelFormat = (includeTags) ? "value-tag-index" : "value-index";
    StringBuilder buf = new StringBuilder();
    if (extraSep) {
      List<TypedDependency> extraDeps =  new ArrayList<TypedDependency>();
      for (TypedDependency td : dependencies) {
        if (td.extra()) {
          extraDeps.add(td);
        } else {
          buf.append(td.toString(labelFormat)).append('\n');
        }
      }
      // now we print the separator for extra dependencies, and print these if there are some
      if (!extraDeps.isEmpty()) {
        buf.append("======\n");
        for (TypedDependency td : extraDeps) {
          buf.append(td.toString(labelFormat)).append('\n');
        }
      }
    } else {
      for (TypedDependency td : dependencies) {
        buf.append(td.toString(labelFormat)).append('\n');
      }
    }
    return buf.toString();
  }

  // NO OUTSIDE USE
  private static String toReadableString(Collection<TypedDependency> dependencies) {
    StringBuilder buf = new StringBuilder();
    buf.append(String.format("%-20s%-20s%-20s%n", "dep", "reln", "gov"));
    buf.append(String.format("%-20s%-20s%-20s%n", "---", "----", "---"));
    for (TypedDependency td : dependencies) {
      buf.append(String.format("%-20s%-20s%-20s%n", td.dep(), td.reln(), td.gov()));
    }
    return buf.toString();
  }

  // NO OUTSIDE USE
  private static String toXMLString(Collection<TypedDependency> dependencies, boolean includeTags) {
    StringBuilder buf = new StringBuilder("<dependencies style=\"typed\">\n");
    for (TypedDependency td : dependencies) {
      String reln = td.reln().toString();
      String gov = td.gov().value();
      String govTag = td.gov().label().tag();
      int govIdx = td.gov().index();
      String dep = td.dep().value();
      String depTag = td.dep().label().tag();
      int depIdx = td.dep().index();
      boolean extra = td.extra();
      // add an attribute if the node is a copy
      // (this happens in collapsing when different prepositions are conjuncts)
      String govCopy = "";
      Integer copyGov = td.gov().label.get(CoreAnnotations.CopyAnnotation.class);
      if (copyGov != null) {
        govCopy = " copy=\"" + copyGov + '\"';
      }
      String depCopy = "";
      Integer copyDep = td.dep().label.get(CoreAnnotations.CopyAnnotation.class);
      if (copyDep != null) {
        depCopy = " copy=\"" + copyDep + '\"';
      }
      String govTagAttribute = (includeTags && govTag != null) ? " tag=\"" + govTag + "\"" : "";
      String depTagAttribute = (includeTags && depTag != null) ? " tag=\"" + depTag + "\"" : "";
      // add an attribute if the typed dependency is an extra relation (do not preserve the tree structure)
      String extraAttr = "";
      if (extra) {
        extraAttr = " extra=\"yes\"";
      }
      buf.append("  <dep type=\"").append(XMLUtils.escapeXML(reln)).append('\"').append(extraAttr).append(">\n");
      buf.append("    <governor idx=\"").append(govIdx).append('\"').append(govCopy).append(govTagAttribute).append('>').append(XMLUtils.escapeXML(gov)).append("</governor>\n");
      buf.append("    <dependent idx=\"").append(depIdx).append('\"').append(depCopy).append(depTagAttribute).append('>').append(XMLUtils.escapeXML(dep)).append("</dependent>\n");
      buf.append("  </dep>\n");
    }
    buf.append("</dependencies>");
    return buf.toString();
  }

