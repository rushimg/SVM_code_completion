  void loadPreferences() {
    //general parameters
    InputPanel.getInstance().enableTsurgeon(Preferences.getEnableTsurgeon());
    MatchesPanel.getInstance().setShowOnlyMatchedPortion(Preferences.getMatchPortionOnly());
    //display stuff
    MatchesPanel.getInstance().setHighlightColor(Preferences.getHighlightColor());
    InputPanel.getInstance().setNumRecentPatterns(Preferences.getHistorySize());
    MatchesPanel.getInstance().setMaxMatches(Preferences.getMaxMatches());

    //tree display stuff
    DisplayMatchesPanel.getInstance().setMatchedColor(Preferences.getMatchedColor());
    DisplayMatchesPanel.getInstance().setDefaultColor(Preferences.getTreeColor());
    DisplayMatchesPanel.getInstance().setFontName(Preferences.getFont());
    MatchesPanel.getInstance().setFontName(Preferences.getFont());

    int fontSize = Preferences.getFontSize();
    if(fontSize != 0)
      DisplayMatchesPanel.getInstance().setFontSize(Preferences.getFontSize());

    //advanced stuff
    HeadFinder hf = Preferences.getHeadFinder();
    InputPanel.getInstance().setHeadFinder(hf);

    TreeReaderFactory trf = Preferences.getTreeReaderFactory();
    FilePanel.getInstance().setTreeReaderFactory(trf);

    String hfName = hf.getClass().getSimpleName();
    String trfName = trf.getClass().getSimpleName();
    String encoding = Preferences.getEncoding();
    if(encoding != null && !encoding.equals(""))
      FileTreeModel.setCurEncoding(encoding);
    if (PreferencesPanel.isChinese(hfName, trfName))
      setChineseFont();
    else if (PreferencesPanel.isArabic(hfName, trfName))
      setArabicFont();

    if (preferenceDialog == null)
      preferenceDialog = new PreferencesPanel(this);
    preferenceDialog.checkEncodingAndDisplay(hfName, trfName);
  }

  private static void setChineseFont() {
    Thread t = new Thread() {
      @Override
      public void run() {
        List<Font> fonts = FontDetector.supportedFonts(FontDetector.CHINESE);
        String fontName = "";
        if ( ! fonts.isEmpty()) {
          fontName = fonts.get(0).getName();
        } else if (FontDetector.hasFont("Watanabe Mincho")) {
          fontName = "Watanabe Mincho";
        }

        if(!fontName.equals("")) {
          DisplayMatchesPanel.getInstance().setFontName(fontName);
          MatchesPanel.getInstance().setFontName(fontName);
        }
      }
    };
    t.start();
  }

  private static void setArabicFont() {
    Thread t = new Thread() {
      @Override
      public void run() {
        List<Font> fonts = FontDetector.supportedFonts(FontDetector.ARABIC);
        String fontName = "";
        if (fonts.size() > 0) {
          fontName = fonts.get(0).getName();
        }
        if(!fontName.equals("")) {
          DisplayMatchesPanel.getInstance().setFontName(fontName);
          MatchesPanel.getInstance().setFontName(fontName);
        }
      }
    };
    t.start();
  }

