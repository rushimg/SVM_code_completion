  public List<Match<K,V>> segment(List<K> list, int start, int end, Function<? super Match<K,V>, Double> scoreFunc) {
    List<Match<K,V>> nonOverlapping = findNonOverlapping(list, start, end, scoreFunc);
    List<Match<K,V>> segments = new ArrayList<Match<K,V>>(nonOverlapping.size());
    int last = 0;
    for (Match<K,V> match:nonOverlapping) {
      if (match.begin > last) {
        // Create empty match and add to segments
        Match<K,V> empty = new Match<K,V>(list.subList(last, match.begin), null, last, match.begin);
        segments.add(empty);
      }
      segments.add(match);
      last = match.end;
    }
    if (list.size() > last) {
      Match<K,V> empty = new Match<K,V>(list.subList(last, list.size()), null, last, list.size());
      segments.add(empty);
    }
    return segments;
  }

  public List<Match<K,V>> segment(List<K> list, Function<? super Match<K,V>, Double> scoreFunc) {
    return segment(list, 0, list.size(), scoreFunc);
  }

