public class TwoDimensionalMap<K1, K2, V> implements Serializable, Iterable<TwoDimensionalMap.Entry<K1, K2, V>> {

  private static final long serialVersionUID = 2L;
  private final MapFactory<K1, Map<K2, V>> mf1;
  private final MapFactory<K2, V> mf2;
  Map<K1, Map<K2, V>> map;
  
  public int size() {
    int size = 0;
    for (Map.Entry<K1, Map<K2, V>> entry : map.entrySet()) {
      size += (entry.getValue().size());
    }
    return size;
  }

  public boolean isEmpty() {
    for (Map.Entry<K1, Map<K2, V>> entry : map.entrySet()) {
      if (!entry.getValue().isEmpty()) {
        return false;
      }
    }
    return true;
  }

  public V put(K1 key1, K2 key2, V value) {
    Map<K2, V> m = getMap(key1);
    return m.put(key2, value);
  }

  // adds empty hashmap for key key1
  public void put(K1 key1) {
    map.put(key1, mf2.newMap());
  }

  public boolean contains(K1 key1, K2 key2) {
    if (!containsKey(key1)) {
      return false;
    }
    return getMap(key1).containsKey(key2);
  }

  public V get(K1 key1, K2 key2) {
    Map<K2, V> m = getMap(key1);
    return m.get(key2);
  }

  public V remove(K1 key1, K2 key2) {
    return get(key1).remove(key2);
  }

