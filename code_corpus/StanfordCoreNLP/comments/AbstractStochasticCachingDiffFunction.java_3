  /**
   * calculateStochastic needs to calculate a stochastic approximation to the derivative and value of
   *    of a function for a given batch of the data.  The approximation to the derivative must be stored
   *    in the array <code> derivative </code>, the approximation to the value in <code> value </code>
   *    and the approximation to the Hessian vector product H.v in the array <code> HdotV </code>.  Note
   *    that the hessian vector product is used primarily with the Stochastic Meta Descent optimization
   *    routine <code> SMDMinimizer </code>.
   *
   *  Important: The stochastic approximation must be such that the sum of all stochastic calculations over
   *    each of the batches in the data must equal the full calculation.  i.e. for a data set of size 100
   *    the sum of the gradients for batches 1-10 , 11-20 , 21-30 .... 91-100 must be the same as the gradient
   *    for the full calculation (at the very least in expectation).  Be sure to take into account the priors.
   *
   *
   * @param x           -  value to evaluate at
   * @param v           -  the vector for the Hessian vector product H.v
   * @param batch       -  an array containing the indices of the data to use in the calculation, this array is being calculated
   *                        internal to the abstract, and only needs to be handled not generated by the implementation.
   */
