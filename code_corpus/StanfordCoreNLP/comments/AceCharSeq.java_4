  /*
   * private AceToken makePhrase(Vector<AceToken> tokens, Span span) {
   * StringBuffer word = new StringBuffer(); StringBuffer lemma = new
   * StringBuffer(); StringBuffer pos = new StringBuffer(); StringBuffer chunk =
   * new StringBuffer(); StringBuffer nerc = new StringBuffer();
   * 
   * for(int i = span.mStart; i <= span.mEnd; i ++){ if(i > span.mStart){
   * word.append("_"); lemma.append("_"); pos.append("_"); chunk.append("_");
   * nerc.append("_"); }
   * 
   * AceToken tok = tokens.get(i);
   * word.append(AceToken.WORDS.get(tok.getWord()));
   * lemma.append(AceToken.LEMMAS.get(tok.getLemma()));
   * pos.append(AceToken.OTHERS.get(tok.getPos()));
   * chunk.append(AceToken.OTHERS.get(tok.getChunk()));
   * nerc.append(AceToken.OTHERS.get(tok.getNerc())); }
   * 
   * AceToken phrase = new AceToken(word.toString(), lemma.toString(),
   * pos.toString(), chunk.toString(), nerc.toString(), null, null, -1);
   * 
   * //System.err.println("Constructed phrase: " + phrase.display()); return
   * phrase; }
   */
