  /**
   * Returns a new empty BasicDocument with the same title, labels, and
   * tokenizer as this Document. This is useful when you want to make a
   * new Document that's like the old document but
   * can be filled with new text (e.g. if you're transforming
   * the contents non-destructively).
   * <p/>
   * <p>Subclasses that want to preserve extra state should
   * override this method and add the extra state to the new document before
   * returning it. The new BasicDocument is created by calling
   * <tt>getClass().newInstance()</tt> so it should be of the correct subclass,
   * and thus you should be able to cast it down and add extra meta data directly.
   * Note however that in the event an Exception is thrown on instantiation
   * (e.g. if your subclass doesn't have a public empty constructor--it should btw!)
   * then a new <tt>BasicDocument</tt> is used instead. Thus if you want to be paranoid
   * (or some would say "correct") you should check that your instance is of
   * the correct sub-type as follows (this example assumes the subclass is called
   * <tt>NumberedDocument</tt> and it has the additional <tt>number</tt>property):
   * <pre>Document blankDocument=super.blankDocument();
   * if(blankDocument instanceof NumberedDocument) {
   *     ((NumberedDocument)blankDocument).setNumber(getNumber());</pre>
   */
