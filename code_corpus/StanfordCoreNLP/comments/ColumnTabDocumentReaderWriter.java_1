/**
 * Version of ColumnDocumentReaderAndWriter that doesn't read in entire file and
 * stores it in memory before parsing it.
 *
 * Reads in one line at a time. Assumes that sequences are broken up by empty
 * lines.
 *
 * Also differs from ColumnDocumentReaderAndWriter in following ways:
 * <ul>
 *   <li>Splits on tabs (delimiterPattern)</li>
 *   <li>Replaces within field whitespaces with "_" (replaceWhitespace)</li>
 *   <li>Assumes that a line with just one column and starts
 *        with "* xxxxx" indicates the document id (hasDocId)</li>
 * </ul>
 *
 * Accepts the following properties
 * <table>
 *   <tr><th>Field</th><th>Type</th><th>Default</th><th>Description</th></tr>
 *   <tr><td><code>columns</code></td><td>String</td><td><code></code></td><td>Comma separated list of mapping between annotation (see {@link edu.stanford.nlp.ling.AnnotationLookup.KeyLookup}) and column index (starting from 0).  Example: <code>word=0,tag=1</code></td></tr>
 *   <tr><td><code>delimiter</code></td><td>String</td><td><code>\t</code></td><td>Regular expression for delimiter</td></tr>
 *   <tr><td><code>replaceWhitespace</code></td><td>Boolean</td><td><code>true</code></td><td>Replace whitespaces with "_"</td></tr>
 *   <tr><td><code>tokens</code></td><td>Class</td>
 *       <td>{@link edu.stanford.nlp.ling.CoreAnnotations.TokensAnnotation edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation}</td>
 *       <td>Annotation field for tokens</td></tr>
 *   <tr><td><code>tokenFactory</code></td><td>Class</td>
 *       <td>{@link CoreLabelTokenFactory edu.stanford.nlp.process.CoreLabelTokenFactory}</td>
 *       <td>Factory for creating tokens</td></tr>
 * </table>
 *
 * @author Angel Chang
 * @author Sonal Gupta (made the class generic)
 */
