/**
 * <code>GrammaticalRelation</code> is used to define a
 * standardized, hierarchical set of grammatical relations,
 * together with patterns for identifying them in
 * parse trees.<p>
 *
 * Each <code>GrammaticalRelation</code> has:
 * <ul>
 *   <li>A <code>String</code> short name, which should be a lowercase
 *       abbreviation of some kind.</li>
 *   <li>A <code>String</code> long name, which should be descriptive.</li>
 *   <li>A parent in the <code>GrammaticalRelation</code> hierarchy.</li>
 *   <li>A {@link Pattern <code>Pattern</code>} called
 *   <code>sourcePattern</code> which matches (parent) nodes from which
 *   this <code>GrammaticalRelation</code> could hold.  (Note: this is done
 *   with the Java regex Pattern <code>matches()</code> predicate: the pattern
 *   must match the
 *   whole node name, and <code>^</code> or <code>$</code> aren't needed.
 *   Tregex constructions like __ do not work. Use ".*" to be applicable
 *   at all nodes.)</li>
 *   <li>A list of zero or more {@link TregexPattern
 *   <code>TregexPattern</code>s} called <code>targetPatterns</code>,
 *   which describe the local tree structure which must hold between
 *   the source node and a target node for the
 *   <code>GrammaticalRelation</code> to apply. (Note: {@code tregex}
 *   regular expressions match with the {@code find()} method, while
 *   literal string label descriptions that are not regular expressions must
 *   be {@code equals()}.)</li>
 * </ul>
 *
 * The <code>targetPatterns</code> associated
 * with a <code>GrammaticalRelation</code> are designed as follows.
 * In order to recognize a grammatical relation X holding between
 * nodes A and B in a parse tree, we want to associate with
 * <code>GrammaticalRelation</code> X a {@link TregexPattern
 * <code>TregexPattern</code>} such that:
 * <ul>
 *   <li>the root of the pattern matches A, and</li>
 *   <li>the pattern includes a node labeled "target", which matches B.</li>
 * </ul>
 * For example, for the grammatical relation <code>PREDICATE</code>
 * which holds between a clause and its primary verb phrase, we might
 * want to use the pattern {@code "S < VP=target"}, in which the
 * root will match a clause and the node labeled <code>"target"</code>
 * will match the verb phrase.<p>
 *
 * For a given grammatical relation, the method {@link
 * GrammaticalRelation#getRelatedNodes <code>getRelatedNodes()</code>}
 * takes a <code>Tree</code> node as an argument and attempts to
 * return other nodes which have this grammatical relation to the
 * argument node.  By default, this method operates as follows: it
 * steps through the patterns in the pattern list, trying to match
 * each pattern against the argument node, until it finds some
 * matches.  If a pattern matches, all matching nodes (that is, each
 * node which corresponds to node label "target" in some match) are
 * returned as a list; otherwise the next pattern is tried.<p>
 *
 * For some grammatical relations, we need more sophisticated logic to
 * identify related nodes.  In such cases, {@link
 * GrammaticalRelation#getRelatedNodes <code>getRelatedNodes()</code>}
 * can be overridden on a per-relation basis using anonymous subclassing.<p>
 *
 * @see GrammaticalStructure
 * @see EnglishGrammaticalStructure
 * @see EnglishGrammaticalRelations
 * @see edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations
 *
 * @author Bill MacCartney
 * @author Galen Andrew (refactoring English-specific stuff)
 * @author Ilya Sherman (refactoring annotation-relation pairing)
 */
