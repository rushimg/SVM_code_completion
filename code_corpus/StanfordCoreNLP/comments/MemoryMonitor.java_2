  /**
   * This class offers a simple way to track the peak memory used by a program.
   * Simply launch a <code>PeakMemoryMonitor</code> as
   *
   * <blockquote><code>
   * Thread monitor = new Thread(new PeakMemoryMonitor());<br />
   * monitor.start()
   * </code></blockquote>
   *
   * and then when you want to stop monitoring, call
   *
   * <blockquote><code>
   * monitor.interrupt();
   * monitor.join();
   * </code></blockquote>
   *
   * You only need the last line if you want to be sure the monitor stops before
   * you move on in the code; and strictly speaking, you should surround the
   * <code>monitor.join()</code> call with a <code>try/catch</code> block, as
   * the <code>Thread</code> you are running could itself be interrupted, so you
   * should actually have something like
   *
   * <blockquote><code>
   * monitor.interrupt();
   * try {
   *   monitor.join();
   * } catch (InterruptedException ex) {
   *   // handle the exception
   * }
   * </code></blockquote>
   *
   * or else throw the exception.
   *
   * @author ilya
   */
