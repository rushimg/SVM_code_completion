/**
 * A SemgrexPattern is a <code>tgrep</code>-type pattern for matching node
 * configurations in one of the SemanticGraph structures.  Unlike
 * <code>tgrep</code> but like Unix <code>grep</code>, there is no pre-indexing
 * of the data to be searched.  Rather there is a linear scan through the graph
 * where matches are sought. <p/>
 *
 * SemgrexPattern instances can be matched against instances of the {@link
 * IndexedWord} class. <p/>
 *
 * A node is represented by a set of attributes and their values contained by
 * curly braces: {attr1:value1;attr2:value2;...}.  Therefore, {} represents any
 * node in the graph.  Attributes must be plain strings; values can be strings
 * or regular expressions blocked off by "/".  (I think regular expressions must
 * match the whole attribute value; so that /NN/ matches "NN" only, while /NN.* /
 * matches "NN", "NNS", "NNP", etc. --wcmac) <p/>
 *
 * For example, <code>{lemma:slice;tag:/VB.* /}</code> represents any verb nodes
 * with "slice" as their lemma.  Attributes are extracted using 
 * <code>edu.stanford.nlp.ling.AnnotationLookup</code>. <p/>
 *
 * The root of the graph can be marked by the $ sign, that is <code>{$}</code>
 * represents the root node. <p/>
 *
 * Relations are defined by a symbol representing the type of relationship and a
 * string or regular expression representing the value of the relationship. A
 * relationship string of <code>%</code> means any relationship.  It is
 * also OK simply to omit the relationship symbol altogether.
 * <p/>
 *
 * Currently supported node relations and their symbols: <p/>
 *
 * <table border = "1">
 * <tr><th>Symbol<th>Meaning
 * <tr><td>A &lt;reln B <td> A is the dependent of a relation reln with B
 * <tr><td>A &gt;reln B <td>A is the governer of a relation reln with B
 * <tr><td>A &lt;&lt;reln B <td>A is the dependent of a relation reln in a chain to B following dep-&gt;gov paths
 * <tr><td>A &gt;&gt;reln B <td>A is the governer of a relation reln in a chain to B following gov-&gt;dep paths
 * <tr><td>A x,y&lt;&lt;reln B <td>A is the dependent of a relation reln in a chain to B following dep-&gt;gov paths between distances of x and y
 * <tr><td>A x,y&gt;&gt;reln B <td>A is the governer of a relation reln in a chain to B following gov-&gt;dep paths between distances of x and y
 * <tr><td>A == B <td>A and B are the same nodes in the same graph
 * <tr><td>A @ B <td>A is aligned to B
 * </table>
 * <p/>
 *
 * In a chain of relations, all relations are relative to the first
 * node in the chain. For example, "<code>{} &gt;nsubj {} &gt;dobj
 * {}</code>" means "any node that is the governor of both a nsubj and
 * a dobj relation".  If instead what you want is a node that is the
 * governer of a nsubj relation with a node that is itself the
 * governer of dobj relation, you should write: "<code>{} &gt;nsubj
 * ({} &gt;dobj {})</code>". <p/>
 *
 * If a relation type is specified for the &lt;&lt; relation, the
 * relation type is only used for the first relation in the sequence.
 * Therefore, if B depends on A with the relation type foo, the
 * pattern <code>{} &lt;&lt;foo {}</code> will then match B and
 * everything that depends on B. <p/>
 *
 * Similarly, if a relation type is specified for the &gt;&gt;
 * relation, the relation type is only used for the last relation in
 * the sequence.  Therefore, if A governs B with the relation type
 * foo, the pattern <code>{} &gt;&gt;foo {}</code> will then match A
 * and all of the nodes which have a sequence leading to A. <p/>
 *
 * <h3>Boolean relational operators</h3>
 *
 * Relations can be combined using the '&amp;' and '|' operators, negated with
 * the '!' operator, and made optional with the '?' operator. <p/>
 *
 * Relations can be grouped using brackets '[' and ']'.  So the
 * expression
 *
 * <blockquote>
 * <code> {} [&lt;subj {} | &lt;agent {}] &amp; @ {} </code>
 * </blockquote>
 *
 * matches a node that is either the dep of a subj or agent relationship and
 * has an alignment to some other node.
 *
 * <p> Relations can be negated with the '!' operator, in which case the
 * expression will match only if there is no node satisfying the relation.
 *
 * <p> Relations can be made optional with the '?' operator.  This way the
 * expression will match even if the optional relation is not satisfied.
 *
 * <p> The operator ":" partitions a pattern into separate patterns,
 * each of which must be matched.  For example, the following is a
 * pattern where the matched node must have both "foo" and "bar" as
 * descendants:
 *
 * <blockquote>
 * <code> {}=a &gt;&gt; {word:foo} : {}=a &gt;&gt; {word:bar} </code>
 * </blockquote>
 *
 * This pattern could have been written
 *
 * <blockquote>
 * <code> {}=a &gt;&gt; {word:foo} &gt;&gt; {word:bar} </code>
 * </blockquote>
 *
 * However, for more complex examples, partitioning a pattern may make
 * it more readable.
 *
 * <p><h3>Naming nodes</h3>
 *
 * Nodes can be given names (a.k.a. handles) using '='.  A named node will
 * be stored in a map that maps names to nodes so that if a match is found, the
 * node corresponding to the named node can be extracted from the map.  For
 * example <code> ({tag:NN}=noun) </code> will match a singular noun node and
 * after a match is found, the map can be queried with the name to retrieved the
 * matched node using {@link SemgrexMatcher#getNode(String o)} with (String)
 * argument "noun" (<it>not</it> "=noun").  Note that you are not allowed to
 * name a node that is under the scope of a negation operator (the semantics
 * would be unclear, since you can't store a node that never gets matched to).
 * Trying to do so will cause a {@link ParseException} to be thrown. Named nodes
 * <it>can be put within the scope of an optionality operator</it>. <p/>
 *
 * Named nodes that refer back to previously named nodes need not have a node
 * description -- this is known as "backreferencing".  In this case, the
 * expression will match only when all instances of the same name get matched to
 * the same node.  For example: the pattern
 * <code>{} &gt;dobj ({} &gt; {}=foo) &gt;mod ({} &gt; {}=foo) </code>
 * will match a graph in which there are two nodes, <code>X</code> and
 * <code>Y</code>, for which <code>X</code> is the grandparent of
 * <code>Y</code> and there are two paths to <code>Y</code>, one of
 * which goes through a <code>dobj</code> and one of which goes
 * through a <code>mod</code>. <p/>
 *
 * <p><h3>Naming relations</h3>
 *
 * It is also possible to name relations.  For example, you can write the pattern
 * <code>{idx:1} &gt;=reln {idx:2}</code>  The name of the relation will then 
 * be stored in the matcher and can be extracted with <code>getRelnName("reln")</code>  
 * At present, though, there is no backreferencing capability such as with the 
 * named nodes; this is only useful when using the API to extract the name of the 
 * relation used when making the match.
 * <p/>
 * In the case of ancestor and descendant relations, the <b>last</b>
 * relation in the sequence of relations is the name used.  
 * <p/>
 *
 * @author Chloe Kiddon
 */
