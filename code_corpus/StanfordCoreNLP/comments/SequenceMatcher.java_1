/**
 * <p>Generic sequence matcher</p>
 *
 * <p>
 * Similar to Java's <code>Matcher</code> except it matches sequences over an arbitrary type <code>T</code>
 *   instead of characters
 * For a type <code>T</code> to be matchable, it has to have a corresponding <code>NodePattern<T></code> that indicates
 *    whether a node is matched or not
 * </p>
 *
 * <p>
 * A matcher is created as follows:
 * <pre><code>
 *   SequencePattern<T> p = SequencePattern<T>.compile("...");
 *   SequencePattern<T> m = p.getMatcher(List<T> sequence);
 * </code></pre>
 * </p>
 *
 * <p>
 * Functions for searching
 * <pre><code>
 *    boolean matches()
 *    boolean find()
 *    boolean find(int start)
 * </code></pre>
 * Functions for retrieving matched patterns
 * <pre><code>
 *    int groupCount()
 *    List&lt;T&gt; groupNodes(), List&lt;T&gt; groupNodes(int g)
 *    String group(), String group(int g)
 *    int start(), int start(int g), int end(), int end(int g)
 * </code></pre>
 * Functions for replacing
 * <pre><code>
 *    List&lt;T&gt; replaceFirst(List&lt;T&gt; seq), List replaceAll(List&lt;T&gt; seq)
 *    List&lt;T&gt; replaceFirstExtended(List&lt;MatchReplacement&lt;T&gt;&gt; seq), List&lt;T&gt; replaceAllExtended(List&lt;MatchReplacement&lt;T&gt;&gt; seq)
 * </code></pre>
 * Functions for defining the region of the sequence to search over
 *  (default region is entire sequence)
 * <pre><code>
 *     void region(int start, int end)
 *     int regionStart()
 *     int regionEnd()
 * </code></pre>
 * </p>
 *
 * <p>
 * NOTE: When find is used, matches are attempted starting from the specified start index of the sequence
 *   The match with the earliest starting index is returned. 
 * </p>
 *
 * @author Angel Chang
 */
