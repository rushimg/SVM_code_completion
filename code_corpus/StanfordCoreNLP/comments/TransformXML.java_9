  /**
   * Read XML from input stream and write XML to output stream,
   * while transforming text appearing inside the specified XML tags
   * by applying the specified {@link Function <code>Function</code>}.
   * Note that the <code>Function</code> you supply must be
   * prepared to accept <code>String</code>s as input; if your
   * <code>Function</code> doesn't handle <code>String</code>s, you
   * need to write a wrapper for it that does.
   * <p><i>Implementation notes:</i> The InputStream is assumed to already
   * be buffered if useful, and we need a stream, so that the XML decoder
   * can determine the correct character encoding of the XML file. The output
   * is to a Writer, and the provided Writer should again be buffered if
   * desirable.  Internally, this Writer is wrapped as a PrintWriter.
   *
   * @param tags an array of <code>String</code>s, each an XML entity
   *             within which the transformation should be applied
   * @param fn   the {@link Function <code>Function</code>} to apply
   * @param in   the <code>InputStream</code> to read from
   * @param w    the <code>Writer</code> to write to
   */
