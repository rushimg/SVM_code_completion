    private void setAcl(String bucketName, String key, String versionId, AccessControlList acl, AmazonWebServiceRequest originalRequest) {
        if (originalRequest == null) originalRequest = new GenericBucketRequest(bucketName);

        Request<AmazonWebServiceRequest> request = createRequest(bucketName, key, originalRequest, HttpMethodName.PUT);
        request.addParameter("acl", null);
        if (versionId != null) request.addParameter("versionId", versionId);

        byte[] aclAsXml = new AclXmlFactory().convertToXmlByteArray(acl);
        request.addHeader("Content-Type", "text/plain");
        request.addHeader("Content-Length", String.valueOf(aclAsXml.length));
        request.setContent(new ByteArrayInputStream(aclAsXml));

        invoke(request, voidResponseHandler, bucketName, key);
    }

    protected Signer createSigner(final Request<?> request,
                                  final String bucketName,
                                  final String key) {

        if (upgradeToSigV4()){
            if (v4Signer == null) {
                v4Signer = new AWSS3V4Signer();
                v4Signer.setServiceName(serviceName);
                v4Signer.setRegionName(regionName);
            }
            return v4Signer;
        }

        Signer signer = getSigner();

        if (signer instanceof S3Signer) {

            // The old S3Signer needs a method and path passed to its
            // constructor; if that's what we should use, getSigner()
            // will return a dummy instance and we need to create a
            // new one with the appropriate values for this request.

            String resourcePath =
                "/" +
                ((bucketName != null) ? bucketName + "/" : "") +
                ((key != null) ? key : "");

            return new S3Signer(request.getHttpMethod().toString(),
                                resourcePath);
        }

        return signer;
    }

    private boolean upgradeToSigV4() {

        // User has said to always use SigV4 - this will fail if the user
        // attempts to read from or write to a non-US-Standard bucket without
        // explicitly setting the region.

        if (System.getProperty(SDKGlobalConfiguration
                .ENFORCE_S3_SIGV4_SYSTEM_PROPERTY) != null) {

            return true;
        }

        // User has said to enable SigV4 if it's safe - this will fall back
        // to SigV2 if the endpoint has not been set to one of the explicit
        // regional endpoints because we can't be sure it will work otherwise.

        if (System.getProperty(SDKGlobalConfiguration
                .ENABLE_S3_SIGV4_SYSTEM_PROPERTY) != null
            && !endpoint.getHost().endsWith(Constants.S3_HOSTNAME)) {

            return true;
        }

        // Go with the default (SigV4 only if we know we're talking to an
        // endpoint that requires SigV4).

        return false;
    }

