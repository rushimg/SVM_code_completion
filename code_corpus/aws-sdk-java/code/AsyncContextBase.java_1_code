package com.amazonaws.services.simpleworkflow.flow.core;

import java.util.ArrayList;
import java.util.List;

abstract class AsyncContextBase implements Runnable, AsyncParentContext {

    private final static ThreadLocal<AsyncParentContext> currentContext = new ThreadLocal<AsyncParentContext>();

    static AsyncParentContext current() {
        AsyncParentContext result = currentContext.get();
        if (result == null) {
            throw new IllegalStateException("Attempt to execute asynchronous code outside of AsyncScope.doAsync() method");
        }
        return result;
    }

    static void setCurrent(AsyncParentContext newCurrent) {
        currentContext.set(newCurrent);
    }

    private final boolean daemon;

    protected final AsyncParentContext parent;

    protected AsyncStackTrace stackTrace;

    private final Promise<?>[] waitFor;
    
    private String name;

    public AsyncContextBase(Boolean daemon, Promise<?>[] waitFor, int skipStackLines) {
        this(current(), daemon, waitFor, skipStackLines);
    }

    public AsyncContextBase(AsyncParentContext parent, Boolean daemon, Promise<?>[] waitFor, int skipStackLines) {
        this.parent = parent;
        this.daemon = daemon == null ? parent.getDaemonFlagForHeir() : daemon;
        this.waitFor = waitFor;
        this.name = parent == null ? null : parent.getName();
        AsyncStackTrace parentStack = parent.getStackTrace();
        if (parentStack != null) {
            stackTrace = new AsyncStackTrace(parentStack, Thread.currentThread().getStackTrace(), skipStackLines);
            stackTrace.setStartFrom(parent.getParentTaskMethodName());
            stackTrace.setHideStartFromMethod(parent.getHideStartFromMethod());
        }
        this.parent.add(this, waitFor == null || waitFor.length == 0 ? null : new AndPromise(waitFor));
    }

    public boolean isDaemon() {
        return daemon;
    }

    public AsyncStackTrace getStackTrace() {
        return stackTrace;
    }

    public AsyncTaskInfo getTaskInfo() {
        return new AsyncTaskInfo(name, stackTrace == null ? null : stackTrace.getStackTrace(), daemon, waitFor);
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

