    public ExecuteActivityParameters withTaskList(String taskList) {
        this.taskList = taskList;
        return this;
    }
    
    public ExecuteActivityParameters createExecuteActivityParametersFromOptions(ActivitySchedulingOptions options, 
    		ActivitySchedulingOptions optionsOverride) {
    	ExecuteActivityParameters scheduleActivityParameters = this.clone();
    	
    	if (options != null) {
    	    Long heartbeatTimeoutSeconds = options.getHeartbeatTimeoutSeconds();
    	    if (heartbeatTimeoutSeconds != null) {
    	        scheduleActivityParameters.setHeartbeatTimeoutSeconds(heartbeatTimeoutSeconds);
    	    }
    	    
    		Long scheduleToCloseTimeout = options.getScheduleToCloseTimeoutSeconds();
    		if (scheduleToCloseTimeout != null) {
    			scheduleActivityParameters.setScheduleToCloseTimeoutSeconds(scheduleToCloseTimeout);
    		}
    		
    		Long scheduleToStartTimeout = options.getScheduleToStartTimeoutSeconds();
    		if (scheduleToStartTimeout != null) {
    			scheduleActivityParameters.setScheduleToStartTimeoutSeconds(scheduleToStartTimeout);
    		}
    		
    		Long startToCloseTimeoutSeconds = options.getStartToCloseTimeoutSeconds();
    		if (startToCloseTimeoutSeconds != null) {
    		    scheduleActivityParameters.setStartToCloseTimeoutSeconds(startToCloseTimeoutSeconds);
    		}
    		
    		String taskList = options.getTaskList();
    		if (taskList != null && !taskList.isEmpty()) { 
    			scheduleActivityParameters.setTaskList(taskList);
    		}
    	}
    	
    	if (optionsOverride != null) {    
    	    Long heartbeatTimeoutSeconds = optionsOverride.getHeartbeatTimeoutSeconds();
            if (heartbeatTimeoutSeconds != null) {
                scheduleActivityParameters.setHeartbeatTimeoutSeconds(heartbeatTimeoutSeconds);
            }
            
    		Long scheduleToCloseTimeout = optionsOverride.getScheduleToCloseTimeoutSeconds();
    		if (scheduleToCloseTimeout != null) {
    			scheduleActivityParameters.setScheduleToCloseTimeoutSeconds(scheduleToCloseTimeout);
    		}
    		
    		Long scheduleToStartTimeout = optionsOverride.getScheduleToStartTimeoutSeconds();
    		if (scheduleToStartTimeout != null) {
    			scheduleActivityParameters.setScheduleToStartTimeoutSeconds(scheduleToStartTimeout);
    		}
    		
    		Long startToCloseTimeoutSeconds = optionsOverride.getStartToCloseTimeoutSeconds();
            if (startToCloseTimeoutSeconds != null) {
                scheduleActivityParameters.setStartToCloseTimeoutSeconds(startToCloseTimeoutSeconds);
            }
    		
    		String taskList = optionsOverride.getTaskList();
    		if (taskList != null && !taskList.isEmpty()) { 
    			scheduleActivityParameters.setTaskList(taskList);
    		}
    	}
    	
    	return scheduleActivityParameters;
    }
    
