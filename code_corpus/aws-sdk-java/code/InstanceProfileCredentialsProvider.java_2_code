public class InstanceProfileCredentialsProvider implements
		AWSCredentialsProvider {

	protected volatile AWSCredentials credentials;
	protected volatile Date credentialsExpiration;

	public AWSCredentials getCredentials() {
		if (needsToLoadCredentials())
			loadCredentials();
		if (expired()) {
			throw new AmazonClientException(
					"The credentials received from the Amazon EC2 metadata service have expired");
		}

		return credentials;
	}

	public void refresh() {
		credentials = null;
	}

	protected boolean needsToLoadCredentials() {
		if (credentials == null)
			return true;

		if (credentialsExpiration != null) {
			boolean withinExpirationThreshold = credentialsExpiration.getTime()
					- System.currentTimeMillis() < thresholdInMilliseconds;
			if (withinExpirationThreshold)
				return true;
		}

		return false;
	}

	private boolean expired() {
		if (credentialsExpiration != null) {
			if (credentialsExpiration.getTime() < System.currentTimeMillis()) {
				return true;
			}
		}

		return false;
	}

	private synchronized void loadCredentials() {

		if (needsToLoadCredentials()) {
			try {
				String credentialsResponse = new EC2MetadataClient()
						.getDefaultCredentials();
				JSONObject jsonObject = new JSONObject(credentialsResponse);

				if (jsonObject.has("Token")) {
					credentials = new BasicSessionCredentials(
							jsonObject.getString("AccessKeyId"),
							jsonObject.getString("SecretAccessKey"),
							jsonObject.getString("Token"));
				} else {
					credentials = new BasicAWSCredentials(
							jsonObject.getString("AccessKeyId"),
							jsonObject.getString("SecretAccessKey"));
				}

				if (jsonObject.has("Expiration")) {
