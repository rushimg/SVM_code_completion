    public class ListVersionsHandler extends DefaultHandler {
        private VersionListing versionListing;
        private List<S3VersionSummary> versionSummaries;
        private S3VersionSummary currentVersionSummary;
        private Owner owner;
        private StringBuilder text;
        private boolean insideCommonPrefixes = false;

        public VersionListing getListing() { return versionListing; }

        @Override
        public void startDocument() {
            versionListing = new VersionListing();
            versionSummaries = new ArrayList<S3VersionSummary>();
            text = new StringBuilder();
        }

        @Override
        public void startElement(String uri, String name, String qName, Attributes attrs) {
            if (name.equals("ListVersionsResult")) {
            } else if (name.equals("CommonPrefixes")) {
                insideCommonPrefixes = true;
            } else if (name.equals("Name")) {
            } else if (name.equals("Prefix")) {
            } else if (name.equals("Delimiter")) {
            } else if (name.equals("KeyMarker")) {
            } else if (name.equals("VersionIdMarker")) {
            } else if (name.equals("MaxKeys")) {
            } else if (name.equals("NextKeyMarker")) {
            } else if (name.equals("NextVersionIdMarker")) {
            } else if (name.equals("IsTruncated")) {
            } else if (name.equals("Version")) {
                currentVersionSummary = new S3VersionSummary();
                currentVersionSummary.setBucketName(versionListing.getBucketName());
            } else if (name.equals("DeleteMarker")) {
                currentVersionSummary = new S3VersionSummary();
                currentVersionSummary.setBucketName(versionListing.getBucketName());
                currentVersionSummary.setIsDeleteMarker(true);
            } else if (name.equals("Key")) {
            } else if (name.equals("VersionId")) {
            } else if (name.equals("IsLatest")) {
            } else if (name.equals("LastModified")) {
            } else if (name.equals("ETag")) {
            } else if (name.equals("Size")) {
            } else if (name.equals("Owner")) {
                this.owner = new Owner();
            } else if (name.equals("StorageClass")) {
            } else if (name.equals("ID")) {
            } else if (name.equals("DisplayName")) {
            } else {
                log.warn("Ignoring unexpected tag <"+name+">");
            }
            text.setLength(0);
        }

        @Override
        public void endElement(String uri, String name, String qName) throws SAXException {
            if (name.equals("ListVersionsResult")) {
                versionListing.setVersionSummaries(versionSummaries);
            } else if (name.equals("Name")) {
                versionListing.setBucketName(text.toString());
            } else if (!insideCommonPrefixes && name.equals("Prefix")) {
                versionListing.setPrefix(checkForEmptyString(text.toString()));
            } else if (insideCommonPrefixes && name.equals("Prefix")) {
                versionListing.getCommonPrefixes().add(checkForEmptyString(text.toString()));
            } else if (name.equals("CommonPrefixes")) {
                insideCommonPrefixes = false;
            } else if (name.equals("KeyMarker")) {
                versionListing.setKeyMarker(checkForEmptyString(text.toString()));
            } else if (name.equals("VersionIdMarker")) {
                versionListing.setVersionIdMarker(checkForEmptyString(text.toString()));
            } else if (name.equals("MaxKeys")) {
                versionListing.setMaxKeys(Integer.parseInt(text.toString()));
            } else if (name.equals("Delimiter")) {
                versionListing.setDelimiter(checkForEmptyString(text.toString()));
            } else if (name.equals("NextKeyMarker")) {
                versionListing.setNextKeyMarker(text.toString());
            } else if (name.equals("NextVersionIdMarker")) {
                versionListing.setNextVersionIdMarker(text.toString());
            } else if (name.equals("IsTruncated")) {
                versionListing.setTruncated("true".equals(text.toString()));
            } else if (name.equals("Version")) {
                assert(currentVersionSummary != null);
                versionSummaries.add(currentVersionSummary);
                currentVersionSummary = null;
            } else if (name.equals("DeleteMarker")) {
                assert(currentVersionSummary != null);
                versionSummaries.add(currentVersionSummary);
                currentVersionSummary = null;
            } else if (name.equals("Key")) {
                assert(currentVersionSummary != null);
                currentVersionSummary.setKey(text.toString());
            } else if (name.equals("VersionId")) {
                assert(currentVersionSummary != null);
                currentVersionSummary.setVersionId(text.toString());
            } else if (name.equals("IsLatest")) {
                assert(currentVersionSummary != null);
                currentVersionSummary.setIsLatest("true".equals(text.toString()));
            } else if (name.equals("LastModified")) {
                assert(currentVersionSummary != null);
                try {
                    currentVersionSummary.setLastModified(ServiceUtils.parseIso8601Date(text.toString()));
                } catch (ParseException e) {
                    throw new SAXException(
                        "Non-ISO8601 date for LastModified in copy object output: "
                        + text.toString(), e);
                }
            } else if (name.equals("ETag")) {
                assert(currentVersionSummary != null);
                assert(!currentVersionSummary.isDeleteMarker());
                currentVersionSummary.setETag(ServiceUtils.removeQuotes(text.toString()));
            } else if (name.equals("Size")) {
                assert(currentVersionSummary != null);
                assert(!currentVersionSummary.isDeleteMarker());
                currentVersionSummary.setSize(Long.parseLong(text.toString()));
            } else if (name.equals("Owner")) {
                currentVersionSummary.setOwner(owner);
                owner = null;
            } else if (name.equals("StorageClass")) {
                assert(currentVersionSummary != null);
                assert(!currentVersionSummary.isDeleteMarker());
                currentVersionSummary.setStorageClass(text.toString());
            } else if (name.equals("ID")) {
                assert(owner != null);
                owner.setId(text.toString());
            } else if (name.equals("DisplayName")) {
                assert(owner != null);
                owner.setDisplayName(text.toString());
            } else {
                log.warn("Ignoring unexpected tag <"+name+">");
            }
            text.setLength(0);
        }

        @Override
        public void characters(char ch[], int start, int length) {
            this.text.append(ch, start, length);
        }
    }

    public class BucketWebsiteConfigurationHandler extends DefaultHandler {
        private BucketWebsiteConfiguration configuration = new BucketWebsiteConfiguration(null);
        private RoutingRuleCondition condition = null;
        private RedirectRule  redirect  = null;
        private List<RoutingRule> rules = null;
        private RedirectRule  redirectAllRequestsTo = null;
        RoutingRule rule = null;
        private StringBuilder text;

        boolean inIndexDocumentElement = false;
        boolean inErrorDocumentElement = false;
        boolean inRoutingRules = false;
        boolean inRoutingRule = false;
        boolean inCondition = false;
        boolean inRedirect = false;
        boolean inRedirectAllRequestsTo = false;

        public BucketWebsiteConfiguration getConfiguration() { return configuration; }

        @Override
        public void startDocument() {
            text = new StringBuilder();
        }

        @Override
        public void startElement(String uri, String name, String qName, Attributes attrs) {
            if (name.equals("WebsiteConfiguration")) {
            } else if (name.equals("IndexDocument")) {
                inIndexDocumentElement = true;
            } else if (name.equals("Suffix") && inIndexDocumentElement) {
            } else if (name.equals("ErrorDocument")) {
                inErrorDocumentElement = true;
            } else if (name.equals("Key") && inErrorDocumentElement) {
            } else if (name.equals("RedirectAllRequestsTo")) {
                redirectAllRequestsTo = new RedirectRule();
                inRedirectAllRequestsTo = true;
            } else if (name.equals("RoutingRules")) {
                rules = new LinkedList<RoutingRule>();
                inRoutingRules = true;
            } else if (name.equals("RoutingRule") && inRoutingRules) {
                rule = new RoutingRule();
                inRoutingRule = true;
            } else if (name.equals("Condition") && inRoutingRule) {
                condition = new RoutingRuleCondition();
                inCondition = true;
            } else if (name.equals("KeyPrefixEquals") && inCondition) {
            } else if (name.equals("HttpErrorCodeReturnedEquals") && inCondition) {
            } else if (name.equals("Redirect") && inRoutingRule) {
                redirect = new RedirectRule();
                inRedirect = true;
            } else if (name.equals("Protocol") && (inRedirect || inRedirectAllRequestsTo)) {
            } else if (name.equals("HostName") && (inRedirect || inRedirectAllRequestsTo)) {
            } else if (name.equals("ReplaceKeyPrefixWith") && (inRedirect || inRedirectAllRequestsTo)) {
            } else if (name.equals("ReplaceKeyWith") && (inRedirect || inRedirectAllRequestsTo)) {
            } else if (name.equals("HttpRedirectCode") && (inRedirect || inRedirectAllRequestsTo)) {
            } else {
                log.warn("Ignoring unexpected tag <"+name+">");
            }
        }

        @Override
        public void endElement(String uri, String name, String qName) throws SAXException {
            if (name.equals("WebsiteConfiguration")) {
            } else if (name.equals("IndexDocument")) {
                inIndexDocumentElement = false;
            } else if (name.equals("Suffix") && inIndexDocumentElement) {
                configuration.setIndexDocumentSuffix(text.toString());
            } else if (name.equals("ErrorDocument")) {
                inErrorDocumentElement = false;
            } else if (name.equals("Key") && inErrorDocumentElement) {
                configuration.setErrorDocument(text.toString());
            } else if (name.equals("KeyPrefixEquals") && inCondition) {
                condition.setKeyPrefixEquals(text.toString());
            } else if (name.equals("HttpErrorCodeReturnedEquals") && inCondition) {
                condition.setHttpErrorCodeReturnedEquals(text.toString());
            } else if (name.equals("Condition") && inRoutingRule) {
                rule.setCondition(condition);
                inCondition = false;
                condition = null;
            } else if (name.equals("Protocol") && inRedirect) {
                redirect.setProtocol(text.toString());
            } else if (name.equals("Protocol") && inRedirectAllRequestsTo) {
                redirectAllRequestsTo.setProtocol(text.toString());
            } else if (name.equals("HostName") && inRedirect) {
                redirect.setHostName(text.toString());
            } else if (name.equals("HostName") && inRedirectAllRequestsTo) {
                redirectAllRequestsTo.setHostName(text.toString());
            } else if (name.equals("ReplaceKeyPrefixWith") && inRedirect) {
                redirect.setReplaceKeyPrefixWith(text.toString());
            } else if (name.equals("ReplaceKeyPrefixWith") && inRedirectAllRequestsTo) {
                redirectAllRequestsTo.setReplaceKeyPrefixWith(text.toString());
            } else if (name.equals("ReplaceKeyWith") && inRedirect) {
                redirect.setReplaceKeyWith(text.toString());
            } else if (name.equals("ReplaceKeyWith") && inRedirectAllRequestsTo) {
                redirectAllRequestsTo.setReplaceKeyWith(text.toString());
            } else if (name.equals("HttpRedirectCode") && inRedirect) {
                redirect.setHttpRedirectCode(text.toString());
            } else if (name.equals("HttpRedirectCode") && inRedirectAllRequestsTo) {
                redirectAllRequestsTo.setHttpRedirectCode(text.toString());
            } else if (name.equals("Redirect") && inRoutingRule) {
                rule.setRedirect(redirect);
                inRedirect = false;
                redirect = null;
            } else if (name.equals("RoutingRule") && inRoutingRules) {
                rules.add(rule);
                rule = null;
                inRoutingRule = false;
            } else if (name.equals("RoutingRules")) {
                configuration.setRoutingRules(rules);
                rules = null;
                inRoutingRules = false;
            } else if (name.equals("RedirectAllRequestsTo")) {
                configuration.setRedirectAllRequestsTo(redirectAllRequestsTo);
                inRedirectAllRequestsTo = false;
                redirectAllRequestsTo = null;
            }
            text.setLength(0);
        }

        @Override
        public void characters(char ch[], int start, int length) {
            this.text.append(ch, start, length);
        }
    }

    public class BucketVersioningConfigurationHandler extends DefaultHandler {
        private BucketVersioningConfiguration configuration = new BucketVersioningConfiguration();
        private StringBuilder text;

        public BucketVersioningConfiguration getConfiguration() { return configuration; }

        @Override
        public void startDocument() {
            text = new StringBuilder();
        }

        @Override
        public void startElement(String uri, String name, String qName, Attributes attrs) {
            if (name.equals("VersioningConfiguration")) {
            } else if (name.equals("Status")) {
                text.setLength(0);
            } else if (name.equals("MfaDelete")) {
                text.setLength(0);
            } else {
                log.warn("Ignoring unexpected tag <"+name+">");
            }
        }

        @Override
        public void endElement(String uri, String name, String qName) throws SAXException {
            if (name.equals("Status")) {
                configuration.setStatus(text.toString());
            } else if (name.equals("MfaDelete")) {
                String mfaDeleteStatus = text.toString();
                if (mfaDeleteStatus.equals("Disabled")) {
                    configuration.setMfaDeleteEnabled(false);
                } else if (mfaDeleteStatus.equals("Enabled")) {
                    configuration.setMfaDeleteEnabled(true);
                } else {
                    configuration.setMfaDeleteEnabled(null);
                }
            }
            text.setLength(0);
        }

        @Override
        public void characters(char ch[], int start, int length) {
            this.text.append(ch, start, length);
        }
    }

