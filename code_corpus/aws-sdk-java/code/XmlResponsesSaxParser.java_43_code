        HTTP/1.1 200 OK
        x-amz-id-2: Uuag1LuByRx9e6j5Onimru9pO4ZVKnJ2Qz7/C1NPcfTWAtRPfTaOFg==
        x-amz-request-id: 656c76696e6727732072657175657374
        Date: Tue, 20 Sep 2012 20:34:56 GMT
        Content-Type: application/xml
        Transfer-Encoding: chunked
        Connection: keep-alive
        Server: AmazonS3

        <?xml version="1.0" encoding="UTF-8"?>
        <DeleteResult>
            <Deleted>
               <Key>Key</Key>
               <VersionId>Version</VersionId>
            </Deleted>
            <Error>
               <Key>Key</Key>
               <VersionId>Version</VersionId>
               <Code>Code</Code>
               <Message>Message</Message>
            </Error>
            <Deleted>
               <Key>Key</Key>
               <DeleteMarker>true</DeleteMarker>
               <DeleteMarkerVersionId>Version</DeleteMarkerVersionId>
            </Deleted>
        </DeleteResult>
    public class DeleteObjectsHandler extends DefaultHandler {
        private StringBuilder text;

        private DeletedObject deletedObject = null;
        private DeleteError error = null;
        private List<DeletedObject> deletedObjects = new LinkedList<DeleteObjectsResult.DeletedObject>();
        private List<DeleteError> deleteErrors = new LinkedList<MultiObjectDeleteException.DeleteError>();

        public DeleteObjectsResponse getDeleteObjectResult() {
            return new DeleteObjectsResponse(deletedObjects, deleteErrors);
        }

        @Override
        public void startDocument() {
            text = new StringBuilder();
        }

        @Override
        public void startElement(String uri, String name, String qName, Attributes attrs) {
            if ( name.equals("Deleted") ) {
                deletedObject = new DeletedObject();
            } else if ( name.equals("Error") ) {
                error = new DeleteError();
            } else if ( name.equals("Key") ) {
            } else if ( name.equals("VersionId") ) {
            } else if ( name.equals("Code") ) {
            } else if ( name.equals("Message") ) {
            } else if ( name.equals("DeleteMarker") ) {
            } else if ( name.equals("DeleteMarkerVersionId") ) {
            } else if ( name.equals("DeleteResult") ) {
            } else {
                log.warn("Unexpected tag: " + name);
            }
            text.setLength(0);
        }

        @Override
        public void endElement(String uri, String name, String qName) throws SAXException {
            if ( name.equals("Deleted") ) {
                deletedObjects.add(deletedObject);
                deletedObject = null;
            } else if ( name.equals("Error") ) {
                deleteErrors.add(error);
                error = null;
            } else if ( name.equals("Key") ) {
                if ( deletedObject != null ) {
                    deletedObject.setKey(text.toString());
                } else if ( error != null ) {
                    error.setKey(text.toString());
                }
            } else if ( name.equals("VersionId") ) {
                if ( deletedObject != null ) {
                    deletedObject.setVersionId(text.toString());
                } else if ( error != null ) {
                    error.setVersionId(text.toString());
                }
            } else if ( name.equals("Code") ) {
                if ( error != null ) {
                    error.setCode(text.toString());
                }
            } else if ( name.equals("Message") ) {
                if ( error != null ) {
                    error.setMessage(text.toString());
                }
            } else if ( name.equals("DeleteMarker") ) {
                if ( deletedObject != null ) {
                    deletedObject.setDeleteMarker(text.toString().equals("true"));
                }
            } else if ( name.equals("DeleteMarkerVersionId") ) {
                if ( deletedObject != null ) {
                    deletedObject.setDeleteMarkerVersionId(text.toString());
                }
            }
        }

        @Override
        public void characters(char ch[], int start, int length) {
            this.text.append(ch, start, length);
        }
    }

