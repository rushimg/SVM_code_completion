    HTTP/1.1 200 OK
    x-amz-id-2: Uuag1LuByRx9e6j5Onimru9pO4ZVKnJ2Qz7/C1NPcfTWAtRPfTaOFg==
    x-amz-request-id: 656c76696e6727732072657175657374
    Date: Tue, 20 Sep 2012 20:34:56 GMT
    Content-Length: xxx
    Connection: keep-alive
    Server: AmazonS3

  <LifecycleConfiguration>
      <Rule>
          <ID>logs-rule</ID>
          <Prefix>logs/</Prefix>
          <Status>Enabled</Status>
          <Transition>
              <Days>30</Days>
              <StorageClass>GLACIER</StorageClass>
          </Transition>
          <Expiration>
              <Days>365</Days>
          </Expiration>
     </Rule>
     <Rule>
         <ID>image-rule</ID>
         <Prefix>image/</Prefix>
         <Status>Enabled</Status>
         <Transition>
             <Date>2012-12-31T00:00:00.000Z</Date>
             <StorageClass>GLACIER</StorageClass>
         </Transition>
         <Expiration>
             <Date>2020-12-31T00:00:00.000Z</Date>
         </Expiration>
     </Rule>
  </LifecycleConfiguration>
    public class BucketLifecycleConfigurationHandler extends DefaultHandler {
        private StringBuilder text;
        private Rule rule;
        private List<Rule> rules = new LinkedList<Rule>();
        private Transition transition;
        boolean inTransition = false;

        public BucketLifecycleConfiguration getConfiguration() {
            return new BucketLifecycleConfiguration(rules);
        }

        @Override
        public void startDocument() {
            text = new StringBuilder();
        }

        @Override
        public void startElement(String uri, String name, String qName, Attributes attrs) {
            if (name.equals("LifecycleConfiguration")) {
            } else if (name.equals("Rule")) {
                rule = new Rule();
            } else if (name.equals("ID")) {
            } else if (name.equals("Prefix")) {
            } else if (name.equals("Status")) {
            } else if (name.equals("Transition")) {
                transition = new Transition();
                inTransition = true;
            } else if (name.equals("StorageClass")) {
            } else if (name.equals("Date")) {
            } else if (name.equals("Expiration")) {
            } else if (name.equals("Days")) {
            } else {
                log.warn("Unexpected tag: " + name);
            }
            text.setLength(0);
        }

        @Override
        public void endElement(String uri, String name, String qName) throws SAXException {
            if ( name.equals("LifecycleConfiguration") ) {
            } else if ( name.equals("Rule") ) {
                rules.add(rule);
                rule = null;
            } else if ( name.equals("ID") ) {
                rule.setId(text.toString());
            } else if ( name.equals("Prefix") ) {
                rule.setPrefix(text.toString());
            } else if ( name.equals("Status") ) {
                rule.setStatus(text.toString());
            } else if (name.equals("Transition")) {
                rule.setTransition(transition);
                inTransition = false;
            } else if (name.equals("StorageClass")) {
              transition.setStorageClass(StorageClass.fromValue(text.toString()));
            } else if (name.equals("Date")) {
                if (inTransition == false) {
                    try {
                        rule.setExpirationDate(ServiceUtils.parseIso8601Date(text.toString()));
                    } catch (ParseException e) {
                       rule.setExpirationDate(null);
                    }
                } else {
                    try {
                        transition.setDate(ServiceUtils.parseIso8601Date(text.toString()));
                    } catch (ParseException e) {
                        transition.setDate(null);
                    }
                }
            } else if (name.equals("Expiration")) {
            } else if (name.equals("Days")) {
                if (inTransition == false) {
                    rule.setExpirationInDays(Integer.parseInt(text.toString()));
                } else {
                    transition.setDays(Integer.parseInt(text.toString()));
                }
            } else {
                log.warn("Unexpected tag: " + name);
            }
        }

        @Override
        public void characters(char ch[], int start, int length) {
            this.text.append(ch, start, length);
        }
    }

