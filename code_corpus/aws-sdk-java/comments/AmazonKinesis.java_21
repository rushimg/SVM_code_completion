    /**
     * <p>
     * This operation puts a data record into an Amazon Kinesis stream from a
     * producer. This operation must be called to send data from the producer
     * into the Amazon Kinesis stream for real-time ingestion and subsequent
     * processing. The <code>PutRecord</code> operation requires the name of
     * the stream that captures, stores, and transports the data; a partition
     * key; and the data blob itself. The data blob could be a segment from a
     * log file, geographic/location data, website clickstream data, or any
     * other data type.
     * </p>
     * <p>
     * The partition key is used to distribute data across shards. Amazon
     * Kinesis segregates the data records that belong to a data stream into
     * multiple shards, using the partition key associated with each data
     * record to determine which shard a given data record belongs to.
     * </p>
     * <p>
     * Partition keys are Unicode strings, with a maximum length limit of 256
     * bytes. An MD5 hash function is used to map partition keys to 128-bit
     * integer values and to map associated data records to shards using the
     * hash key ranges of the shards. You can override hashing the partition
     * key to determine the shard by explicitly specifying a hash value using
     * the <code>ExplicitHashKey</code> parameter. For more information, see
     * the <a href="http://docs.aws.amazon.com/kinesis/latest/dev/"> Amazon
     * Kinesis Developer Guide </a> .
     * </p>
     * <p>
     * <code>PutRecord</code> returns the shard ID of where the data record
     * was placed and the sequence number that was assigned to the data
     * record.
     * </p>
     * <p>
     * The <code>SequenceNumberForOrdering</code> sets the initial sequence
     * number for the partition key. Later <code>PutRecord</code> requests to
     * the same partition key (from the same client) will automatically
     * increase from <code>SequenceNumberForOrdering</code> , ensuring strict
     * sequential ordering.
     * </p>
     * <p>
     * If a <code>PutRecord</code> request cannot be processed because of
     * insufficient provisioned throughput on the shard involved in the
     * request, <code>PutRecord</code> throws
     * <code>ProvisionedThroughputExceededException</code> .
     * </p>
     * <p>
     * Data records are accessible for only 24 hours from the time that they
     * are added to an Amazon Kinesis stream.
     * </p>
     * 
     * @param streamName The name of the stream to put the data record into.
     * @param data The data blob to put into the record, which is
     * Base64-encoded by the AWS SDK for Java when the blob is serialized.
     * The maximum size of the data blob (the payload after Base64-decoding)
     * is 50 kilobytes (KB)
     * @param partitionKey Determines which shard in the stream the data
     * record is assigned to. Partition keys are Unicode strings with a
     * maximum length limit of 256 bytes. Amazon Kinesis uses the partition
     * key as input to a hash function that maps the partition key and
     * associated data to a specific shard. Specifically, an MD5 hash
     * function is used to map partition keys to 128-bit integer values and
     * to map associated data records to shards. As a result of this hashing
     * mechanism, all data records with the same partition key will map to
     * the same shard within the stream.
     * @param sequenceNumberForOrdering The sequence number to use as the
     * initial number for the partition key. Subsequent calls to
     * <code>PutRecord</code> from the same client and for the same partition
     * key will increase from the <code>SequenceNumberForOrdering</code>
     * value.
     * 
     * @return The response from the PutRecord service method, as returned by
     *         AmazonKinesis.
     * 
     * @throws ProvisionedThroughputExceededException
     * @throws InvalidArgumentException
     * @throws ResourceNotFoundException
     *
     * @throws AmazonClientException
     *             If any internal errors are encountered inside the client while
     *             attempting to make the request or handle the response.  For example
     *             if a network connection is not available.
     * @throws AmazonServiceException
     *             If an error response is returned by AmazonKinesis indicating
     *             either a problem with the data in the request, or a server side issue.
     */
