    /**
     * One or more local secondary indexes (the maximum is five) to be
     * created on the table. Each index is scoped to a given hash key value.
     * There is a 10 gigabyte size limit per hash key; otherwise, the size of
     * a local secondary index is unconstrained. <p>Each local secondary
     * index in the array includes the following: <ul> <li>
     * <p><i>IndexName</i> - The name of the local secondary index. Must be
     * unique only for this table. <p> </li> <li> <p><i>KeySchema</i> -
     * Specifies the key schema for the local secondary index. The key schema
     * must begin with the same hash key attribute as the table. </li> <li>
     * <p><i>Projection</i> - Specifies attributes that are copied
     * (projected) from the table into the index. These are in addition to
     * the primary key attributes and index key attributes, which are
     * automatically projected. Each attribute specification is composed of:
     * <ul> <li> <p><i>ProjectionType</i> - One of the following: <ul> <li>
     * <p><code>KEYS_ONLY</code> - Only the index and primary keys are
     * projected into the index. </li> <li> <p><code>INCLUDE</code> - Only
     * the specified table attributes are projected into the index. The list
     * of projected attributes are in <i>NonKeyAttributes</i>. </li> <li>
     * <p><code>ALL</code> - All of the table attributes are projected into
     * the index. </li> </ul> </li> <li> <p><i>NonKeyAttributes</i> - A list
     * of one or more non-key attribute names that are projected into the
     * secondary index. The total count of attributes specified in
     * <i>NonKeyAttributes</i>, summed across all of the secondary indexes,
     * must not exceed 20. If you project the same attribute into two
     * different indexes, this counts as two distinct attributes when
     * determining the total. </li> </ul> </li> </ul>
     * <p>
     * Returns a reference to this object so that method calls can be chained together.
     *
     * @param localSecondaryIndexes One or more local secondary indexes (the maximum is five) to be
     *         created on the table. Each index is scoped to a given hash key value.
     *         There is a 10 gigabyte size limit per hash key; otherwise, the size of
     *         a local secondary index is unconstrained. <p>Each local secondary
     *         index in the array includes the following: <ul> <li>
     *         <p><i>IndexName</i> - The name of the local secondary index. Must be
     *         unique only for this table. <p> </li> <li> <p><i>KeySchema</i> -
     *         Specifies the key schema for the local secondary index. The key schema
     *         must begin with the same hash key attribute as the table. </li> <li>
     *         <p><i>Projection</i> - Specifies attributes that are copied
     *         (projected) from the table into the index. These are in addition to
     *         the primary key attributes and index key attributes, which are
     *         automatically projected. Each attribute specification is composed of:
     *         <ul> <li> <p><i>ProjectionType</i> - One of the following: <ul> <li>
     *         <p><code>KEYS_ONLY</code> - Only the index and primary keys are
     *         projected into the index. </li> <li> <p><code>INCLUDE</code> - Only
     *         the specified table attributes are projected into the index. The list
     *         of projected attributes are in <i>NonKeyAttributes</i>. </li> <li>
     *         <p><code>ALL</code> - All of the table attributes are projected into
     *         the index. </li> </ul> </li> <li> <p><i>NonKeyAttributes</i> - A list
     *         of one or more non-key attribute names that are projected into the
     *         secondary index. The total count of attributes specified in
     *         <i>NonKeyAttributes</i>, summed across all of the secondary indexes,
     *         must not exceed 20. If you project the same attribute into two
     *         different indexes, this counts as two distinct attributes when
     *         determining the total. </li> </ul> </li> </ul>
     *
     * @return A reference to this updated object so that method calls can be chained 
     *         together.
     */
