    /**
     * The message you want to send to the topic. <p>If you want to send the
     * same message to all transport protocols, include the text of the
     * message as a String value. <p>If you want to send different messages
     * for each transport protocol, set the value of the
     * <code>MessageStructure</code> parameter to <code>json</code> and use a
     * JSON object for the <code>Message</code> parameter. See the Examples
     * section for the format of the JSON object. <p>Constraints: Messages
     * must be UTF-8 encoded strings at most 256 KB in size (262144 bytes,
     * not 262144 characters). <p>JSON-specific constraints: <ul> <li>Keys in
     * the JSON object that correspond to supported transport protocols must
     * have simple JSON string values. </li> <li>The values will be parsed
     * (unescaped) before they are used in outgoing messages.</li>
     * <li>Outbound notifications are JSON encoded (meaning that the
     * characters will be reescaped for sending).</li> <li>Values have a
     * minimum length of 0 (the empty string, "", is allowed).</li>
     * <li>Values have a maximum length bounded by the overall message size
     * (so, including multiple protocols may limit message sizes).</li>
     * <li>Non-string values will cause the key to be ignored.</li> <li>Keys
     * that do not correspond to supported transport protocols are
     * ignored.</li> <li>Duplicate keys are not allowed.</li> <li>Failure to
     * parse or validate any key or value in the message will cause the
     * <code>Publish</code> call to return an error (no partial
     * delivery).</li> </ul>
     * <p>
     * Returns a reference to this object so that method calls can be chained together.
     *
     * @param message The message you want to send to the topic. <p>If you want to send the
     *         same message to all transport protocols, include the text of the
     *         message as a String value. <p>If you want to send different messages
     *         for each transport protocol, set the value of the
     *         <code>MessageStructure</code> parameter to <code>json</code> and use a
     *         JSON object for the <code>Message</code> parameter. See the Examples
     *         section for the format of the JSON object. <p>Constraints: Messages
     *         must be UTF-8 encoded strings at most 256 KB in size (262144 bytes,
     *         not 262144 characters). <p>JSON-specific constraints: <ul> <li>Keys in
     *         the JSON object that correspond to supported transport protocols must
     *         have simple JSON string values. </li> <li>The values will be parsed
     *         (unescaped) before they are used in outgoing messages.</li>
     *         <li>Outbound notifications are JSON encoded (meaning that the
     *         characters will be reescaped for sending).</li> <li>Values have a
     *         minimum length of 0 (the empty string, "", is allowed).</li>
     *         <li>Values have a maximum length bounded by the overall message size
     *         (so, including multiple protocols may limit message sizes).</li>
     *         <li>Non-string values will cause the key to be ignored.</li> <li>Keys
     *         that do not correspond to supported transport protocols are
     *         ignored.</li> <li>Duplicate keys are not allowed.</li> <li>Failure to
     *         parse or validate any key or value in the message will cause the
     *         <code>Publish</code> call to return an error (no partial
     *         delivery).</li> </ul>
     *
     * @return A reference to this updated object so that method calls can be chained 
     *         together.
     */
