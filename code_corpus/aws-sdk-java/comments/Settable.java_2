/**
 * It is an implementation of Promise, which exposes an additional
 * {@link #set(Object)} and {@link #chain(Promise)} methods. Calling
 * {@link #set(Object)} puts it in ready state, with value retrievable through
 * {@link #get()} method. {@link #chain(Promise)} links state of this Settable
 * to another Promise. When another promise changes its state to ready the
 * chained one is also becomes ready.
 * 
 * <p>
 * Use <code>settable.set(null)</code> to set <code>Settable&lt;Void&gt;</code>
 * to the ready state.
 * 
 * <p>
 * Settable is frequently used to return data from code contained in anonymous
 * classes. For example:
 * 
 * <pre>
 * <code>
 * Promise&lt;Integer&gt; foo() {
 *     final Settable&lt;Integer&gt; result = new Settable&lt;Integer&gt;();
 *     new TryCatch() {
 *                            
 *         protected void doTry() throws Throwable {
 *             Promise&lt;Integer&gt; activity1Result = activities.callActivity1();
 *             result.chain(activity1Result);
 *         }
 *                            
 *         protected void doCatch(Throwable e) throws Throwable {
 *             Promise&lt;Void&gt; handled = handleFailure(e);
 *             rethrow(e, handled);
 *         }
 *      };
 *      return result;
 * }
 * </code>
 * </pre>
 * 
 * @param <V>
 *            The type of value accepted and returned by this Settable.Use
 *            {@link Void} to represent Promise that indicates completion of
 *            operation that doesn't return a value.
 */
