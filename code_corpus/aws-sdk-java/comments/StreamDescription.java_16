    /**
     * The current status of the stream being described. <p>The stream status
     * is one of the following states: <ul> <li>CREATING - The stream is
     * being created. Upon receiving a <a>CreateStream</a> request, Amazon
     * Kinesis immediately returns and sets <code>StreamStatus</code> to
     * CREATING.</li> <li>DELETING - The stream is being deleted. After a
     * <a>DeleteStream</a> request, the specified stream is in the DELETING
     * state until Amazon Kinesis completes the deletion.</li> <li>ACTIVE -
     * The stream exists and is ready for read and write operations or
     * deletion. You should perform read and write operations only on an
     * ACTIVE stream.</li> <li>UPDATING - Shards in the stream are being
     * merged or split. Read and write operations continue to work while the
     * stream is in the UPDATING state.</li> </ul>
     * <p>
     * Returns a reference to this object so that method calls can be chained together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>CREATING, DELETING, ACTIVE, UPDATING
     *
     * @param streamStatus The current status of the stream being described. <p>The stream status
     *         is one of the following states: <ul> <li>CREATING - The stream is
     *         being created. Upon receiving a <a>CreateStream</a> request, Amazon
     *         Kinesis immediately returns and sets <code>StreamStatus</code> to
     *         CREATING.</li> <li>DELETING - The stream is being deleted. After a
     *         <a>DeleteStream</a> request, the specified stream is in the DELETING
     *         state until Amazon Kinesis completes the deletion.</li> <li>ACTIVE -
     *         The stream exists and is ready for read and write operations or
     *         deletion. You should perform read and write operations only on an
     *         ACTIVE stream.</li> <li>UPDATING - Shards in the stream are being
     *         merged or split. Read and write operations continue to work while the
     *         stream is in the UPDATING state.</li> </ul>
     *
     * @return A reference to this updated object so that method calls can be chained 
     *         together.
     *
     * @see StreamStatus
     */
