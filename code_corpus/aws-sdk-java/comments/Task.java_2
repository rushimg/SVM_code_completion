/**
 * Asynchronous task that is executed when all {@link Promise}s passed to its
 * constructor are ready (<code>null</code> parameter is considered ready).
 * 
 * <p>
 * Should be created in the context of {@link AsyncScope#doAsync()} method, from
 * {@link Task#doExecute()} or from {@link TryCatchFinally} do... methods.
 * Exceptions thrown from {@link #doExecute()} are delivered asynchronously to
 * the wrapping {@link TryCatchFinally#doCatch(Throwable)} method or rethrown
 * from {@link AsyncScope#eventLoop()} if no wrapping {@link TryCatchFinally} is
 * found.
 * 
 * <p>
 * Example of using {@link Task} to implement asynchronous function that sums
 * parameters when both of them are ready:
 * 
 * <pre>
 * <tt>
 * public Promise&lt;Integer&gt; sum(Promise&lt;Integer&gt; a, Promise&lt;Integer&gt; b) {
 *     Settable&lt;Integer&gt; result = new Settable&lt;Integer&gt;();
 *     new Task(a, b) {
 *         public void doExecute() {
 *             result.set(a.get() + b.get());
 *         }
 *     };
 *     return result;
 * }
 * </tt>
 * </pre>
 * 
 * @see AsyncScope
 * @see TryCatchFinally
 * @see Promise
 */
