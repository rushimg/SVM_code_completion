/**
 * Memory-efficient map of keys to values with list-style random-access semantics.
 *
 * <p>
 * Supports null keys and values. Conceptually, the keys and values are stored in a simpler array in
 * order to minimize memory use and provide for fast access to a key/value at a certain index (for
 * example {@link #getKey(int)}). However, traditional mapping operations like {@link #get(Object)}
 * and {@link #put(Object, Object)} are slower because they need to look up all key/value pairs in
 * the worst case.
 * </p>
 *
 * <p>
 * Implementation is not thread-safe. For a thread-safe choice instead use an implementation of
 * {@link ConcurrentMap}.
 * </p>
 *
 * @param <K> the type of keys maintained by this map
 * @param <V> the type of mapped values
 *
 * @since 1.0
 * @author Yaniv Inbar
 */
