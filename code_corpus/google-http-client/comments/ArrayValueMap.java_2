/**
 * Collects the array values of a key/value data object, writing the fields or map values only after
 * all values have been collected.
 *
 * <p>
 * The typical application for this is when parsing JSON or XML when the value type is known to be
 * an array. It stores the values in a collection during the parsing, and only when the parsing of
 * an object is finished does it convert the collection into an array and stores it.
 * </p>
 *
 * <p>
 * Use {@link #put(String, Class, Object)} when the destination object is a map with string keys and
 * whose values accept an array of objects. Use {@link #put(Field, Class, Object)} when setting the
 * value of a field using reflection, assuming its type accepts an array of objects. One can
 * potentially use both {@code put} methods for example on an instance of {@link GenericData}.
 * </p>
 *
 * <p>
 * Implementation is not thread-safe. For a thread-safe choice instead use an implementation of
 * {@link ConcurrentMap}.
 * </p>
 *
 * @since 1.4
 * @author Yaniv Inbar
 */
