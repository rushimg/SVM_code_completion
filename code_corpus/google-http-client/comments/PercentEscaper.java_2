/**
 * A {@code UnicodeEscaper} that escapes some set of Java characters using the URI percent encoding
 * scheme. The set of safe characters (those which remain unescaped) can be specified on
 * construction.
 *
 * <p>
 * For details on escaping URIs for use in web pages, see <a
 * href="http://tools.ietf.org/html/rfc3986#section-2.4">RFC 3986 - section 2.4</a> and <a
 * href="http://tools.ietf.org/html/rfc3986#appendix-A">RFC 3986 - appendix A</a>
 *
 * <p>
 * When encoding a String, the following rules apply:
 * <ul>
 * <li>The alphanumeric characters "a" through "z", "A" through "Z" and "0" through "9" remain the
 * same.
 * <li>Any additionally specified safe characters remain the same.
 * <li>If {@code plusForSpace} was specified, the space character " " is converted into a plus sign
 * "+".
 * <li>All other characters are converted into one or more bytes using UTF-8 encoding and each byte
 * is then represented by the 3-character string "%XY", where "XY" is the two-digit, uppercase,
 * hexadecimal representation of the byte value.
 * </ul>
 *
 * <p>
 * RFC 2396 specifies the set of unreserved characters as "-", "_", ".", "!", "~", "*", "'", "(" and
 * ")". It goes on to state:
 *
 * <p>
 * <i>Unreserved characters can be escaped without changing the semantics of the URI, but this
 * should not be done unless the URI is being used in a context that does not allow the unescaped
 * character to appear.</i>
 *
 * <p>
 * For performance reasons the only currently supported character encoding of this class is UTF-8.
 *
 * <p>
 * <b>Note</b>: This escaper produces uppercase hexadecimal sequences. From <a
 * href="http://tools.ietf.org/html/rfc3986">RFC 3986</a>:<br>
 * <i>"URI producers and normalizers should use uppercase hexadecimal digits for all
 * percent-encodings."</i>
 *
 * @since 1.0
 */
