/**
 * An {@link Escaper} that converts literal text into a format safe for inclusion in a particular
 * context (such as an XML document). Typically (but not always), the inverse process of
 * "unescaping" the text is performed automatically by the relevant parser.
 *
 * <p>
 * For example, an XML escaper would convert the literal string {@code "Foo<Bar>"} into {@code
 * "Foo&lt;Bar&gt;"} to prevent {@code "<Bar>"} from being confused with an XML tag. When the
 * resulting XML document is parsed, the parser API will return this text as the original literal
 * string {@code "Foo<Bar>"}.
 *
 * <p>
 * As there are important reasons, including potential security issues, to handle Unicode correctly
 * if you are considering implementing a new escaper you should favor using UnicodeEscaper wherever
 * possible.
 *
 * <p>
 * A {@code UnicodeEscaper} instance is required to be stateless, and safe when used concurrently by
 * multiple threads.
 *
 * <p>
 * Several popular escapers are defined as constants in the class {@link CharEscapers}. To create
 * your own escapers extend this class and implement the {@link #escape(int)} method.
 *
 * @since 1.0
 */
