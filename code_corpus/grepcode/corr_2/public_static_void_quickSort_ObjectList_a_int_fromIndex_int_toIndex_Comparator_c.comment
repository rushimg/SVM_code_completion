/**
     * Sorts the specified range of the specified array according to the order
     * induced by the specified comparator. All elements in the range must be
     * <i>mutually comparable</i> by the specified comparator (that is,
     * <tt>c.compare(e1, e2)</tt> must not throw a <tt>ClassCastException</tt>
     * for any elements <tt>e1</tt> and <tt>e2</tt> in the range).
     * <p>
     * 
     * The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley
     * and M. Douglas McIlroy's "Engineering a Sort Function", Software-Practice
     * and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm
     * offers n*log(n) performance on many data sets that cause other quicksorts
     * to degrade to quadratic performance.
     * 
     * @param a
     *            the array to be sorted.
     * @param fromIndex
     *            the index of the first element (inclusive) to be sorted.
     * @param toIndex
     *            the index of the last element (exclusive) to be sorted.
     * @param c
     *            the comparator to determine the order of the receiver.
     * @throws ClassCastException
     *             if the array contains elements that are not <i>mutually
     *             comparable</i> using the specified comparator.
     * @throws IllegalArgumentException
     *             if <tt>fromIndex &gt; toIndex</tt>
     * @throws ArrayIndexOutOfBoundsException
     *             if <tt>fromIndex &lt; 0</tt> or
     *             <tt>toIndex &gt; a.length</tt>
     * @see Comparator
     */