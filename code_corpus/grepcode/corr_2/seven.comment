/**
     * Sorts the vector into ascending order, according to the order induced by
     * the specified comparator. The returned view is backed by this matrix, so
     * changes in the returned view are reflected in this matrix, and
     * vice-versa. The algorithm compares two cells at a time, determinining
     * whether one is smaller, equal or larger than the other. To sort ranges
     * use sub-ranging views. To sort descending, use flip views ...
     * <p>
     * <b>Example:</b>
     * 
     * <pre>
     * // sort by sinus of cells
     * DoubleComparator comp = new DoubleComparator() {
     *     public int compare(double a, double b) {
     *         double as = Math.sin(a);
     *         double bs = Math.sin(b);
     *         return as &lt; bs ? -1 : as == bs ? 0 : 1;
     *     }
     * };
     * sorted = quickSort(vector, comp);
     * </pre>
     * 
     * @param vector
     *            the vector to be sorted.
     * @param c
     *            the comparator to determine the order.
     * @return a new matrix view sorted as specified. <b>Note that the original
     *         vector (matrix) is left unaffected.</b>
     */
