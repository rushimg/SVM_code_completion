 /**
     * Sorts the matrix rows according to the order induced by the specified
     * comparator. The returned view is backed by this matrix, so changes in the
     * returned view are reflected in this matrix, and vice-versa. The algorithm
     * compares two rows (1-d matrices) at a time, determinining whether one is
     * smaller, equal or larger than the other. To sort ranges use sub-ranging
     * views. To sort columns by rows, use dice views. To sort descending, use
     * flip views ...
     * <p>
     * <b>Example:</b>
     * 
     * <pre>
     * // sort by sum of values in a row
     * DoubleMatrix1DComparator comp = new DoubleMatrix1DComparator() {
     *     public int compare(DoubleMatrix1D a, DoubleMatrix1D b) {
     *         double as = a.zSum();
     *         double bs = b.zSum();
     *         return as &lt; bs ? -1 : as == bs ? 0 : 1;
     *     }
     * };
     * sorted = quickSort(matrix, comp);
     * </pre>
     * 
     * @param matrix
     *            the matrix to be sorted.
     * @param c
     *            the comparator to determine the order.
     * @return a new matrix view having rows sorted as specified. <b>Note that
     *         the original matrix is left unaffected.</b>
     */
