/**
     * Sorts the matrix slices according to the order induced by the specified
     * comparator. The returned view is backed by this matrix, so changes in the
     * returned view are reflected in this matrix, and vice-versa. The algorithm
     * compares two slices (2-d matrices) at a time, determinining whether one
     * is smaller, equal or larger than the other. To sort ranges use
     * sub-ranging views. To sort by other dimensions, use dice views. To sort
     * descending, use flip views ...
     * <p>
     * <b>Example:</b>
     * 
     * <pre>
     * // sort by sum of values in a slice
     * DoubleMatrix2DComparator comp = new DoubleMatrix2DComparator() {
     *     public int compare(DoubleMatrix2D a, DoubleMatrix2D b) {
     *         double as = a.zSum();
     *         double bs = b.zSum();
     *         return as &lt; bs ? -1 : as == bs ? 0 : 1;
     *     }
     * };
     * sorted = quickSort(matrix, comp);
     * </pre>
     * 
     * @param matrix
     *            the matrix to be sorted.
     * @param c
     *            the comparator to determine the order.
     * @return a new matrix view having slices sorted as specified. <b>Note that
     *         the original matrix is left unaffected.</b>
     */
