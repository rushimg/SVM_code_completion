/**
     * Searches the list for the specified value using the binary search
     * algorithm. The list must be sorted into ascending order according to the
     * specified comparator. All elements in the range must be <i>mutually
     * comparable</i> by the specified comparator (that is,
     * <tt>c.compare(e1, e2)</tt> must not throw a <tt>ClassCastException</tt>
     * for any elements <tt>e1</tt> and <tt>e2</tt> in the range).
     * <p>
     * 
     * If the list is not sorted, the results are undefined: in particular, the
     * call may enter an infinite loop. If the list contains multiple elements
     * equal to the specified key, there is no guarantee which instance will be
     * found.
     * 
     * 
     * @param list
     *            the list to be searched.
     * @param key
     *            the value to be searched for.
     * @param from
     *            the leftmost search position, inclusive.
     * @param to
     *            the rightmost search position, inclusive.
     * @param comparator
     *            the comparator by which the list is sorted.
     * @throws ClassCastException
     *             if the list contains elements that are not <i>mutually
     *             comparable</i> using the specified comparator.
     * @return index of the search key, if it is contained in the list;
     *         otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>. The
     *         <i>insertion point</i> is defined as the the point at which the
     *         value would be inserted into the list: the index of the first
     *         element greater than the key, or <tt>list.length</tt>, if all
     *         elements in the list are less than the specified key. Note that
     *         this guarantees that the return value will be &gt;= 0 if and only
     *         if the key is found.
     * @see java.util.Arrays
     * @see java.util.Comparator
     */