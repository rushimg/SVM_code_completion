    private void init(int [] equalityGroupsSizesArray)
    {
        this.permArray =
            new IntegerPermutationIter[equalityGroupsSizesArray.length];

        int counter = 0;
        this.max = 1; // each time , multiply by factorail(eqGroupSize)
        for (
            int eqGroup = 0;
            eqGroup < equalityGroupsSizesArray.length;
            eqGroup++)
        {
            // create an array of eq.group size filled with values
            // of counter, counter+1, ... counter+size-1
            int currGroupSize = equalityGroupsSizesArray[eqGroup];
            int [] currArray = new int[currGroupSize];
            for (int i = 0; i < currGroupSize; i++) {
                currArray[i] = counter;
                counter++;
            }
            this.permArray[eqGroup] = new IntegerPermutationIter(currArray);
            this.permArray[eqGroup].getNext(); // first iteration return the
                                               // source

            // each time , multiply by factorail(eqGroupSize)
        }
        this.totalPermArraySize = counter;

        // calc max
    }

    public Object next()
    {
        return getNext();
    }

