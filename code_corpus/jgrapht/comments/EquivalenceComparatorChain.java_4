    /**
     * Adds a comparator which will also test equivalence. For
     * equivalenceCompare(), the return value is a logical AND of the two
     * comparators. The first check will use the first comparator before the
     * next one. Make sure to put the one which has better performance first.
     * For equivalenceHashcode(), the resulting hashes will be rehashed
     * together. This method may be used multiple times to create a long "chain"
     * of comparators.
     */
