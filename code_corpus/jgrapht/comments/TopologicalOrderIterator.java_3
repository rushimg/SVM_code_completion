/**
 * Implements topological order traversal for a directed acyclic graph. A
 * topological sort is a permutation <tt>p</tt> of the vertices of a graph such
 * that an edge <tt>(i,j)</tt> implies that <tt>i</tt> appears before <tt>j</tt>
 * in <tt>p</tt> (Skiena 1990, p. 208). See also <a
 * href="http://mathworld.wolfram.com/TopologicalSort.html">
 * http://mathworld.wolfram.com/TopologicalSort.html</a>.
 *
 * <p>See "Algorithms in Java, Third Edition, Part 5: Graph Algorithms" by
 * Robert Sedgewick and "Data Structures and Algorithms with Object-Oriented
 * Design Patterns in Java" by Bruno R. Preiss for implementation alternatives.
 * The latter can be found online at <a
 * href="http://www.brpreiss.com/books/opus5/">
 * http://www.brpreiss.com/books/opus5/</a></p>
 *
 * <p>For this iterator to work correctly the graph must be acyclic, and must
 * not be modified during iteration. Currently there are no means to ensure
 * that, nor to fail-fast; the results with cyclic input (including self-loops)
 * or concurrent modifications are undefined. To precheck a graph for cycles,
 * consider using {@link org.jgrapht.alg.CycleDetector} or {@link
 * org.jgrapht.alg.StrongConnectivityInspector}.</p>
 *
 * @author Marden Neubert
 * @since Dec 18, 2004
 */
