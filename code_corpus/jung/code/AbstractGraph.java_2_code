@SuppressWarnings("serial")
public abstract class AbstractGraph<V, E> implements Graph<V,E>, Serializable 
{
	public boolean addEdge(E edge, Collection<? extends V> vertices) 
	{
		return addEdge(edge, vertices, this.getDefaultEdgeType());
	}

	@SuppressWarnings("unchecked")
	public boolean addEdge(E edge, Collection<? extends V> vertices, EdgeType edgeType) {
	    if (vertices == null)
	        throw new IllegalArgumentException("'vertices' parameter must not be null");
	    if (vertices.size() == 2)
	        return addEdge(edge, 
	        			   vertices instanceof Pair ? (Pair<V>)vertices : new Pair<V>(vertices), 
	        			   edgeType);
        else if (vertices.size() == 1)
        {
            V vertex = vertices.iterator().next();
            return addEdge(edge, new Pair<V>(vertex, vertex), edgeType);
        }
        else
            throw new IllegalArgumentException("Graph objects connect 1 or 2 vertices; vertices arg has " + vertices.size());
	}
	
	public boolean addEdge(E e, V v1, V v2)
	{
		return addEdge(e, v1, v2, this.getDefaultEdgeType());
	}

	public boolean addEdge(E e, V v1, V v2, EdgeType edge_type)
	{
		return addEdge(e, new Pair<V>(v1, v2), edge_type);
	}
	
