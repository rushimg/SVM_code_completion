		public SynchronizedForest(Forest<V, E> delegate) {
			super(delegate);
		}

		public synchronized Collection<Tree<V, E>> getTrees() {
			return ((Forest<V,E>)delegate).getTrees();
		}

        public int getChildCount(V vertex)
        {
            return ((Forest<V,E>)delegate).getChildCount(vertex);
        }

        public Collection<E> getChildEdges(V vertex)
        {
            return ((Forest<V,E>)delegate).getChildEdges(vertex);
        }

        public Collection<V> getChildren(V vertex)
        {
            return ((Forest<V,E>)delegate).getChildren(vertex);
        }

        public V getParent(V vertex)
        {
            return ((Forest<V,E>)delegate).getParent(vertex);
        }

        public E getParentEdge(V vertex)
        {
            return ((Forest<V,E>)delegate).getParentEdge(vertex);
        }
	}
	
	@SuppressWarnings("serial")
	static abstract class UnmodifiableAbstractGraph<V,E> implements Graph<V,E>, Serializable {
		protected Graph<V,E> delegate;


		private UnmodifiableAbstractGraph(Graph<V, E> delegate) {
			if(delegate == null) {
				throw new NullPointerException();
			}
			this.delegate = delegate;
		}

