/**
 * A graph consisting of a set of vertices of type <code>V</code>
 * set and a set of edges of type <code>E</code>.  Edges of this
 * graph type have exactly two endpoints; whether these endpoints 
 * must be distinct depends on the implementation.
 * <P>
 * This interface permits, but does not enforce, any of the following 
 * common variations of graphs:
 * <ul>
 * <li> directed and undirected edges
 * <li> vertices and edges with attributes (for example, weighted edges)
 * <li> vertices and edges of different types (for example, bipartite 
 *      or multimodal graphs)
 * <li> parallel edges (multiple edges which connect a single set of vertices)
 * <li> representations as matrices or as adjacency lists or adjacency maps
 * </ul> 
 * Extensions or implementations of this interface 
 * may enforce or disallow any or all of these variations.
 * 
 * <p>Definitions (with respect to a given vertex <code>v</code>):
 * <ul>
 * <li/><b>incoming edge</b> of <code>v</code>: an edge that can be traversed 
 * from a neighbor of <code>v</code> to reach <code>v</code>
 * <li/><b>outgoing edge</b> of <code>v</code>: an edge that can be traversed
 * from <code>v</code> to reach some neighbor of <code>v</code> 
 * <li/><b>predecessor</b> of <code>v</code>: a vertex at the other end of an
 * incoming edge of <code>v</code>
 * <li/><b>successor</b> of <code>v</code>: a vertex at the other end of an 
 * outgoing edge of <code>v</code>
 * <li/>
 * </ul> 
 * 
 * @author Joshua O'Madadhain
 */
