    /**
     * Returns an edge that connects this vertex to <code>v</code>.
     * If this edge is not uniquely
     * defined (that is, if the graph contains more than one edge connecting 
     * <code>v1</code> to <code>v2</code>), any of these edges 
     * may be returned.  <code>findEdgeSet(v1, v2)</code> may be 
     * used to return all such edges.
     * Returns null if either of the following is true:
     * <ul>
     * <li/><code>v2</code> is not connected to <code>v1</code>
     * <li/>either <code>v1</code> or <code>v2</code> are not present in this graph
     * </ul> 
     * <p><b>Note</b>: for purposes of this method, <code>v1</code> is only considered to be connected to
     * <code>v2</code> via a given <i>directed</i> edge <code>e</code> if
     * <code>v1 == e.getSource() && v2 == e.getDest()</code> evaluates to <code>true</code>.
     * (<code>v1</code> and <code>v2</code> are connected by an undirected edge <code>u</code> if 
     * <code>u</code> is incident to both <code>v1</code> and <code>v2</code>.)
     * 
     * @return  an edge that connects <code>v1</code> to <code>v2</code>, 
     * or <code>null</code> if no such edge exists (or either vertex is not present)
     * @see Hypergraph#findEdgeSet(Object, Object) 
     */
