    /**
     * Returns all edges that connects this vertex to <code>v</code>.
     * If this edge is not uniquely
     * defined (that is, if the graph contains more than one edge connecting 
     * <code>v1</code> to <code>v2</code>), any of these edges 
     * may be returned.  <code>findEdgeSet(v1, v2)</code> may be 
     * used to return all such edges.
     * Returns null if <code>v2</code> is not connected to <code>v1</code>.
     * <br/>Returns an empty collection if either <code>v1</code> or <code>v2</code> are not present in this graph.
     *  
     * <p><b>Note</b>: for purposes of this method, <code>v1</code> is only considered to be connected to
     * <code>v2</code> via a given <i>directed</i> edge <code>d</code> if
     * <code>v1 == d.getSource() && v2 == d.getDest()</code> evaluates to <code>true</code>.
     * (<code>v1</code> and <code>v2</code> are connected by an undirected edge <code>u</code> if 
     * <code>u</code> is incident to both <code>v1</code> and <code>v2</code>.)
     * 
     * @return  a collection containing all edges that connect <code>v1</code> to <code>v2</code>, 
     * or <code>null</code> if either vertex is not present
     * @see Hypergraph#findEdge(Object, Object) 
     */
