/**
 * A hypergraph, consisting of a set of vertices of type <code>V</code>
 * and a set of hyperedges of type <code>E</code> which connect the vertices.  
 * This is the base interface for all JUNG graph types.
 * <P>
 * This interface permits, but does not enforce, any of the following 
 * common variations of graphs:
 * <ul>
 * <li/>hyperedges (edges which connect a set of vertices of any size)
 * <li/>edges (these have have exactly two endpoints, which may or may not be distinct)
 * <li/>self-loops (edges which connect exactly one vertex)
 * <li> directed and undirected edges
 * <li> vertices and edges with attributes (for example, weighted edges)
 * <li> vertices and edges with different constraints or properties (for example, bipartite 
 *      or multimodal graphs)
 * <li> parallel edges (multiple edges which connect a single set of vertices)
 * <li> internal representations as matrices or as adjacency lists or adjacency maps
 * </ul> 
 * Extensions or implementations of this interface 
 * may enforce or disallow any or all of these variations.
 * <p><b>Notes</b>:
 * <ul>
 * <li/> The collections returned by <code>Hypergraph</code> instances
 * should be treated in general as if read-only.  While they are not contractually 
 * guaranteed (or required) to be immutable,
 * this interface does not define the outcome if they are mutated.
 * Mutations should be done via <code>{add,remove}{Edge,Vertex}</code>, or
 * in the constructor.
 * <li/> 
 * </ul>
 * 
 * @author Joshua O'Madadhain
 */
