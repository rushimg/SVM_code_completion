    def copy_key(self, new_key_name, src_bucket_name, src_key_name,
                 metadata=None, src_version_id=None, storage_class='STANDARD',
                 preserve_acl=False, encrypt_key=False, headers=None,
                 query_args=None, src_generation=None):
        """Create a new key in the bucket by copying an existing key.
        :type new_key_name: string
        :param new_key_name: The name of the new key
        :type src_bucket_name: string
        :param src_bucket_name: The name of the source bucket
        :type src_key_name: string
        :param src_key_name: The name of the source key
        :type src_generation: int
        :param src_generation: The generation number of the source key to copy.
            If not specified, the latest generation is copied.
        :type metadata: dict
        :param metadata: Metadata to be associated with new key.  If
            metadata is supplied, it will replace the metadata of the
            source key being copied.  If no metadata is supplied, the
            source key's metadata will be copied to the new key.
        :type version_id: string
        :param version_id: Unused in this subclass.
        :type storage_class: string
        :param storage_class: The storage class of the new key.  By
            default, the new key will use the standard storage class.
            Possible values are: STANDARD | DURABLE_REDUCED_AVAILABILITY
        :type preserve_acl: bool
        :param preserve_acl: If True, the ACL from the source key will
            be copied to the destination key.  If False, the
            destination key will have the default ACL.  Note that
            preserving the ACL in the new key object will require two
            additional API calls to GCS, one to retrieve the current
            ACL and one to set that ACL on the new object.  If you
            don't care about the ACL (or if you have a default ACL set
            on the bucket), a value of False will be significantly more
            efficient.
        :type encrypt_key: bool
        :param encrypt_key: Included for compatibility with S3. This argument is
            ignored.
        :type headers: dict
        :param headers: A dictionary of header name/value pairs.
        :type query_args: string
        :param query_args: A string of additional querystring arguments
            to append to the request
        :rtype: :class:`boto.gs.key.Key`
        :returns: An instance of the newly created key object
        """
        if src_generation:
            headers = headers or {}
            headers['x-goog-copy-source-generation'] = str(src_generation)
        return super(Bucket, self).copy_key(
            new_key_name, src_bucket_name, src_key_name, metadata=metadata,
            storage_class=storage_class, preserve_acl=preserve_acl,
            encrypt_key=encrypt_key, headers=headers, query_args=query_args)
