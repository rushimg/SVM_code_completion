    def update(self, throughput, global_indexes=None):
        """
        Updates table attributes in DynamoDB.
        Currently, the only thing you can modify about a table after it has
        been created is the throughput.
        Requires a ``throughput`` parameter, which should be a
        dictionary. If provided, it should specify a ``read`` & ``write`` key,
        both of which should have an integer value associated with them.
        Returns ``True`` on success.
        Example::
            # For a read-heavier application...
            >>> users.update(throughput={
            ...     'read': 20,
            ...     'write': 10,
            ... })
            True
            # To also update the global index(es) throughput.
            >>> users.update(throughput={
            ...     'read': 20,
            ...     'write': 10,
            ... },
            ... global_secondary_indexes={
            ...     'TheIndexNameHere': {
            ...         'read': 15,
            ...         'write': 5,
            ...     }
            ... })
            True
        """
        self.throughput = throughput
        data = {
            'ReadCapacityUnits': int(self.throughput['read']),
            'WriteCapacityUnits': int(self.throughput['write']),
        }
        gsi_data = None
        if global_indexes:
            gsi_data = []
            for gsi_name, gsi_throughput in global_indexes.items():
                gsi_data.append({
                    "Update": {
                        "IndexName": gsi_name,
                        "ProvisionedThroughput": {
                            "ReadCapacityUnits": int(gsi_throughput['read']),
                            "WriteCapacityUnits": int(gsi_throughput['write']),
                        },
                    },
                })
        self.connection.update_table(
            self.table_name,
            provisioned_throughput=data,
            global_secondary_index_updates=gsi_data
        )
        return True
