    def __getitem__(self, key):
        if key not in self:
            # allow dict to throw the KeyError
            return super(LazyLoadMetadata, self).__getitem__(key)
        # already loaded
        val = super(LazyLoadMetadata, self).__getitem__(key)
        if val is not None:
            return val
        if key in self._leaves:
            resource = self._leaves[key]
            for i in range(0, self._num_retries):
                try:
                    val = boto.utils.retry_url(
                        self._url + urllib.quote(resource,
                                                 safe="/:"),
                        num_retries=self._num_retries)
                    if val and val[0] == '{':
                        val = json.loads(val)
                        break
                    else:
                        p = val.find('\n')
                        if p > 0:
                            val = val.split('\n')
                        break
                except JSONDecodeError, e:
                    boto.log.debug(
                        "encountered '%s' exception: %s" % (
                            e.__class__.__name__, e))
                    boto.log.debug(
                        'corrupted JSON data found: %s' % val)
                except Exception, e:
                    boto.log.debug("encountered unretryable" +
                                   " '%s' exception, re-raising" % (
                                       e.__class__.__name__))
                    raise
                boto.log.error("Caught exception reading meta data" +
                               " for the '%s' try" % (i + 1))
                if i + 1 != self._num_retries:
                    next_sleep = random.random() * (2 ** i)
                    time.sleep(next_sleep)
            else:
                boto.log.error('Unable to read meta data, giving up')
                boto.log.error(
                    "encountered '%s' exception: %s" % (
                        e.__class__.__name__, e))
                raise
            self[key] = val
        elif key in self._dicts:
            self[key] = LazyLoadMetadata(self._url + key + '/',
                                         self._num_retries)
        return super(LazyLoadMetadata, self).__getitem__(key)
