    def get_key(self, key_name, headers=None, version_id=None,
                response_headers=None, generation=None):
        
        query_args_l = []
        if generation:
            query_args_l.append('generation=%s' % generation)
        if response_headers:
            for rk, rv in response_headers.iteritems():
                query_args_l.append('%s=%s' % (rk, urllib.quote(rv)))
        try:
            key, resp = self._get_key_internal(key_name, headers,
                                               query_args_l=query_args_l)
        except GSResponseError, e:
            if e.status == 403 and 'Forbidden' in e.reason:
                # If we failed getting an object, let the user know which object
                # failed rather than just returning a generic 403.
                e.reason = ("Access denied to 'gs://%s/%s'." %
                            (self.name, key_name))
            raise
        return key
