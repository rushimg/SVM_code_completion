    def create(cls, table_name, schema, throughput=None, indexes=None,
               global_indexes=None, connection=None):
        
        table = cls(table_name=table_name, connection=connection)
        table.schema = schema
        if throughput is not None:
            table.throughput = throughput
        if indexes is not None:
            table.indexes = indexes
        if global_indexes is not None:
            table.global_indexes = global_indexes
        # Prep the schema.
        raw_schema = []
        attr_defs = []
        seen_attrs = set()
        for field in table.schema:
            raw_schema.append(field.schema())
            # Build the attributes off what we know.
            seen_attrs.add(field.name)
            attr_defs.append(field.definition())
        raw_throughput = {
            'ReadCapacityUnits': int(table.throughput['read']),
            'WriteCapacityUnits': int(table.throughput['write']),
        }
        kwargs = {}
        kwarg_map = {
            'indexes': 'local_secondary_indexes',
            'global_indexes': 'global_secondary_indexes',
        }
        for index_attr in ('indexes', 'global_indexes'):
            table_indexes = getattr(table, index_attr)
            if table_indexes:
                raw_indexes = []
                for index_field in table_indexes:
                    raw_indexes.append(index_field.schema())
                    # Make sure all attributes specified in the indexes are
                    # added to the definition
                    for field in index_field.parts:
                        if field.name not in seen_attrs:
                            seen_attrs.add(field.name)
                            attr_defs.append(field.definition())
                kwargs[kwarg_map[index_attr]] = raw_indexes
        table.connection.create_table(
            table_name=table.table_name,
            attribute_definitions=attr_defs,
            key_schema=raw_schema,
            provisioned_throughput=raw_throughput,
            **kwargs
        )
        return table
