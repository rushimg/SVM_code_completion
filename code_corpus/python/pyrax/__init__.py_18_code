def connect_to_cloudfiles(region=None, public=None, context=None):
    """
    Creates a client for working with cloud files. The default is to connect
    to the public URL; if you need to work with the ServiceNet connection, pass
    False to the 'public' parameter or set the "use_servicenet" setting to True.
    """
    if public is None:
        is_public = not bool(get_setting("use_servicenet"))
    else:
        is_public = public
    # If a specific context is passed, use that. Otherwise, use the global
    # identity reference.
    context = context or identity
    region = _safe_region(region, context=context)
    cf_url = _get_service_endpoint(context, "object_store", region,
            public=is_public)
    cloudfiles = None
    if not cf_url:
        # Service is not available
        return
    cdn_url = _get_service_endpoint(context, "object_cdn", region)
    ep_type = {True: "publicURL", False: "internalURL"}[is_public]
    opts = {"tenant_id": context.tenant_name, "auth_token": context.token,
            "endpoint_type": ep_type, "tenant_name": context.tenant_name,
            "object_storage_url": cf_url, "object_cdn_url": cdn_url,
            "region_name": region}
    verify_ssl = get_setting("verify_ssl")
    cloudfiles = _cf.CFClient(context.auth_endpoint, context.username,
            context.password, tenant_name=context.tenant_name,
            preauthurl=cf_url, preauthtoken=context.token, auth_version="2",
            os_options=opts, verify_ssl=verify_ssl, http_log_debug=_http_debug)
    cloudfiles.user_agent = _make_agent_name(cloudfiles.user_agent)
    cloudfiles.identity = identity
    return cloudfiles


@_require_auth
