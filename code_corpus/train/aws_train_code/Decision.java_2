/**
 * <p>
 * Specifies a decision made by the decider. A decision can be one of these types:
 * </p>
 * 
 * <ul>
 * <li> <b>ScheduleActivityTask</b> schedules an activity task.</li>
 * <li> <b>RequestCancelActivityTask</b> attempts to cancel a previously scheduled activity task. If the activity task was scheduled but has not been
 * assigned to a worker, then it will be canceled. If the activity task was already assigned to a worker, then the worker will be informed that
 * cancellation has been requested in the response to RecordActivityTaskHeartbeat.</li>
 * <li> <b>RecordMarker</b> records a <code>MarkerRecorded</code> event in the history. Markers can be used for adding custom information in the history
 * for instance to let deciders know that they do not need to look at the history beyond the marker event.</li>
 * <li> <b>CompleteWorkflowExecution</b> closes the workflow execution and records a <code>WorkflowExecutionCompleted</code> event in the history .</li>
 * <li> <b>FailWorkflowExecution</b> closes the workflow execution and records a <code>WorkflowExecutionFailed</code> event in the history.</li>
 * <li> <b>CancelWorkflowExecution</b> closes the workflow execution and records a <code>WorkflowExecutionCanceled</code> event in the history.</li>
 * <li> <b>ContinueAsNewWorkflowExecution</b> closes the workflow execution and starts a new workflow execution of the same type using the same workflow
 * id and a unique run Id. A <code>WorkflowExecutionContinuedAsNew</code> event is recorded in the history.</li>
 * <li> <b>StartTimer</b> starts a timer for this workflow execution and records a <code>TimerStarted</code> event in the history. This timer will fire
 * after the specified delay and record a <code>TimerFired</code> event.</li>
 * <li> <b>CancelTimer</b> cancels a previously started timer and records a <code>TimerCanceled</code> event in the history.</li>
 * <li> <b>SignalExternalWorkflowExecution</b> requests a signal to be delivered to the specified external workflow execution and records a
 * <code>SignalExternalWorkflowExecutionInitiated</code> event in the history.</li>
 * <li> <b>RequestCancelExternalWorkflowExecution</b> requests that a request be made to cancel the specified external workflow execution and records a
 * <code>RequestCancelExternalWorkflowExecutionInitiated</code> event in the history.</li>
 * <li> <b>StartChildWorkflowExecution</b> requests that a child workflow execution be started and records a
 * <code>StartChildWorkflowExecutionInitiated</code> event in the history. The child workflow execution is a separate workflow execution with its own
 * history.</li>
 * 
 * </ul>
 * <p>
 * The ordering of decisions should follow a logical flow. Some decisions might not make sense in the current context of the workflow execution and will
 * therefore fail. A decision might also fail due to a limit being reached on your account. One of the following events might be added to the history to
 * indicate an error:
 * </p>
 * 
 * <ul>
 * <li> <b>ScheduleActivityTaskFailed</b> a ScheduleActivityTask decision failed. This could happen if the activity type specified in the decision is
 * not registered, is in a deprecated state, or the decision is not properly configured.</li>
 * <li> <b>RequestCancelActivityTaskFailed</b> a RequestCancelActivityTask decision failed. This could happen if there is no open activity task with the
 * specified activityId.</li>
 * <li> <b>StartTimerFailed</b> a StartTimer decision failed. This could happen if there is another open timer with the same timerId.</li>
 * <li> <b>CancelTimerFailed</b> a CancelTimer decision failed. This could happen if there is no open timer with the specified timerId.</li>
 * <li> <b>StartChildWorkflowExecutionFailed</b> a StartChildWorkflowExecution decision failed. This could happen if the workflow type specified is not
 * registered, is deprecated, or the decision is not properly configured.</li>
 * <li> <b>SignalExternalWorkflowExecutionFailed</b> a SignalExternalWorkflowExecution decision failed. This could happen if the <code>workflowID</code>
 * specified in the decision was incorrect. </li>
 * <li> <b>RequestCancelExternalWorkflowExecutionFailed</b> a RequestCancelExternalWorkflowExecution decision failed. This could happen if the
 * <code>workflowID</code> specified in the decision was incorrect. </li>
 * <li> <b>CancelWorkflowExecutionFailed</b> a CancelWorkflowExecution decision failed. This could happen if there is an unhandled decision task pending
 * in the workflow execution. </li>
 * <li> <b>CompleteWorkflowExecutionFailed</b> a CompleteWorkflowExecution decision failed. This could happen if there is an unhandled decision task
 * pending in the workflow execution. </li>
 * <li> <b>ContinueAsNewWorkflowExecutionFailed</b> a ContinueAsNewWorkflowExecution decision failed. This could happen if there is an unhandled
 * decision task pending in the workflow execution or the ContinueAsNewWorkflowExecution decision was not configured correctly. </li>
 * <li> <b>FailWorkflowExecutionFailed</b> a FailWorkflowExecution decision failed. This could happen if there is an unhandled decision task pending in
 * the workflow execution. </li>
 * 
 * </ul>
 * <p>
 * The preceding error events might occur due to an error in the decider logic, which might put the workflow execution in an unstable state The cause
 * field in the event structure for the error event indicates the cause of the error.
 * </p>
 * <p>
 * <b>NOTE:</b> A workflow execution may be closed by the decider by returning one of the following decisions when completing a decision task:
 * CompleteWorkflowExecution, FailWorkflowExecution, CancelWorkflowExecution and ContinueAsNewWorkflowExecution. An UnhandledDecision fault will be
 * returned if a workflow closing decision is specified and a signal or activity event had been added to the history while the decision task was being
 * performed by the decider. Unlike the above situations which are logic issues, this fault is always possible because of race conditions in a
 * distributed system. The right action here is to call RespondDecisionTaskCompleted without any decisions. This would result in another decision task
 * with these new events included in the history. The decider should handle the new events and may decide to close the workflow execution.
 * </p>
 * <p>
 * You must code a decision by first setting the decision type field to one of the above decision values, and then set the corresponding attributes
 * field shown below:
 * </p>
 * 
 * <ul>
 * <li> ScheduleActivityTaskDecisionAttributes </li>
 * <li> RequestCancelActivityTaskDecisionAttributes </li>
 * <li> CompleteWorkflowExecutionDecisionAttributes </li>
 * <li> FailWorkflowExecutionDecisionAttributes </li>
 * <li> CancelWorkflowExecutionDecisionAttributes </li>
 * <li> ContinueAsNewWorkflowExecutionDecisionAttributes </li>
 * <li> RecordMarkerDecisionAttributes </li>
 * <li> StartTimerDecisionAttributes </li>
 * <li> CancelTimerDecisionAttributes </li>
 * <li> SignalExternalWorkflowExecutionDecisionAttributes </li>
 * <li> RequestCancelExternalWorkflowExecutionDecisionAttributes </li>
 * <li> StartChildWorkflowExecutionDecisionAttributes </li>
 * 
 * </ul>
 */
