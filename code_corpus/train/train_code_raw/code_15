/**
     * parse the filtered text to words and their frequencies - still need some optimization
     * 
     * @param filteredText - text to be parsed 
     */
    public void parse(String filteredText) {
            freq.clear();        //clear hashmap and priorityQ before parse again
            freqPQ.clear();
            if (filteredText == null)
                    return;
            filteredText = filteredText.toLowerCase();
        String subStr;      //word parsed
        int strLen = filteredText.length();     //length of filteredText
        for (int i = 0;i < strLen;i++) {
            if (isUseful(filteredText.charAt(i))) { //judge for useful information
                int subStrEnd = i + 1;          //end index of the word
                if (subStrEnd >= strLen)
                        return;
                while (isUseful(filteredText.charAt(subStrEnd))) {     //looking for the end of the subString
                    if (subStrEnd == strLen - 1) {      //to avoid indexOutOfBoundException
                        subStr = filteredText.substring(i, subStrEnd);  //edge case - at the end of the string
                        putIntoHashmap(subStr);
                        return;
                    }
                    subStrEnd++;
                }
                subStr = filteredText.substring(i, subStrEnd);
                putIntoHashmap(subStr);
                i = subStrEnd - 1;      //skip the word parsed
                //System.out.println(subStr);
            }
        }
    }
