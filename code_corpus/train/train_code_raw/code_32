/* removePattern (generic)
         * remove the string pattern from string input
         * 
         * @param input - string from which pattern should be removed
         * @param pattern - string which is to be removed from input
         * @return input - pattern
         */
        /* removePattern(input,pattern)
         * removes all instances of pattern from input
         */
        public String removePattern(String input, String pattern){
                if(pattern.length() > input.length()){
                        System.out.println("removePatter Error::pattern is longer than input! Returning input unchanged.");
                        return input;
                }
                ArrayList<Integer> matches = KMPMatcher(input, pattern);
                String newString = "";
                int index = 0;
                int arrayIndex = 0;
                while(index < input.length()){
                        if(index != matches.get(arrayIndex))
                                newString += input.charAt(index++);
                        else{
                                index += pattern.length();
                                arrayIndex++;
                                if(arrayIndex == matches.size()){
                                        newString += input.substring(index);
                                        break;
                                }
                        }
                }
                return newString;
        }
