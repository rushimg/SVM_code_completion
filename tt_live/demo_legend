Legend for demos of run_live
====================================================================================

#	API(s)	in	percentages	comments

1) 	reg/fb	/DefaultFacebookClient.java_22	[1missclassified]	test if input is a file in the corpus if it will be returned correctly, works correctly depending on how the training data is ranked, base case example
	>> python run_live.py ../tt_live/demo_1/input ../code_corpus/regular/facebook/ F
	
	-> input2 	/FacebookResponseStatusException.java_5		same as above, works correctly
	>> python run_live.py ../tt_live/demo_1/input2 ../code_corpus/regular/facebook/ F
	
2)	reg/aws	Input comment is a comment for one of the overloaded functions of a particular class. Expect the returned comments to be the remaining overloaded methods of the same class.
	9/10 returned classes are similar, i.e. in same class or in another class with similar value, this is better than originally planned becasue the similaritites for these methods betweeen classes is greater than the inter-class similarity.
	>> python run_live.py ../tt_live/demo_2/input ../code_corpus/regular/aws/ T


3) 2 APIs fb/tw		Corpus contains two or more APIs. Comment is a comment from one API and expect all returned comments to be from the same API.
	-> input	DefaultFacebookClient.java_21	fb_api	'facebook' in comment 9/10 training are fb, 10/10 returned are fb 
	>> python run_live_multi_corp.py ../tt_live/demo_3/input ../code_corpus/regular/facebook/ F

	-> input2	TweetsResourcesAsync.java_7	tw_api	'Twitter4j' in comment 9/10 training are tw, 7/10 returned are fb
	>> python run_live_multi_corp.py ../tt_live/demo_3/input2 ../code_corpus/regular/facebook/ F
 
4(time-permitting) Create some comments similar to one of the corpus comments and see if correct method can be returned.





